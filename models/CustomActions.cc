/**
 *
 *  CustomActions.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "CustomActions.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string CustomActions::Cols::_id = "id";
const std::string CustomActions::Cols::_name = "name";
const std::string CustomActions::Cols::_actions = "actions";
const std::string CustomActions::Cols::_description = "description";
const std::string CustomActions::Cols::_position = "position";
const std::string CustomActions::primaryKeyName = "id";
const bool CustomActions::hasPrimaryKey = true;
const std::string CustomActions::tableName = "custom_actions";

const std::vector<typename CustomActions::MetaData> CustomActions::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"name","std::string","character varying",0,0,0,0},
{"actions","std::string","text",0,0,0,0},
{"description","std::string","text",0,0,0,0},
{"position","int32_t","integer",4,0,0,0}
};
const std::string &CustomActions::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
CustomActions::CustomActions(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["actions"].isNull())
        {
            _actions=std::make_shared<std::string>(r["actions"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            _description=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["position"].isNull())
        {
            _position=std::make_shared<int32_t>(r["position"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _name=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _actions=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _description=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _position=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

CustomActions::CustomActions(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _name=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _actions=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _description=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _position=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
    }
}

CustomActions::CustomActions(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("name"))
    {
        _name=std::make_shared<std::string>(pJson["name"].asString());
    }
    if(pJson.isMember("actions"))
    {
        _actions=std::make_shared<std::string>(pJson["actions"].asString());
    }
    if(pJson.isMember("description"))
    {
        _description=std::make_shared<std::string>(pJson["description"].asString());
    }
    if(pJson.isMember("position"))
    {
        _position=std::make_shared<int32_t>((int32_t)pJson["position"].asInt64());
    }
}

void CustomActions::updateByMasqueradedJson(const Json::Value &pJson, 
                                                                                                     const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        _name=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        _actions=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        _description=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        _position=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
    }
}
                                                                    
void CustomActions::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("name"))
    {
        _dirtyFlag[1] = true;
        _name=std::make_shared<std::string>(pJson["name"].asString());
    }
    if(pJson.isMember("actions"))
    {
        _dirtyFlag[2] = true;
        _actions=std::make_shared<std::string>(pJson["actions"].asString());
    }
    if(pJson.isMember("description"))
    {
        _dirtyFlag[3] = true;
        _description=std::make_shared<std::string>(pJson["description"].asString());
    }
    if(pJson.isMember("position"))
    {
        _dirtyFlag[4] = true;
        _position=std::make_shared<int32_t>((int32_t)pJson["position"].asInt64());
    }
}

const int32_t &CustomActions::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomActions::getId() const noexcept
{
    return _id;
}
const typename CustomActions::PrimaryKeyType & CustomActions::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &CustomActions::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomActions::getName() const noexcept
{
    return _name;
}
void CustomActions::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[1] = true;
}
void CustomActions::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[1] = true;
}


const std::string &CustomActions::getValueOfActions() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_actions)
        return *_actions;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomActions::getActions() const noexcept
{
    return _actions;
}
void CustomActions::setActions(const std::string &pActions) noexcept
{
    _actions = std::make_shared<std::string>(pActions);
    _dirtyFlag[2] = true;
}
void CustomActions::setActions(std::string &&pActions) noexcept
{
    _actions = std::make_shared<std::string>(std::move(pActions));
    _dirtyFlag[2] = true;
}


const std::string &CustomActions::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_description)
        return *_description;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomActions::getDescription() const noexcept
{
    return _description;
}
void CustomActions::setDescription(const std::string &pDescription) noexcept
{
    _description = std::make_shared<std::string>(pDescription);
    _dirtyFlag[3] = true;
}
void CustomActions::setDescription(std::string &&pDescription) noexcept
{
    _description = std::make_shared<std::string>(std::move(pDescription));
    _dirtyFlag[3] = true;
}


const int32_t &CustomActions::getValueOfPosition() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_position)
        return *_position;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomActions::getPosition() const noexcept
{
    return _position;
}
void CustomActions::setPosition(const int32_t &pPosition) noexcept
{
    _position = std::make_shared<int32_t>(pPosition);
    _dirtyFlag[4] = true;
}


void CustomActions::updateId(const uint64_t id)
{
}

const std::vector<std::string> &CustomActions::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "name",
        "actions",
        "description",
        "position"
    };
    return _inCols;
}

void CustomActions::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getName())
    {
        binder << getValueOfName();
    }
    else
    {
        binder << nullptr;
    }
    if(getActions())
    {
        binder << getValueOfActions();
    }
    else
    {
        binder << nullptr;
    }
    if(getDescription())
    {
        binder << getValueOfDescription();
    }
    else
    {
        binder << nullptr;
    }
    if(getPosition())
    {
        binder << getValueOfPosition();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> CustomActions::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void CustomActions::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getActions())
        {
            binder << getValueOfActions();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getPosition())
        {
            binder << getValueOfPosition();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value CustomActions::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getActions())
    {
        ret["actions"]=getValueOfActions();
    }
    else
    {
        ret["actions"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    return ret;
}

Json::Value CustomActions::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getActions())
            {
                ret[pMasqueradingVector[2]]=getValueOfActions();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[3]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPosition())
            {
                ret[pMasqueradingVector[4]]=getValueOfPosition();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getActions())
    {
        ret["actions"]=getValueOfActions();
    }
    else
    {
        ret["actions"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    return ret;
}
