/**
 *
 *  CustomFields.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "CustomFields.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject6;

const std::string CustomFields::Cols::_id = "id";
const std::string CustomFields::Cols::_type = "type";
const std::string CustomFields::Cols::_field_format = "field_format";
const std::string CustomFields::Cols::_regexp = "regexp";
const std::string CustomFields::Cols::_min_length = "min_length";
const std::string CustomFields::Cols::_max_length = "max_length";
const std::string CustomFields::Cols::_is_required = "is_required";
const std::string CustomFields::Cols::_is_for_all = "is_for_all";
const std::string CustomFields::Cols::_is_filter = "is_filter";
const std::string CustomFields::Cols::_position = "position";
const std::string CustomFields::Cols::_searchable = "searchable";
const std::string CustomFields::Cols::_editable = "editable";
const std::string CustomFields::Cols::_visible = "visible";
const std::string CustomFields::Cols::_multi_value = "multi_value";
const std::string CustomFields::Cols::_default_value = "default_value";
const std::string CustomFields::Cols::_name = "name";
const std::string CustomFields::Cols::_created_at = "created_at";
const std::string CustomFields::Cols::_updated_at = "updated_at";
const std::string CustomFields::primaryKeyName = "id";
const bool CustomFields::hasPrimaryKey = true;
const std::string CustomFields::tableName = "custom_fields";

const std::vector<typename CustomFields::MetaData> CustomFields::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"type","std::string","character varying",30,0,0,1},
{"field_format","std::string","character varying",30,0,0,1},
{"regexp","std::string","character varying",0,0,0,0},
{"min_length","int32_t","integer",4,0,0,1},
{"max_length","int32_t","integer",4,0,0,1},
{"is_required","bool","boolean",1,0,0,1},
{"is_for_all","bool","boolean",1,0,0,1},
{"is_filter","bool","boolean",1,0,0,1},
{"position","int32_t","integer",4,0,0,0},
{"searchable","bool","boolean",1,0,0,0},
{"editable","bool","boolean",1,0,0,0},
{"visible","bool","boolean",1,0,0,1},
{"multi_value","bool","boolean",1,0,0,0},
{"default_value","std::string","text",0,0,0,0},
{"name","std::string","character varying",255,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &CustomFields::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
CustomFields::CustomFields(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["field_format"].isNull())
        {
            _fieldFormat=std::make_shared<std::string>(r["field_format"].as<std::string>());
        }
        if(!r["regexp"].isNull())
        {
            _regexp=std::make_shared<std::string>(r["regexp"].as<std::string>());
        }
        if(!r["min_length"].isNull())
        {
            _minLength=std::make_shared<int32_t>(r["min_length"].as<int32_t>());
        }
        if(!r["max_length"].isNull())
        {
            _maxLength=std::make_shared<int32_t>(r["max_length"].as<int32_t>());
        }
        if(!r["is_required"].isNull())
        {
            _isRequired=std::make_shared<bool>(r["is_required"].as<bool>());
        }
        if(!r["is_for_all"].isNull())
        {
            _isForAll=std::make_shared<bool>(r["is_for_all"].as<bool>());
        }
        if(!r["is_filter"].isNull())
        {
            _isFilter=std::make_shared<bool>(r["is_filter"].as<bool>());
        }
        if(!r["position"].isNull())
        {
            _position=std::make_shared<int32_t>(r["position"].as<int32_t>());
        }
        if(!r["searchable"].isNull())
        {
            _searchable=std::make_shared<bool>(r["searchable"].as<bool>());
        }
        if(!r["editable"].isNull())
        {
            _editable=std::make_shared<bool>(r["editable"].as<bool>());
        }
        if(!r["visible"].isNull())
        {
            _visible=std::make_shared<bool>(r["visible"].as<bool>());
        }
        if(!r["multi_value"].isNull())
        {
            _multiValue=std::make_shared<bool>(r["multi_value"].as<bool>());
        }
        if(!r["default_value"].isNull())
        {
            _defaultValue=std::make_shared<std::string>(r["default_value"].as<std::string>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 18 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _type=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _fieldFormat=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _regexp=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _minLength=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _maxLength=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            _isRequired=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            _isForAll=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            _isFilter=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            _position=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            _searchable=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            _editable=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            _visible=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            _multiValue=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            _defaultValue=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            _name=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }

}

CustomFields::CustomFields(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 18)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _dirtyFlag[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _type=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _fieldFormat=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _regexp=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _minLength=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _maxLength=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            _isRequired=std::make_shared<bool>(pJson[pMasqueradingVector[6]].asBool());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _isForAll=std::make_shared<bool>(pJson[pMasqueradingVector[7]].asBool());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            _isFilter=std::make_shared<bool>(pJson[pMasqueradingVector[8]].asBool());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            _position=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            _searchable=std::make_shared<bool>(pJson[pMasqueradingVector[10]].asBool());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        _dirtyFlag[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            _editable=std::make_shared<bool>(pJson[pMasqueradingVector[11]].asBool());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        _dirtyFlag[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            _visible=std::make_shared<bool>(pJson[pMasqueradingVector[12]].asBool());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        _dirtyFlag[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            _multiValue=std::make_shared<bool>(pJson[pMasqueradingVector[13]].asBool());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        _dirtyFlag[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            _defaultValue=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        _dirtyFlag[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            _name=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        _dirtyFlag[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        _dirtyFlag[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[17]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

CustomFields::CustomFields(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _dirtyFlag[0]=true;
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        _dirtyFlag[1]=true;
        if(!pJson["type"].isNull())
        {
            _type=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("field_format"))
    {
        _dirtyFlag[2]=true;
        if(!pJson["field_format"].isNull())
        {
            _fieldFormat=std::make_shared<std::string>(pJson["field_format"].asString());
        }
    }
    if(pJson.isMember("regexp"))
    {
        _dirtyFlag[3]=true;
        if(!pJson["regexp"].isNull())
        {
            _regexp=std::make_shared<std::string>(pJson["regexp"].asString());
        }
    }
    if(pJson.isMember("min_length"))
    {
        _dirtyFlag[4]=true;
        if(!pJson["min_length"].isNull())
        {
            _minLength=std::make_shared<int32_t>((int32_t)pJson["min_length"].asInt64());
        }
    }
    if(pJson.isMember("max_length"))
    {
        _dirtyFlag[5]=true;
        if(!pJson["max_length"].isNull())
        {
            _maxLength=std::make_shared<int32_t>((int32_t)pJson["max_length"].asInt64());
        }
    }
    if(pJson.isMember("is_required"))
    {
        _dirtyFlag[6]=true;
        if(!pJson["is_required"].isNull())
        {
            _isRequired=std::make_shared<bool>(pJson["is_required"].asBool());
        }
    }
    if(pJson.isMember("is_for_all"))
    {
        _dirtyFlag[7]=true;
        if(!pJson["is_for_all"].isNull())
        {
            _isForAll=std::make_shared<bool>(pJson["is_for_all"].asBool());
        }
    }
    if(pJson.isMember("is_filter"))
    {
        _dirtyFlag[8]=true;
        if(!pJson["is_filter"].isNull())
        {
            _isFilter=std::make_shared<bool>(pJson["is_filter"].asBool());
        }
    }
    if(pJson.isMember("position"))
    {
        _dirtyFlag[9]=true;
        if(!pJson["position"].isNull())
        {
            _position=std::make_shared<int32_t>((int32_t)pJson["position"].asInt64());
        }
    }
    if(pJson.isMember("searchable"))
    {
        _dirtyFlag[10]=true;
        if(!pJson["searchable"].isNull())
        {
            _searchable=std::make_shared<bool>(pJson["searchable"].asBool());
        }
    }
    if(pJson.isMember("editable"))
    {
        _dirtyFlag[11]=true;
        if(!pJson["editable"].isNull())
        {
            _editable=std::make_shared<bool>(pJson["editable"].asBool());
        }
    }
    if(pJson.isMember("visible"))
    {
        _dirtyFlag[12]=true;
        if(!pJson["visible"].isNull())
        {
            _visible=std::make_shared<bool>(pJson["visible"].asBool());
        }
    }
    if(pJson.isMember("multi_value"))
    {
        _dirtyFlag[13]=true;
        if(!pJson["multi_value"].isNull())
        {
            _multiValue=std::make_shared<bool>(pJson["multi_value"].asBool());
        }
    }
    if(pJson.isMember("default_value"))
    {
        _dirtyFlag[14]=true;
        if(!pJson["default_value"].isNull())
        {
            _defaultValue=std::make_shared<std::string>(pJson["default_value"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        _dirtyFlag[15]=true;
        if(!pJson["name"].isNull())
        {
            _name=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        _dirtyFlag[16]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("updated_at"))
    {
        _dirtyFlag[17]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

void CustomFields::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 18)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _type=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _fieldFormat=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _regexp=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _minLength=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _maxLength=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            _isRequired=std::make_shared<bool>(pJson[pMasqueradingVector[6]].asBool());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _isForAll=std::make_shared<bool>(pJson[pMasqueradingVector[7]].asBool());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            _isFilter=std::make_shared<bool>(pJson[pMasqueradingVector[8]].asBool());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            _position=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            _searchable=std::make_shared<bool>(pJson[pMasqueradingVector[10]].asBool());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        _dirtyFlag[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            _editable=std::make_shared<bool>(pJson[pMasqueradingVector[11]].asBool());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        _dirtyFlag[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            _visible=std::make_shared<bool>(pJson[pMasqueradingVector[12]].asBool());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        _dirtyFlag[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            _multiValue=std::make_shared<bool>(pJson[pMasqueradingVector[13]].asBool());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        _dirtyFlag[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            _defaultValue=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        _dirtyFlag[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            _name=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        _dirtyFlag[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        _dirtyFlag[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[17]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}
                                                                    
void CustomFields::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        _dirtyFlag[1] = true;
        if(!pJson["type"].isNull())
        {
            _type=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("field_format"))
    {
        _dirtyFlag[2] = true;
        if(!pJson["field_format"].isNull())
        {
            _fieldFormat=std::make_shared<std::string>(pJson["field_format"].asString());
        }
    }
    if(pJson.isMember("regexp"))
    {
        _dirtyFlag[3] = true;
        if(!pJson["regexp"].isNull())
        {
            _regexp=std::make_shared<std::string>(pJson["regexp"].asString());
        }
    }
    if(pJson.isMember("min_length"))
    {
        _dirtyFlag[4] = true;
        if(!pJson["min_length"].isNull())
        {
            _minLength=std::make_shared<int32_t>((int32_t)pJson["min_length"].asInt64());
        }
    }
    if(pJson.isMember("max_length"))
    {
        _dirtyFlag[5] = true;
        if(!pJson["max_length"].isNull())
        {
            _maxLength=std::make_shared<int32_t>((int32_t)pJson["max_length"].asInt64());
        }
    }
    if(pJson.isMember("is_required"))
    {
        _dirtyFlag[6] = true;
        if(!pJson["is_required"].isNull())
        {
            _isRequired=std::make_shared<bool>(pJson["is_required"].asBool());
        }
    }
    if(pJson.isMember("is_for_all"))
    {
        _dirtyFlag[7] = true;
        if(!pJson["is_for_all"].isNull())
        {
            _isForAll=std::make_shared<bool>(pJson["is_for_all"].asBool());
        }
    }
    if(pJson.isMember("is_filter"))
    {
        _dirtyFlag[8] = true;
        if(!pJson["is_filter"].isNull())
        {
            _isFilter=std::make_shared<bool>(pJson["is_filter"].asBool());
        }
    }
    if(pJson.isMember("position"))
    {
        _dirtyFlag[9] = true;
        if(!pJson["position"].isNull())
        {
            _position=std::make_shared<int32_t>((int32_t)pJson["position"].asInt64());
        }
    }
    if(pJson.isMember("searchable"))
    {
        _dirtyFlag[10] = true;
        if(!pJson["searchable"].isNull())
        {
            _searchable=std::make_shared<bool>(pJson["searchable"].asBool());
        }
    }
    if(pJson.isMember("editable"))
    {
        _dirtyFlag[11] = true;
        if(!pJson["editable"].isNull())
        {
            _editable=std::make_shared<bool>(pJson["editable"].asBool());
        }
    }
    if(pJson.isMember("visible"))
    {
        _dirtyFlag[12] = true;
        if(!pJson["visible"].isNull())
        {
            _visible=std::make_shared<bool>(pJson["visible"].asBool());
        }
    }
    if(pJson.isMember("multi_value"))
    {
        _dirtyFlag[13] = true;
        if(!pJson["multi_value"].isNull())
        {
            _multiValue=std::make_shared<bool>(pJson["multi_value"].asBool());
        }
    }
    if(pJson.isMember("default_value"))
    {
        _dirtyFlag[14] = true;
        if(!pJson["default_value"].isNull())
        {
            _defaultValue=std::make_shared<std::string>(pJson["default_value"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        _dirtyFlag[15] = true;
        if(!pJson["name"].isNull())
        {
            _name=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        _dirtyFlag[16] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("updated_at"))
    {
        _dirtyFlag[17] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

const int32_t &CustomFields::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomFields::getId() const noexcept
{
    return _id;
}
const typename CustomFields::PrimaryKeyType & CustomFields::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &CustomFields::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomFields::getType() const noexcept
{
    return _type;
}
void CustomFields::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[1] = true;
}
void CustomFields::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[1] = true;
}


const std::string &CustomFields::getValueOfFieldFormat() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_fieldFormat)
        return *_fieldFormat;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomFields::getFieldFormat() const noexcept
{
    return _fieldFormat;
}
void CustomFields::setFieldFormat(const std::string &pFieldFormat) noexcept
{
    _fieldFormat = std::make_shared<std::string>(pFieldFormat);
    _dirtyFlag[2] = true;
}
void CustomFields::setFieldFormat(std::string &&pFieldFormat) noexcept
{
    _fieldFormat = std::make_shared<std::string>(std::move(pFieldFormat));
    _dirtyFlag[2] = true;
}


const std::string &CustomFields::getValueOfRegexp() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_regexp)
        return *_regexp;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomFields::getRegexp() const noexcept
{
    return _regexp;
}
void CustomFields::setRegexp(const std::string &pRegexp) noexcept
{
    _regexp = std::make_shared<std::string>(pRegexp);
    _dirtyFlag[3] = true;
}
void CustomFields::setRegexp(std::string &&pRegexp) noexcept
{
    _regexp = std::make_shared<std::string>(std::move(pRegexp));
    _dirtyFlag[3] = true;
}


const int32_t &CustomFields::getValueOfMinLength() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_minLength)
        return *_minLength;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomFields::getMinLength() const noexcept
{
    return _minLength;
}
void CustomFields::setMinLength(const int32_t &pMinLength) noexcept
{
    _minLength = std::make_shared<int32_t>(pMinLength);
    _dirtyFlag[4] = true;
}


const int32_t &CustomFields::getValueOfMaxLength() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_maxLength)
        return *_maxLength;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomFields::getMaxLength() const noexcept
{
    return _maxLength;
}
void CustomFields::setMaxLength(const int32_t &pMaxLength) noexcept
{
    _maxLength = std::make_shared<int32_t>(pMaxLength);
    _dirtyFlag[5] = true;
}


const bool &CustomFields::getValueOfIsRequired() const noexcept
{
    const static bool defaultValue = bool();
    if(_isRequired)
        return *_isRequired;
    return defaultValue;
}
const std::shared_ptr<bool> &CustomFields::getIsRequired() const noexcept
{
    return _isRequired;
}
void CustomFields::setIsRequired(const bool &pIsRequired) noexcept
{
    _isRequired = std::make_shared<bool>(pIsRequired);
    _dirtyFlag[6] = true;
}


const bool &CustomFields::getValueOfIsForAll() const noexcept
{
    const static bool defaultValue = bool();
    if(_isForAll)
        return *_isForAll;
    return defaultValue;
}
const std::shared_ptr<bool> &CustomFields::getIsForAll() const noexcept
{
    return _isForAll;
}
void CustomFields::setIsForAll(const bool &pIsForAll) noexcept
{
    _isForAll = std::make_shared<bool>(pIsForAll);
    _dirtyFlag[7] = true;
}


const bool &CustomFields::getValueOfIsFilter() const noexcept
{
    const static bool defaultValue = bool();
    if(_isFilter)
        return *_isFilter;
    return defaultValue;
}
const std::shared_ptr<bool> &CustomFields::getIsFilter() const noexcept
{
    return _isFilter;
}
void CustomFields::setIsFilter(const bool &pIsFilter) noexcept
{
    _isFilter = std::make_shared<bool>(pIsFilter);
    _dirtyFlag[8] = true;
}


const int32_t &CustomFields::getValueOfPosition() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_position)
        return *_position;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomFields::getPosition() const noexcept
{
    return _position;
}
void CustomFields::setPosition(const int32_t &pPosition) noexcept
{
    _position = std::make_shared<int32_t>(pPosition);
    _dirtyFlag[9] = true;
}


const bool &CustomFields::getValueOfSearchable() const noexcept
{
    const static bool defaultValue = bool();
    if(_searchable)
        return *_searchable;
    return defaultValue;
}
const std::shared_ptr<bool> &CustomFields::getSearchable() const noexcept
{
    return _searchable;
}
void CustomFields::setSearchable(const bool &pSearchable) noexcept
{
    _searchable = std::make_shared<bool>(pSearchable);
    _dirtyFlag[10] = true;
}


const bool &CustomFields::getValueOfEditable() const noexcept
{
    const static bool defaultValue = bool();
    if(_editable)
        return *_editable;
    return defaultValue;
}
const std::shared_ptr<bool> &CustomFields::getEditable() const noexcept
{
    return _editable;
}
void CustomFields::setEditable(const bool &pEditable) noexcept
{
    _editable = std::make_shared<bool>(pEditable);
    _dirtyFlag[11] = true;
}


const bool &CustomFields::getValueOfVisible() const noexcept
{
    const static bool defaultValue = bool();
    if(_visible)
        return *_visible;
    return defaultValue;
}
const std::shared_ptr<bool> &CustomFields::getVisible() const noexcept
{
    return _visible;
}
void CustomFields::setVisible(const bool &pVisible) noexcept
{
    _visible = std::make_shared<bool>(pVisible);
    _dirtyFlag[12] = true;
}


const bool &CustomFields::getValueOfMultiValue() const noexcept
{
    const static bool defaultValue = bool();
    if(_multiValue)
        return *_multiValue;
    return defaultValue;
}
const std::shared_ptr<bool> &CustomFields::getMultiValue() const noexcept
{
    return _multiValue;
}
void CustomFields::setMultiValue(const bool &pMultiValue) noexcept
{
    _multiValue = std::make_shared<bool>(pMultiValue);
    _dirtyFlag[13] = true;
}


const std::string &CustomFields::getValueOfDefaultValue() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_defaultValue)
        return *_defaultValue;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomFields::getDefaultValue() const noexcept
{
    return _defaultValue;
}
void CustomFields::setDefaultValue(const std::string &pDefaultValue) noexcept
{
    _defaultValue = std::make_shared<std::string>(pDefaultValue);
    _dirtyFlag[14] = true;
}
void CustomFields::setDefaultValue(std::string &&pDefaultValue) noexcept
{
    _defaultValue = std::make_shared<std::string>(std::move(pDefaultValue));
    _dirtyFlag[14] = true;
}


const std::string &CustomFields::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomFields::getName() const noexcept
{
    return _name;
}
void CustomFields::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[15] = true;
}
void CustomFields::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[15] = true;
}


const ::trantor::Date &CustomFields::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &CustomFields::getCreatedAt() const noexcept
{
    return _createdAt;
}
void CustomFields::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[16] = true;
}


const ::trantor::Date &CustomFields::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &CustomFields::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void CustomFields::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[17] = true;
}


void CustomFields::updateId(const uint64_t id)
{
}

const std::vector<std::string> &CustomFields::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "type",
        "field_format",
        "regexp",
        "min_length",
        "max_length",
        "is_required",
        "is_for_all",
        "is_filter",
        "position",
        "searchable",
        "editable",
        "visible",
        "multi_value",
        "default_value",
        "name",
        "created_at",
        "updated_at"
    };
    return _inCols;
}

void CustomFields::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getFieldFormat())
        {
            binder << getValueOfFieldFormat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getRegexp())
        {
            binder << getValueOfRegexp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getMinLength())
        {
            binder << getValueOfMinLength();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getMaxLength())
        {
            binder << getValueOfMaxLength();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getIsRequired())
        {
            binder << getValueOfIsRequired();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getIsForAll())
        {
            binder << getValueOfIsForAll();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getIsFilter())
        {
            binder << getValueOfIsFilter();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getPosition())
        {
            binder << getValueOfPosition();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getSearchable())
        {
            binder << getValueOfSearchable();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getEditable())
        {
            binder << getValueOfEditable();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getVisible())
        {
            binder << getValueOfVisible();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getMultiValue())
        {
            binder << getValueOfMultiValue();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getDefaultValue())
        {
            binder << getValueOfDefaultValue();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[16])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[17])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> CustomFields::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void CustomFields::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getFieldFormat())
        {
            binder << getValueOfFieldFormat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getRegexp())
        {
            binder << getValueOfRegexp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getMinLength())
        {
            binder << getValueOfMinLength();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getMaxLength())
        {
            binder << getValueOfMaxLength();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getIsRequired())
        {
            binder << getValueOfIsRequired();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getIsForAll())
        {
            binder << getValueOfIsForAll();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getIsFilter())
        {
            binder << getValueOfIsFilter();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getPosition())
        {
            binder << getValueOfPosition();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getSearchable())
        {
            binder << getValueOfSearchable();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getEditable())
        {
            binder << getValueOfEditable();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getVisible())
        {
            binder << getValueOfVisible();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getMultiValue())
        {
            binder << getValueOfMultiValue();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getDefaultValue())
        {
            binder << getValueOfDefaultValue();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[16])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[17])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value CustomFields::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getFieldFormat())
    {
        ret["field_format"]=getValueOfFieldFormat();
    }
    else
    {
        ret["field_format"]=Json::Value();
    }
    if(getRegexp())
    {
        ret["regexp"]=getValueOfRegexp();
    }
    else
    {
        ret["regexp"]=Json::Value();
    }
    if(getMinLength())
    {
        ret["min_length"]=getValueOfMinLength();
    }
    else
    {
        ret["min_length"]=Json::Value();
    }
    if(getMaxLength())
    {
        ret["max_length"]=getValueOfMaxLength();
    }
    else
    {
        ret["max_length"]=Json::Value();
    }
    if(getIsRequired())
    {
        ret["is_required"]=getValueOfIsRequired();
    }
    else
    {
        ret["is_required"]=Json::Value();
    }
    if(getIsForAll())
    {
        ret["is_for_all"]=getValueOfIsForAll();
    }
    else
    {
        ret["is_for_all"]=Json::Value();
    }
    if(getIsFilter())
    {
        ret["is_filter"]=getValueOfIsFilter();
    }
    else
    {
        ret["is_filter"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    if(getSearchable())
    {
        ret["searchable"]=getValueOfSearchable();
    }
    else
    {
        ret["searchable"]=Json::Value();
    }
    if(getEditable())
    {
        ret["editable"]=getValueOfEditable();
    }
    else
    {
        ret["editable"]=Json::Value();
    }
    if(getVisible())
    {
        ret["visible"]=getValueOfVisible();
    }
    else
    {
        ret["visible"]=Json::Value();
    }
    if(getMultiValue())
    {
        ret["multi_value"]=getValueOfMultiValue();
    }
    else
    {
        ret["multi_value"]=Json::Value();
    }
    if(getDefaultValue())
    {
        ret["default_value"]=getValueOfDefaultValue();
    }
    else
    {
        ret["default_value"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

Json::Value CustomFields::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 18)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[1]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getFieldFormat())
            {
                ret[pMasqueradingVector[2]]=getValueOfFieldFormat();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRegexp())
            {
                ret[pMasqueradingVector[3]]=getValueOfRegexp();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getMinLength())
            {
                ret[pMasqueradingVector[4]]=getValueOfMinLength();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getMaxLength())
            {
                ret[pMasqueradingVector[5]]=getValueOfMaxLength();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getIsRequired())
            {
                ret[pMasqueradingVector[6]]=getValueOfIsRequired();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getIsForAll())
            {
                ret[pMasqueradingVector[7]]=getValueOfIsForAll();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getIsFilter())
            {
                ret[pMasqueradingVector[8]]=getValueOfIsFilter();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getPosition())
            {
                ret[pMasqueradingVector[9]]=getValueOfPosition();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getSearchable())
            {
                ret[pMasqueradingVector[10]]=getValueOfSearchable();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getEditable())
            {
                ret[pMasqueradingVector[11]]=getValueOfEditable();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getVisible())
            {
                ret[pMasqueradingVector[12]]=getValueOfVisible();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getMultiValue())
            {
                ret[pMasqueradingVector[13]]=getValueOfMultiValue();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getDefaultValue())
            {
                ret[pMasqueradingVector[14]]=getValueOfDefaultValue();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[15]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[16]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[17]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getFieldFormat())
    {
        ret["field_format"]=getValueOfFieldFormat();
    }
    else
    {
        ret["field_format"]=Json::Value();
    }
    if(getRegexp())
    {
        ret["regexp"]=getValueOfRegexp();
    }
    else
    {
        ret["regexp"]=Json::Value();
    }
    if(getMinLength())
    {
        ret["min_length"]=getValueOfMinLength();
    }
    else
    {
        ret["min_length"]=Json::Value();
    }
    if(getMaxLength())
    {
        ret["max_length"]=getValueOfMaxLength();
    }
    else
    {
        ret["max_length"]=Json::Value();
    }
    if(getIsRequired())
    {
        ret["is_required"]=getValueOfIsRequired();
    }
    else
    {
        ret["is_required"]=Json::Value();
    }
    if(getIsForAll())
    {
        ret["is_for_all"]=getValueOfIsForAll();
    }
    else
    {
        ret["is_for_all"]=Json::Value();
    }
    if(getIsFilter())
    {
        ret["is_filter"]=getValueOfIsFilter();
    }
    else
    {
        ret["is_filter"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    if(getSearchable())
    {
        ret["searchable"]=getValueOfSearchable();
    }
    else
    {
        ret["searchable"]=Json::Value();
    }
    if(getEditable())
    {
        ret["editable"]=getValueOfEditable();
    }
    else
    {
        ret["editable"]=Json::Value();
    }
    if(getVisible())
    {
        ret["visible"]=getValueOfVisible();
    }
    else
    {
        ret["visible"]=Json::Value();
    }
    if(getMultiValue())
    {
        ret["multi_value"]=getValueOfMultiValue();
    }
    else
    {
        ret["multi_value"]=Json::Value();
    }
    if(getDefaultValue())
    {
        ret["default_value"]=getValueOfDefaultValue();
    }
    else
    {
        ret["default_value"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

bool CustomFields::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("field_format"))
    {
        if(!validJsonOfField(2, "field_format", pJson["field_format"], err, true))
            return false;
    }
    if(pJson.isMember("regexp"))
    {
        if(!validJsonOfField(3, "regexp", pJson["regexp"], err, true))
            return false;
    }
    if(pJson.isMember("min_length"))
    {
        if(!validJsonOfField(4, "min_length", pJson["min_length"], err, true))
            return false;
    }
    if(pJson.isMember("max_length"))
    {
        if(!validJsonOfField(5, "max_length", pJson["max_length"], err, true))
            return false;
    }
    if(pJson.isMember("is_required"))
    {
        if(!validJsonOfField(6, "is_required", pJson["is_required"], err, true))
            return false;
    }
    if(pJson.isMember("is_for_all"))
    {
        if(!validJsonOfField(7, "is_for_all", pJson["is_for_all"], err, true))
            return false;
    }
    if(pJson.isMember("is_filter"))
    {
        if(!validJsonOfField(8, "is_filter", pJson["is_filter"], err, true))
            return false;
    }
    if(pJson.isMember("position"))
    {
        if(!validJsonOfField(9, "position", pJson["position"], err, true))
            return false;
    }
    if(pJson.isMember("searchable"))
    {
        if(!validJsonOfField(10, "searchable", pJson["searchable"], err, true))
            return false;
    }
    if(pJson.isMember("editable"))
    {
        if(!validJsonOfField(11, "editable", pJson["editable"], err, true))
            return false;
    }
    if(pJson.isMember("visible"))
    {
        if(!validJsonOfField(12, "visible", pJson["visible"], err, true))
            return false;
    }
    if(pJson.isMember("multi_value"))
    {
        if(!validJsonOfField(13, "multi_value", pJson["multi_value"], err, true))
            return false;
    }
    if(pJson.isMember("default_value"))
    {
        if(!validJsonOfField(14, "default_value", pJson["default_value"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(15, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(16, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(17, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    return true;
}
bool CustomFields::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 18)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    return true;
}
bool CustomFields::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("field_format"))
    {
        if(!validJsonOfField(2, "field_format", pJson["field_format"], err, false))
            return false;
    }
    if(pJson.isMember("regexp"))
    {
        if(!validJsonOfField(3, "regexp", pJson["regexp"], err, false))
            return false;
    }
    if(pJson.isMember("min_length"))
    {
        if(!validJsonOfField(4, "min_length", pJson["min_length"], err, false))
            return false;
    }
    if(pJson.isMember("max_length"))
    {
        if(!validJsonOfField(5, "max_length", pJson["max_length"], err, false))
            return false;
    }
    if(pJson.isMember("is_required"))
    {
        if(!validJsonOfField(6, "is_required", pJson["is_required"], err, false))
            return false;
    }
    if(pJson.isMember("is_for_all"))
    {
        if(!validJsonOfField(7, "is_for_all", pJson["is_for_all"], err, false))
            return false;
    }
    if(pJson.isMember("is_filter"))
    {
        if(!validJsonOfField(8, "is_filter", pJson["is_filter"], err, false))
            return false;
    }
    if(pJson.isMember("position"))
    {
        if(!validJsonOfField(9, "position", pJson["position"], err, false))
            return false;
    }
    if(pJson.isMember("searchable"))
    {
        if(!validJsonOfField(10, "searchable", pJson["searchable"], err, false))
            return false;
    }
    if(pJson.isMember("editable"))
    {
        if(!validJsonOfField(11, "editable", pJson["editable"], err, false))
            return false;
    }
    if(pJson.isMember("visible"))
    {
        if(!validJsonOfField(12, "visible", pJson["visible"], err, false))
            return false;
    }
    if(pJson.isMember("multi_value"))
    {
        if(!validJsonOfField(13, "multi_value", pJson["multi_value"], err, false))
            return false;
    }
    if(pJson.isMember("default_value"))
    {
        if(!validJsonOfField(14, "default_value", pJson["default_value"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(15, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(16, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(17, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    return true;
}
bool CustomFields::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 18)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    return true;
}
bool CustomFields::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson, 
                                    std::string &err, 
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 30 )";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 30 )";
                return false;               
            }

            break;
        case 3:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 9:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 10:
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 11:
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 13:
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 14:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 15:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 255 )";
                return false;               
            }

            break;
        case 16:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 17:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
