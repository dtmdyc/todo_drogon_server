/**
 *
 *  AuthSources.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "AuthSources.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string AuthSources::Cols::_id = "id";
const std::string AuthSources::Cols::_type = "type";
const std::string AuthSources::Cols::_name = "name";
const std::string AuthSources::Cols::_host = "host";
const std::string AuthSources::Cols::_port = "port";
const std::string AuthSources::Cols::_account = "account";
const std::string AuthSources::Cols::_account_password = "account_password";
const std::string AuthSources::Cols::_base_dn = "base_dn";
const std::string AuthSources::Cols::_attr_login = "attr_login";
const std::string AuthSources::Cols::_attr_firstname = "attr_firstname";
const std::string AuthSources::Cols::_attr_lastname = "attr_lastname";
const std::string AuthSources::Cols::_attr_mail = "attr_mail";
const std::string AuthSources::Cols::_onthefly_register = "onthefly_register";
const std::string AuthSources::Cols::_attr_admin = "attr_admin";
const std::string AuthSources::Cols::_created_at = "created_at";
const std::string AuthSources::Cols::_updated_at = "updated_at";
const std::string AuthSources::Cols::_tls_mode = "tls_mode";
const std::string AuthSources::primaryKeyName = "id";
const bool AuthSources::hasPrimaryKey = true;
const std::string AuthSources::tableName = "auth_sources";

const std::vector<typename AuthSources::MetaData> AuthSources::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"type","std::string","character varying",30,0,0,1},
{"name","std::string","character varying",60,0,0,1},
{"host","std::string","character varying",60,0,0,0},
{"port","int32_t","integer",4,0,0,0},
{"account","std::string","character varying",0,0,0,0},
{"account_password","std::string","character varying",0,0,0,0},
{"base_dn","std::string","character varying",0,0,0,0},
{"attr_login","std::string","character varying",30,0,0,0},
{"attr_firstname","std::string","character varying",30,0,0,0},
{"attr_lastname","std::string","character varying",30,0,0,0},
{"attr_mail","std::string","character varying",30,0,0,0},
{"onthefly_register","bool","boolean",1,0,0,1},
{"attr_admin","std::string","character varying",0,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"tls_mode","int32_t","integer",4,0,0,1}
};
const std::string &AuthSources::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
AuthSources::AuthSources(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["host"].isNull())
        {
            _host=std::make_shared<std::string>(r["host"].as<std::string>());
        }
        if(!r["port"].isNull())
        {
            _port=std::make_shared<int32_t>(r["port"].as<int32_t>());
        }
        if(!r["account"].isNull())
        {
            _account=std::make_shared<std::string>(r["account"].as<std::string>());
        }
        if(!r["account_password"].isNull())
        {
            _accountPassword=std::make_shared<std::string>(r["account_password"].as<std::string>());
        }
        if(!r["base_dn"].isNull())
        {
            _baseDn=std::make_shared<std::string>(r["base_dn"].as<std::string>());
        }
        if(!r["attr_login"].isNull())
        {
            _attrLogin=std::make_shared<std::string>(r["attr_login"].as<std::string>());
        }
        if(!r["attr_firstname"].isNull())
        {
            _attrFirstname=std::make_shared<std::string>(r["attr_firstname"].as<std::string>());
        }
        if(!r["attr_lastname"].isNull())
        {
            _attrLastname=std::make_shared<std::string>(r["attr_lastname"].as<std::string>());
        }
        if(!r["attr_mail"].isNull())
        {
            _attrMail=std::make_shared<std::string>(r["attr_mail"].as<std::string>());
        }
        if(!r["onthefly_register"].isNull())
        {
            _ontheflyRegister=std::make_shared<bool>(r["onthefly_register"].as<bool>());
        }
        if(!r["attr_admin"].isNull())
        {
            _attrAdmin=std::make_shared<std::string>(r["attr_admin"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["tls_mode"].isNull())
        {
            _tlsMode=std::make_shared<int32_t>(r["tls_mode"].as<int32_t>());
        }
}
const int32_t &AuthSources::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AuthSources::getId() const noexcept
{
    return _id;
}
const typename AuthSources::PrimaryKeyType & AuthSources::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &AuthSources::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getType() const noexcept
{
    return _type;
}
void AuthSources::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[1] = true;
}
void AuthSources::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[1] = true;
}


const std::string &AuthSources::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getName() const noexcept
{
    return _name;
}
void AuthSources::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[2] = true;
}
void AuthSources::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[2] = true;
}


const std::string &AuthSources::getValueOfHost() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_host)
        return *_host;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getHost() const noexcept
{
    return _host;
}
void AuthSources::setHost(const std::string &pHost) noexcept
{
    _host = std::make_shared<std::string>(pHost);
    _dirtyFlag[3] = true;
}
void AuthSources::setHost(std::string &&pHost) noexcept
{
    _host = std::make_shared<std::string>(std::move(pHost));
    _dirtyFlag[3] = true;
}


const int32_t &AuthSources::getValueOfPort() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_port)
        return *_port;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AuthSources::getPort() const noexcept
{
    return _port;
}
void AuthSources::setPort(const int32_t &pPort) noexcept
{
    _port = std::make_shared<int32_t>(pPort);
    _dirtyFlag[4] = true;
}


const std::string &AuthSources::getValueOfAccount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_account)
        return *_account;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAccount() const noexcept
{
    return _account;
}
void AuthSources::setAccount(const std::string &pAccount) noexcept
{
    _account = std::make_shared<std::string>(pAccount);
    _dirtyFlag[5] = true;
}
void AuthSources::setAccount(std::string &&pAccount) noexcept
{
    _account = std::make_shared<std::string>(std::move(pAccount));
    _dirtyFlag[5] = true;
}


const std::string &AuthSources::getValueOfAccountPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_accountPassword)
        return *_accountPassword;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAccountPassword() const noexcept
{
    return _accountPassword;
}
void AuthSources::setAccountPassword(const std::string &pAccountPassword) noexcept
{
    _accountPassword = std::make_shared<std::string>(pAccountPassword);
    _dirtyFlag[6] = true;
}
void AuthSources::setAccountPassword(std::string &&pAccountPassword) noexcept
{
    _accountPassword = std::make_shared<std::string>(std::move(pAccountPassword));
    _dirtyFlag[6] = true;
}


const std::string &AuthSources::getValueOfBaseDn() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_baseDn)
        return *_baseDn;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getBaseDn() const noexcept
{
    return _baseDn;
}
void AuthSources::setBaseDn(const std::string &pBaseDn) noexcept
{
    _baseDn = std::make_shared<std::string>(pBaseDn);
    _dirtyFlag[7] = true;
}
void AuthSources::setBaseDn(std::string &&pBaseDn) noexcept
{
    _baseDn = std::make_shared<std::string>(std::move(pBaseDn));
    _dirtyFlag[7] = true;
}


const std::string &AuthSources::getValueOfAttrLogin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attrLogin)
        return *_attrLogin;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAttrLogin() const noexcept
{
    return _attrLogin;
}
void AuthSources::setAttrLogin(const std::string &pAttrLogin) noexcept
{
    _attrLogin = std::make_shared<std::string>(pAttrLogin);
    _dirtyFlag[8] = true;
}
void AuthSources::setAttrLogin(std::string &&pAttrLogin) noexcept
{
    _attrLogin = std::make_shared<std::string>(std::move(pAttrLogin));
    _dirtyFlag[8] = true;
}


const std::string &AuthSources::getValueOfAttrFirstname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attrFirstname)
        return *_attrFirstname;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAttrFirstname() const noexcept
{
    return _attrFirstname;
}
void AuthSources::setAttrFirstname(const std::string &pAttrFirstname) noexcept
{
    _attrFirstname = std::make_shared<std::string>(pAttrFirstname);
    _dirtyFlag[9] = true;
}
void AuthSources::setAttrFirstname(std::string &&pAttrFirstname) noexcept
{
    _attrFirstname = std::make_shared<std::string>(std::move(pAttrFirstname));
    _dirtyFlag[9] = true;
}


const std::string &AuthSources::getValueOfAttrLastname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attrLastname)
        return *_attrLastname;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAttrLastname() const noexcept
{
    return _attrLastname;
}
void AuthSources::setAttrLastname(const std::string &pAttrLastname) noexcept
{
    _attrLastname = std::make_shared<std::string>(pAttrLastname);
    _dirtyFlag[10] = true;
}
void AuthSources::setAttrLastname(std::string &&pAttrLastname) noexcept
{
    _attrLastname = std::make_shared<std::string>(std::move(pAttrLastname));
    _dirtyFlag[10] = true;
}


const std::string &AuthSources::getValueOfAttrMail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attrMail)
        return *_attrMail;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAttrMail() const noexcept
{
    return _attrMail;
}
void AuthSources::setAttrMail(const std::string &pAttrMail) noexcept
{
    _attrMail = std::make_shared<std::string>(pAttrMail);
    _dirtyFlag[11] = true;
}
void AuthSources::setAttrMail(std::string &&pAttrMail) noexcept
{
    _attrMail = std::make_shared<std::string>(std::move(pAttrMail));
    _dirtyFlag[11] = true;
}


const bool &AuthSources::getValueOfOntheflyRegister() const noexcept
{
    const static bool defaultValue = bool();
    if(_ontheflyRegister)
        return *_ontheflyRegister;
    return defaultValue;
}
const std::shared_ptr<bool> &AuthSources::getOntheflyRegister() const noexcept
{
    return _ontheflyRegister;
}
void AuthSources::setOntheflyRegister(const bool &pOntheflyRegister) noexcept
{
    _ontheflyRegister = std::make_shared<bool>(pOntheflyRegister);
    _dirtyFlag[12] = true;
}


const std::string &AuthSources::getValueOfAttrAdmin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attrAdmin)
        return *_attrAdmin;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAttrAdmin() const noexcept
{
    return _attrAdmin;
}
void AuthSources::setAttrAdmin(const std::string &pAttrAdmin) noexcept
{
    _attrAdmin = std::make_shared<std::string>(pAttrAdmin);
    _dirtyFlag[13] = true;
}
void AuthSources::setAttrAdmin(std::string &&pAttrAdmin) noexcept
{
    _attrAdmin = std::make_shared<std::string>(std::move(pAttrAdmin));
    _dirtyFlag[13] = true;
}


const ::trantor::Date &AuthSources::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &AuthSources::getCreatedAt() const noexcept
{
    return _createdAt;
}
void AuthSources::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[14] = true;
}


const ::trantor::Date &AuthSources::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &AuthSources::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void AuthSources::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[15] = true;
}


const int32_t &AuthSources::getValueOfTlsMode() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_tlsMode)
        return *_tlsMode;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AuthSources::getTlsMode() const noexcept
{
    return _tlsMode;
}
void AuthSources::setTlsMode(const int32_t &pTlsMode) noexcept
{
    _tlsMode = std::make_shared<int32_t>(pTlsMode);
    _dirtyFlag[16] = true;
}


void AuthSources::updateId(const uint64_t id)
{
}

const std::vector<std::string> &AuthSources::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "type",
        "name",
        "host",
        "port",
        "account",
        "account_password",
        "base_dn",
        "attr_login",
        "attr_firstname",
        "attr_lastname",
        "attr_mail",
        "onthefly_register",
        "attr_admin",
        "created_at",
        "updated_at",
        "tls_mode"
    };
    return _inCols;
}

void AuthSources::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getType())
    {
        binder << getValueOfType();
    }
    else
    {
        binder << nullptr;
    }
    if(getName())
    {
        binder << getValueOfName();
    }
    else
    {
        binder << nullptr;
    }
    if(getHost())
    {
        binder << getValueOfHost();
    }
    else
    {
        binder << nullptr;
    }
    if(getPort())
    {
        binder << getValueOfPort();
    }
    else
    {
        binder << nullptr;
    }
    if(getAccount())
    {
        binder << getValueOfAccount();
    }
    else
    {
        binder << nullptr;
    }
    if(getAccountPassword())
    {
        binder << getValueOfAccountPassword();
    }
    else
    {
        binder << nullptr;
    }
    if(getBaseDn())
    {
        binder << getValueOfBaseDn();
    }
    else
    {
        binder << nullptr;
    }
    if(getAttrLogin())
    {
        binder << getValueOfAttrLogin();
    }
    else
    {
        binder << nullptr;
    }
    if(getAttrFirstname())
    {
        binder << getValueOfAttrFirstname();
    }
    else
    {
        binder << nullptr;
    }
    if(getAttrLastname())
    {
        binder << getValueOfAttrLastname();
    }
    else
    {
        binder << nullptr;
    }
    if(getAttrMail())
    {
        binder << getValueOfAttrMail();
    }
    else
    {
        binder << nullptr;
    }
    if(getOntheflyRegister())
    {
        binder << getValueOfOntheflyRegister();
    }
    else
    {
        binder << nullptr;
    }
    if(getAttrAdmin())
    {
        binder << getValueOfAttrAdmin();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getTlsMode())
    {
        binder << getValueOfTlsMode();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> AuthSources::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void AuthSources::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getHost())
        {
            binder << getValueOfHost();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getPort())
        {
            binder << getValueOfPort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getAccount())
        {
            binder << getValueOfAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getAccountPassword())
        {
            binder << getValueOfAccountPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getBaseDn())
        {
            binder << getValueOfBaseDn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getAttrLogin())
        {
            binder << getValueOfAttrLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getAttrFirstname())
        {
            binder << getValueOfAttrFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getAttrLastname())
        {
            binder << getValueOfAttrLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getAttrMail())
        {
            binder << getValueOfAttrMail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getOntheflyRegister())
        {
            binder << getValueOfOntheflyRegister();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getAttrAdmin())
        {
            binder << getValueOfAttrAdmin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[16])
    {
        if(getTlsMode())
        {
            binder << getValueOfTlsMode();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value AuthSources::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getHost())
    {
        ret["host"]=getValueOfHost();
    }
    else
    {
        ret["host"]=Json::Value();
    }
    if(getPort())
    {
        ret["port"]=getValueOfPort();
    }
    else
    {
        ret["port"]=Json::Value();
    }
    if(getAccount())
    {
        ret["account"]=getValueOfAccount();
    }
    else
    {
        ret["account"]=Json::Value();
    }
    if(getAccountPassword())
    {
        ret["account_password"]=getValueOfAccountPassword();
    }
    else
    {
        ret["account_password"]=Json::Value();
    }
    if(getBaseDn())
    {
        ret["base_dn"]=getValueOfBaseDn();
    }
    else
    {
        ret["base_dn"]=Json::Value();
    }
    if(getAttrLogin())
    {
        ret["attr_login"]=getValueOfAttrLogin();
    }
    else
    {
        ret["attr_login"]=Json::Value();
    }
    if(getAttrFirstname())
    {
        ret["attr_firstname"]=getValueOfAttrFirstname();
    }
    else
    {
        ret["attr_firstname"]=Json::Value();
    }
    if(getAttrLastname())
    {
        ret["attr_lastname"]=getValueOfAttrLastname();
    }
    else
    {
        ret["attr_lastname"]=Json::Value();
    }
    if(getAttrMail())
    {
        ret["attr_mail"]=getValueOfAttrMail();
    }
    else
    {
        ret["attr_mail"]=Json::Value();
    }
    if(getOntheflyRegister())
    {
        ret["onthefly_register"]=getValueOfOntheflyRegister();
    }
    else
    {
        ret["onthefly_register"]=Json::Value();
    }
    if(getAttrAdmin())
    {
        ret["attr_admin"]=getValueOfAttrAdmin();
    }
    else
    {
        ret["attr_admin"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getTlsMode())
    {
        ret["tls_mode"]=getValueOfTlsMode();
    }
    else
    {
        ret["tls_mode"]=Json::Value();
    }
    return ret;
}
