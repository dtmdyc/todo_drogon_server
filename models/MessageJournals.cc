/**
 *
 *  MessageJournals.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MessageJournals.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject6;

const std::string MessageJournals::Cols::_id = "id";
const std::string MessageJournals::Cols::_journal_id = "journal_id";
const std::string MessageJournals::Cols::_forum_id = "forum_id";
const std::string MessageJournals::Cols::_parent_id = "parent_id";
const std::string MessageJournals::Cols::_subject = "subject";
const std::string MessageJournals::Cols::_content = "content";
const std::string MessageJournals::Cols::_author_id = "author_id";
const std::string MessageJournals::Cols::_replies_count = "replies_count";
const std::string MessageJournals::Cols::_last_reply_id = "last_reply_id";
const std::string MessageJournals::Cols::_locked = "locked";
const std::string MessageJournals::Cols::_sticky = "sticky";
const std::string MessageJournals::primaryKeyName = "id";
const bool MessageJournals::hasPrimaryKey = true;
const std::string MessageJournals::tableName = "message_journals";

const std::vector<typename MessageJournals::MetaData> MessageJournals::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"journal_id","int32_t","integer",4,0,0,1},
{"forum_id","int32_t","integer",4,0,0,1},
{"parent_id","int32_t","integer",4,0,0,0},
{"subject","std::string","character varying",0,0,0,1},
{"content","std::string","text",0,0,0,0},
{"author_id","int32_t","integer",4,0,0,0},
{"replies_count","int32_t","integer",4,0,0,1},
{"last_reply_id","int32_t","integer",4,0,0,0},
{"locked","bool","boolean",1,0,0,0},
{"sticky","int32_t","integer",4,0,0,0}
};
const std::string &MessageJournals::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
MessageJournals::MessageJournals(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>(r["journal_id"].as<int32_t>());
        }
        if(!r["forum_id"].isNull())
        {
            _forumId=std::make_shared<int32_t>(r["forum_id"].as<int32_t>());
        }
        if(!r["parent_id"].isNull())
        {
            _parentId=std::make_shared<int32_t>(r["parent_id"].as<int32_t>());
        }
        if(!r["subject"].isNull())
        {
            _subject=std::make_shared<std::string>(r["subject"].as<std::string>());
        }
        if(!r["content"].isNull())
        {
            _content=std::make_shared<std::string>(r["content"].as<std::string>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["replies_count"].isNull())
        {
            _repliesCount=std::make_shared<int32_t>(r["replies_count"].as<int32_t>());
        }
        if(!r["last_reply_id"].isNull())
        {
            _lastReplyId=std::make_shared<int32_t>(r["last_reply_id"].as<int32_t>());
        }
        if(!r["locked"].isNull())
        {
            _locked=std::make_shared<bool>(r["locked"].as<bool>());
        }
        if(!r["sticky"].isNull())
        {
            _sticky=std::make_shared<int32_t>(r["sticky"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 11 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _journalId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _forumId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _parentId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _subject=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _content=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            _authorId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            _repliesCount=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            _lastReplyId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            _locked=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            _sticky=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

MessageJournals::MessageJournals(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _dirtyFlag[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _forumId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _parentId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _subject=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _content=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _repliesCount=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            _lastReplyId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            _locked=std::make_shared<bool>(pJson[pMasqueradingVector[9]].asBool());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            _sticky=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
}

MessageJournals::MessageJournals(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _dirtyFlag[0]=true;
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("journal_id"))
    {
        _dirtyFlag[1]=true;
        if(!pJson["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson["journal_id"].asInt64());
        }
    }
    if(pJson.isMember("forum_id"))
    {
        _dirtyFlag[2]=true;
        if(!pJson["forum_id"].isNull())
        {
            _forumId=std::make_shared<int32_t>((int32_t)pJson["forum_id"].asInt64());
        }
    }
    if(pJson.isMember("parent_id"))
    {
        _dirtyFlag[3]=true;
        if(!pJson["parent_id"].isNull())
        {
            _parentId=std::make_shared<int32_t>((int32_t)pJson["parent_id"].asInt64());
        }
    }
    if(pJson.isMember("subject"))
    {
        _dirtyFlag[4]=true;
        if(!pJson["subject"].isNull())
        {
            _subject=std::make_shared<std::string>(pJson["subject"].asString());
        }
    }
    if(pJson.isMember("content"))
    {
        _dirtyFlag[5]=true;
        if(!pJson["content"].isNull())
        {
            _content=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[6]=true;
        if(!pJson["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
        }
    }
    if(pJson.isMember("replies_count"))
    {
        _dirtyFlag[7]=true;
        if(!pJson["replies_count"].isNull())
        {
            _repliesCount=std::make_shared<int32_t>((int32_t)pJson["replies_count"].asInt64());
        }
    }
    if(pJson.isMember("last_reply_id"))
    {
        _dirtyFlag[8]=true;
        if(!pJson["last_reply_id"].isNull())
        {
            _lastReplyId=std::make_shared<int32_t>((int32_t)pJson["last_reply_id"].asInt64());
        }
    }
    if(pJson.isMember("locked"))
    {
        _dirtyFlag[9]=true;
        if(!pJson["locked"].isNull())
        {
            _locked=std::make_shared<bool>(pJson["locked"].asBool());
        }
    }
    if(pJson.isMember("sticky"))
    {
        _dirtyFlag[10]=true;
        if(!pJson["sticky"].isNull())
        {
            _sticky=std::make_shared<int32_t>((int32_t)pJson["sticky"].asInt64());
        }
    }
}

void MessageJournals::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _forumId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _parentId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _subject=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _content=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _repliesCount=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            _lastReplyId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            _locked=std::make_shared<bool>(pJson[pMasqueradingVector[9]].asBool());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            _sticky=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
}
                                                                    
void MessageJournals::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("journal_id"))
    {
        _dirtyFlag[1] = true;
        if(!pJson["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson["journal_id"].asInt64());
        }
    }
    if(pJson.isMember("forum_id"))
    {
        _dirtyFlag[2] = true;
        if(!pJson["forum_id"].isNull())
        {
            _forumId=std::make_shared<int32_t>((int32_t)pJson["forum_id"].asInt64());
        }
    }
    if(pJson.isMember("parent_id"))
    {
        _dirtyFlag[3] = true;
        if(!pJson["parent_id"].isNull())
        {
            _parentId=std::make_shared<int32_t>((int32_t)pJson["parent_id"].asInt64());
        }
    }
    if(pJson.isMember("subject"))
    {
        _dirtyFlag[4] = true;
        if(!pJson["subject"].isNull())
        {
            _subject=std::make_shared<std::string>(pJson["subject"].asString());
        }
    }
    if(pJson.isMember("content"))
    {
        _dirtyFlag[5] = true;
        if(!pJson["content"].isNull())
        {
            _content=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[6] = true;
        if(!pJson["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
        }
    }
    if(pJson.isMember("replies_count"))
    {
        _dirtyFlag[7] = true;
        if(!pJson["replies_count"].isNull())
        {
            _repliesCount=std::make_shared<int32_t>((int32_t)pJson["replies_count"].asInt64());
        }
    }
    if(pJson.isMember("last_reply_id"))
    {
        _dirtyFlag[8] = true;
        if(!pJson["last_reply_id"].isNull())
        {
            _lastReplyId=std::make_shared<int32_t>((int32_t)pJson["last_reply_id"].asInt64());
        }
    }
    if(pJson.isMember("locked"))
    {
        _dirtyFlag[9] = true;
        if(!pJson["locked"].isNull())
        {
            _locked=std::make_shared<bool>(pJson["locked"].asBool());
        }
    }
    if(pJson.isMember("sticky"))
    {
        _dirtyFlag[10] = true;
        if(!pJson["sticky"].isNull())
        {
            _sticky=std::make_shared<int32_t>((int32_t)pJson["sticky"].asInt64());
        }
    }
}

const int32_t &MessageJournals::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getId() const noexcept
{
    return _id;
}
const typename MessageJournals::PrimaryKeyType & MessageJournals::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &MessageJournals::getValueOfJournalId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journalId)
        return *_journalId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getJournalId() const noexcept
{
    return _journalId;
}
void MessageJournals::setJournalId(const int32_t &pJournalId) noexcept
{
    _journalId = std::make_shared<int32_t>(pJournalId);
    _dirtyFlag[1] = true;
}


const int32_t &MessageJournals::getValueOfForumId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_forumId)
        return *_forumId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getForumId() const noexcept
{
    return _forumId;
}
void MessageJournals::setForumId(const int32_t &pForumId) noexcept
{
    _forumId = std::make_shared<int32_t>(pForumId);
    _dirtyFlag[2] = true;
}


const int32_t &MessageJournals::getValueOfParentId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_parentId)
        return *_parentId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getParentId() const noexcept
{
    return _parentId;
}
void MessageJournals::setParentId(const int32_t &pParentId) noexcept
{
    _parentId = std::make_shared<int32_t>(pParentId);
    _dirtyFlag[3] = true;
}


const std::string &MessageJournals::getValueOfSubject() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_subject)
        return *_subject;
    return defaultValue;
}
const std::shared_ptr<std::string> &MessageJournals::getSubject() const noexcept
{
    return _subject;
}
void MessageJournals::setSubject(const std::string &pSubject) noexcept
{
    _subject = std::make_shared<std::string>(pSubject);
    _dirtyFlag[4] = true;
}
void MessageJournals::setSubject(std::string &&pSubject) noexcept
{
    _subject = std::make_shared<std::string>(std::move(pSubject));
    _dirtyFlag[4] = true;
}


const std::string &MessageJournals::getValueOfContent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_content)
        return *_content;
    return defaultValue;
}
const std::shared_ptr<std::string> &MessageJournals::getContent() const noexcept
{
    return _content;
}
void MessageJournals::setContent(const std::string &pContent) noexcept
{
    _content = std::make_shared<std::string>(pContent);
    _dirtyFlag[5] = true;
}
void MessageJournals::setContent(std::string &&pContent) noexcept
{
    _content = std::make_shared<std::string>(std::move(pContent));
    _dirtyFlag[5] = true;
}


const int32_t &MessageJournals::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getAuthorId() const noexcept
{
    return _authorId;
}
void MessageJournals::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[6] = true;
}


const int32_t &MessageJournals::getValueOfRepliesCount() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_repliesCount)
        return *_repliesCount;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getRepliesCount() const noexcept
{
    return _repliesCount;
}
void MessageJournals::setRepliesCount(const int32_t &pRepliesCount) noexcept
{
    _repliesCount = std::make_shared<int32_t>(pRepliesCount);
    _dirtyFlag[7] = true;
}


const int32_t &MessageJournals::getValueOfLastReplyId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_lastReplyId)
        return *_lastReplyId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getLastReplyId() const noexcept
{
    return _lastReplyId;
}
void MessageJournals::setLastReplyId(const int32_t &pLastReplyId) noexcept
{
    _lastReplyId = std::make_shared<int32_t>(pLastReplyId);
    _dirtyFlag[8] = true;
}


const bool &MessageJournals::getValueOfLocked() const noexcept
{
    const static bool defaultValue = bool();
    if(_locked)
        return *_locked;
    return defaultValue;
}
const std::shared_ptr<bool> &MessageJournals::getLocked() const noexcept
{
    return _locked;
}
void MessageJournals::setLocked(const bool &pLocked) noexcept
{
    _locked = std::make_shared<bool>(pLocked);
    _dirtyFlag[9] = true;
}


const int32_t &MessageJournals::getValueOfSticky() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_sticky)
        return *_sticky;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getSticky() const noexcept
{
    return _sticky;
}
void MessageJournals::setSticky(const int32_t &pSticky) noexcept
{
    _sticky = std::make_shared<int32_t>(pSticky);
    _dirtyFlag[10] = true;
}


void MessageJournals::updateId(const uint64_t id)
{
}

const std::vector<std::string> &MessageJournals::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journal_id",
        "forum_id",
        "parent_id",
        "subject",
        "content",
        "author_id",
        "replies_count",
        "last_reply_id",
        "locked",
        "sticky"
    };
    return _inCols;
}

void MessageJournals::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getForumId())
        {
            binder << getValueOfForumId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getSubject())
        {
            binder << getValueOfSubject();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getRepliesCount())
        {
            binder << getValueOfRepliesCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getLastReplyId())
        {
            binder << getValueOfLastReplyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getLocked())
        {
            binder << getValueOfLocked();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getSticky())
        {
            binder << getValueOfSticky();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> MessageJournals::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void MessageJournals::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getForumId())
        {
            binder << getValueOfForumId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getSubject())
        {
            binder << getValueOfSubject();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getRepliesCount())
        {
            binder << getValueOfRepliesCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getLastReplyId())
        {
            binder << getValueOfLastReplyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getLocked())
        {
            binder << getValueOfLocked();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getSticky())
        {
            binder << getValueOfSticky();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MessageJournals::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getForumId())
    {
        ret["forum_id"]=getValueOfForumId();
    }
    else
    {
        ret["forum_id"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getRepliesCount())
    {
        ret["replies_count"]=getValueOfRepliesCount();
    }
    else
    {
        ret["replies_count"]=Json::Value();
    }
    if(getLastReplyId())
    {
        ret["last_reply_id"]=getValueOfLastReplyId();
    }
    else
    {
        ret["last_reply_id"]=Json::Value();
    }
    if(getLocked())
    {
        ret["locked"]=getValueOfLocked();
    }
    else
    {
        ret["locked"]=Json::Value();
    }
    if(getSticky())
    {
        ret["sticky"]=getValueOfSticky();
    }
    else
    {
        ret["sticky"]=Json::Value();
    }
    return ret;
}

Json::Value MessageJournals::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 11)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getJournalId())
            {
                ret[pMasqueradingVector[1]]=getValueOfJournalId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getForumId())
            {
                ret[pMasqueradingVector[2]]=getValueOfForumId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getParentId())
            {
                ret[pMasqueradingVector[3]]=getValueOfParentId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getSubject())
            {
                ret[pMasqueradingVector[4]]=getValueOfSubject();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[5]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAuthorId())
            {
                ret[pMasqueradingVector[6]]=getValueOfAuthorId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getRepliesCount())
            {
                ret[pMasqueradingVector[7]]=getValueOfRepliesCount();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getLastReplyId())
            {
                ret[pMasqueradingVector[8]]=getValueOfLastReplyId();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getLocked())
            {
                ret[pMasqueradingVector[9]]=getValueOfLocked();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getSticky())
            {
                ret[pMasqueradingVector[10]]=getValueOfSticky();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getForumId())
    {
        ret["forum_id"]=getValueOfForumId();
    }
    else
    {
        ret["forum_id"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getRepliesCount())
    {
        ret["replies_count"]=getValueOfRepliesCount();
    }
    else
    {
        ret["replies_count"]=Json::Value();
    }
    if(getLastReplyId())
    {
        ret["last_reply_id"]=getValueOfLastReplyId();
    }
    else
    {
        ret["last_reply_id"]=Json::Value();
    }
    if(getLocked())
    {
        ret["locked"]=getValueOfLocked();
    }
    else
    {
        ret["locked"]=Json::Value();
    }
    if(getSticky())
    {
        ret["sticky"]=getValueOfSticky();
    }
    else
    {
        ret["sticky"]=Json::Value();
    }
    return ret;
}

bool MessageJournals::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("journal_id"))
    {
        if(!validJsonOfField(1, "journal_id", pJson["journal_id"], err, true))
            return false;
    }
    else
    {
        err="The journal_id column cannot be null";
        return false;
    }
    if(pJson.isMember("forum_id"))
    {
        if(!validJsonOfField(2, "forum_id", pJson["forum_id"], err, true))
            return false;
    }
    else
    {
        err="The forum_id column cannot be null";
        return false;
    }
    if(pJson.isMember("parent_id"))
    {
        if(!validJsonOfField(3, "parent_id", pJson["parent_id"], err, true))
            return false;
    }
    if(pJson.isMember("subject"))
    {
        if(!validJsonOfField(4, "subject", pJson["subject"], err, true))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(5, "content", pJson["content"], err, true))
            return false;
    }
    if(pJson.isMember("author_id"))
    {
        if(!validJsonOfField(6, "author_id", pJson["author_id"], err, true))
            return false;
    }
    if(pJson.isMember("replies_count"))
    {
        if(!validJsonOfField(7, "replies_count", pJson["replies_count"], err, true))
            return false;
    }
    if(pJson.isMember("last_reply_id"))
    {
        if(!validJsonOfField(8, "last_reply_id", pJson["last_reply_id"], err, true))
            return false;
    }
    if(pJson.isMember("locked"))
    {
        if(!validJsonOfField(9, "locked", pJson["locked"], err, true))
            return false;
    }
    if(pJson.isMember("sticky"))
    {
        if(!validJsonOfField(10, "sticky", pJson["sticky"], err, true))
            return false;
    }
    return true;
}
bool MessageJournals::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    return true;
}
bool MessageJournals::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("journal_id"))
    {
        if(!validJsonOfField(1, "journal_id", pJson["journal_id"], err, false))
            return false;
    }
    if(pJson.isMember("forum_id"))
    {
        if(!validJsonOfField(2, "forum_id", pJson["forum_id"], err, false))
            return false;
    }
    if(pJson.isMember("parent_id"))
    {
        if(!validJsonOfField(3, "parent_id", pJson["parent_id"], err, false))
            return false;
    }
    if(pJson.isMember("subject"))
    {
        if(!validJsonOfField(4, "subject", pJson["subject"], err, false))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(5, "content", pJson["content"], err, false))
            return false;
    }
    if(pJson.isMember("author_id"))
    {
        if(!validJsonOfField(6, "author_id", pJson["author_id"], err, false))
            return false;
    }
    if(pJson.isMember("replies_count"))
    {
        if(!validJsonOfField(7, "replies_count", pJson["replies_count"], err, false))
            return false;
    }
    if(pJson.isMember("last_reply_id"))
    {
        if(!validJsonOfField(8, "last_reply_id", pJson["last_reply_id"], err, false))
            return false;
    }
    if(pJson.isMember("locked"))
    {
        if(!validJsonOfField(9, "locked", pJson["locked"], err, false))
            return false;
    }
    if(pJson.isMember("sticky"))
    {
        if(!validJsonOfField(10, "sticky", pJson["sticky"], err, false))
            return false;
    }
    return true;
}
bool MessageJournals::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    return true;
}
bool MessageJournals::validJsonOfField(size_t index,
                                       const std::string &fieldName,
                                       const Json::Value &pJson, 
                                       std::string &err, 
                                       bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 3:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 5:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 6:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 8:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 9:
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 10:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
