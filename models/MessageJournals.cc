/**
 *
 *  MessageJournals.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MessageJournals.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string MessageJournals::Cols::_id = "id";
const std::string MessageJournals::Cols::_journal_id = "journal_id";
const std::string MessageJournals::Cols::_forum_id = "forum_id";
const std::string MessageJournals::Cols::_parent_id = "parent_id";
const std::string MessageJournals::Cols::_subject = "subject";
const std::string MessageJournals::Cols::_content = "content";
const std::string MessageJournals::Cols::_author_id = "author_id";
const std::string MessageJournals::Cols::_replies_count = "replies_count";
const std::string MessageJournals::Cols::_last_reply_id = "last_reply_id";
const std::string MessageJournals::Cols::_locked = "locked";
const std::string MessageJournals::Cols::_sticky = "sticky";
const std::string MessageJournals::primaryKeyName = "id";
const bool MessageJournals::hasPrimaryKey = true;
const std::string MessageJournals::tableName = "message_journals";

const std::vector<typename MessageJournals::MetaData> MessageJournals::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"journal_id","int32_t","integer",4,0,0,1},
{"forum_id","int32_t","integer",4,0,0,1},
{"parent_id","int32_t","integer",4,0,0,0},
{"subject","std::string","character varying",0,0,0,1},
{"content","std::string","text",0,0,0,0},
{"author_id","int32_t","integer",4,0,0,0},
{"replies_count","int32_t","integer",4,0,0,1},
{"last_reply_id","int32_t","integer",4,0,0,0},
{"locked","bool","boolean",1,0,0,0},
{"sticky","int32_t","integer",4,0,0,0}
};
const std::string &MessageJournals::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
MessageJournals::MessageJournals(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>(r["journal_id"].as<int32_t>());
        }
        if(!r["forum_id"].isNull())
        {
            _forumId=std::make_shared<int32_t>(r["forum_id"].as<int32_t>());
        }
        if(!r["parent_id"].isNull())
        {
            _parentId=std::make_shared<int32_t>(r["parent_id"].as<int32_t>());
        }
        if(!r["subject"].isNull())
        {
            _subject=std::make_shared<std::string>(r["subject"].as<std::string>());
        }
        if(!r["content"].isNull())
        {
            _content=std::make_shared<std::string>(r["content"].as<std::string>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["replies_count"].isNull())
        {
            _repliesCount=std::make_shared<int32_t>(r["replies_count"].as<int32_t>());
        }
        if(!r["last_reply_id"].isNull())
        {
            _lastReplyId=std::make_shared<int32_t>(r["last_reply_id"].as<int32_t>());
        }
        if(!r["locked"].isNull())
        {
            _locked=std::make_shared<bool>(r["locked"].as<bool>());
        }
        if(!r["sticky"].isNull())
        {
            _sticky=std::make_shared<int32_t>(r["sticky"].as<int32_t>());
        }
}
const int32_t &MessageJournals::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getId() const noexcept
{
    return _id;
}
const typename MessageJournals::PrimaryKeyType & MessageJournals::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &MessageJournals::getValueOfJournalId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journalId)
        return *_journalId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getJournalId() const noexcept
{
    return _journalId;
}
void MessageJournals::setJournalId(const int32_t &pJournalId) noexcept
{
    _journalId = std::make_shared<int32_t>(pJournalId);
    _dirtyFlag[1] = true;
}


const int32_t &MessageJournals::getValueOfForumId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_forumId)
        return *_forumId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getForumId() const noexcept
{
    return _forumId;
}
void MessageJournals::setForumId(const int32_t &pForumId) noexcept
{
    _forumId = std::make_shared<int32_t>(pForumId);
    _dirtyFlag[2] = true;
}


const int32_t &MessageJournals::getValueOfParentId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_parentId)
        return *_parentId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getParentId() const noexcept
{
    return _parentId;
}
void MessageJournals::setParentId(const int32_t &pParentId) noexcept
{
    _parentId = std::make_shared<int32_t>(pParentId);
    _dirtyFlag[3] = true;
}


const std::string &MessageJournals::getValueOfSubject() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_subject)
        return *_subject;
    return defaultValue;
}
const std::shared_ptr<std::string> &MessageJournals::getSubject() const noexcept
{
    return _subject;
}
void MessageJournals::setSubject(const std::string &pSubject) noexcept
{
    _subject = std::make_shared<std::string>(pSubject);
    _dirtyFlag[4] = true;
}
void MessageJournals::setSubject(std::string &&pSubject) noexcept
{
    _subject = std::make_shared<std::string>(std::move(pSubject));
    _dirtyFlag[4] = true;
}


const std::string &MessageJournals::getValueOfContent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_content)
        return *_content;
    return defaultValue;
}
const std::shared_ptr<std::string> &MessageJournals::getContent() const noexcept
{
    return _content;
}
void MessageJournals::setContent(const std::string &pContent) noexcept
{
    _content = std::make_shared<std::string>(pContent);
    _dirtyFlag[5] = true;
}
void MessageJournals::setContent(std::string &&pContent) noexcept
{
    _content = std::make_shared<std::string>(std::move(pContent));
    _dirtyFlag[5] = true;
}


const int32_t &MessageJournals::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getAuthorId() const noexcept
{
    return _authorId;
}
void MessageJournals::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[6] = true;
}


const int32_t &MessageJournals::getValueOfRepliesCount() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_repliesCount)
        return *_repliesCount;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getRepliesCount() const noexcept
{
    return _repliesCount;
}
void MessageJournals::setRepliesCount(const int32_t &pRepliesCount) noexcept
{
    _repliesCount = std::make_shared<int32_t>(pRepliesCount);
    _dirtyFlag[7] = true;
}


const int32_t &MessageJournals::getValueOfLastReplyId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_lastReplyId)
        return *_lastReplyId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getLastReplyId() const noexcept
{
    return _lastReplyId;
}
void MessageJournals::setLastReplyId(const int32_t &pLastReplyId) noexcept
{
    _lastReplyId = std::make_shared<int32_t>(pLastReplyId);
    _dirtyFlag[8] = true;
}


const bool &MessageJournals::getValueOfLocked() const noexcept
{
    const static bool defaultValue = bool();
    if(_locked)
        return *_locked;
    return defaultValue;
}
const std::shared_ptr<bool> &MessageJournals::getLocked() const noexcept
{
    return _locked;
}
void MessageJournals::setLocked(const bool &pLocked) noexcept
{
    _locked = std::make_shared<bool>(pLocked);
    _dirtyFlag[9] = true;
}


const int32_t &MessageJournals::getValueOfSticky() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_sticky)
        return *_sticky;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MessageJournals::getSticky() const noexcept
{
    return _sticky;
}
void MessageJournals::setSticky(const int32_t &pSticky) noexcept
{
    _sticky = std::make_shared<int32_t>(pSticky);
    _dirtyFlag[10] = true;
}


void MessageJournals::updateId(const uint64_t id)
{
}

const std::vector<std::string> &MessageJournals::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journal_id",
        "forum_id",
        "parent_id",
        "subject",
        "content",
        "author_id",
        "replies_count",
        "last_reply_id",
        "locked",
        "sticky"
    };
    return _inCols;
}

void MessageJournals::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getJournalId())
    {
        binder << getValueOfJournalId();
    }
    else
    {
        binder << nullptr;
    }
    if(getForumId())
    {
        binder << getValueOfForumId();
    }
    else
    {
        binder << nullptr;
    }
    if(getParentId())
    {
        binder << getValueOfParentId();
    }
    else
    {
        binder << nullptr;
    }
    if(getSubject())
    {
        binder << getValueOfSubject();
    }
    else
    {
        binder << nullptr;
    }
    if(getContent())
    {
        binder << getValueOfContent();
    }
    else
    {
        binder << nullptr;
    }
    if(getAuthorId())
    {
        binder << getValueOfAuthorId();
    }
    else
    {
        binder << nullptr;
    }
    if(getRepliesCount())
    {
        binder << getValueOfRepliesCount();
    }
    else
    {
        binder << nullptr;
    }
    if(getLastReplyId())
    {
        binder << getValueOfLastReplyId();
    }
    else
    {
        binder << nullptr;
    }
    if(getLocked())
    {
        binder << getValueOfLocked();
    }
    else
    {
        binder << nullptr;
    }
    if(getSticky())
    {
        binder << getValueOfSticky();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> MessageJournals::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void MessageJournals::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getForumId())
        {
            binder << getValueOfForumId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getSubject())
        {
            binder << getValueOfSubject();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getRepliesCount())
        {
            binder << getValueOfRepliesCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getLastReplyId())
        {
            binder << getValueOfLastReplyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getLocked())
        {
            binder << getValueOfLocked();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getSticky())
        {
            binder << getValueOfSticky();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MessageJournals::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getForumId())
    {
        ret["forum_id"]=getValueOfForumId();
    }
    else
    {
        ret["forum_id"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getRepliesCount())
    {
        ret["replies_count"]=getValueOfRepliesCount();
    }
    else
    {
        ret["replies_count"]=Json::Value();
    }
    if(getLastReplyId())
    {
        ret["last_reply_id"]=getValueOfLastReplyId();
    }
    else
    {
        ret["last_reply_id"]=Json::Value();
    }
    if(getLocked())
    {
        ret["locked"]=getValueOfLocked();
    }
    else
    {
        ret["locked"]=Json::Value();
    }
    if(getSticky())
    {
        ret["sticky"]=getValueOfSticky();
    }
    else
    {
        ret["sticky"]=Json::Value();
    }
    return ret;
}
