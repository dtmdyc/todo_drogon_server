/**
 *
 *  Forums.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Forums.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Forums::Cols::_id = "id";
const std::string Forums::Cols::_project_id = "project_id";
const std::string Forums::Cols::_name = "name";
const std::string Forums::Cols::_description = "description";
const std::string Forums::Cols::_position = "position";
const std::string Forums::Cols::_topics_count = "topics_count";
const std::string Forums::Cols::_messages_count = "messages_count";
const std::string Forums::Cols::_last_message_id = "last_message_id";
const std::string Forums::primaryKeyName = "id";
const bool Forums::hasPrimaryKey = true;
const std::string Forums::tableName = "forums";

const std::vector<typename Forums::MetaData> Forums::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"project_id","int32_t","integer",4,0,0,1},
{"name","std::string","character varying",0,0,0,1},
{"description","std::string","character varying",0,0,0,0},
{"position","int32_t","integer",4,0,0,0},
{"topics_count","int32_t","integer",4,0,0,1},
{"messages_count","int32_t","integer",4,0,0,1},
{"last_message_id","int32_t","integer",4,0,0,0}
};
const std::string &Forums::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Forums::Forums(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            _description=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["position"].isNull())
        {
            _position=std::make_shared<int32_t>(r["position"].as<int32_t>());
        }
        if(!r["topics_count"].isNull())
        {
            _topicsCount=std::make_shared<int32_t>(r["topics_count"].as<int32_t>());
        }
        if(!r["messages_count"].isNull())
        {
            _messagesCount=std::make_shared<int32_t>(r["messages_count"].as<int32_t>());
        }
        if(!r["last_message_id"].isNull())
        {
            _lastMessageId=std::make_shared<int32_t>(r["last_message_id"].as<int32_t>());
        }
}
const int32_t &Forums::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Forums::getId() const noexcept
{
    return _id;
}
const typename Forums::PrimaryKeyType & Forums::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &Forums::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Forums::getProjectId() const noexcept
{
    return _projectId;
}
void Forums::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[1] = true;
}


const std::string &Forums::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &Forums::getName() const noexcept
{
    return _name;
}
void Forums::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[2] = true;
}
void Forums::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[2] = true;
}


const std::string &Forums::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_description)
        return *_description;
    return defaultValue;
}
const std::shared_ptr<std::string> &Forums::getDescription() const noexcept
{
    return _description;
}
void Forums::setDescription(const std::string &pDescription) noexcept
{
    _description = std::make_shared<std::string>(pDescription);
    _dirtyFlag[3] = true;
}
void Forums::setDescription(std::string &&pDescription) noexcept
{
    _description = std::make_shared<std::string>(std::move(pDescription));
    _dirtyFlag[3] = true;
}


const int32_t &Forums::getValueOfPosition() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_position)
        return *_position;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Forums::getPosition() const noexcept
{
    return _position;
}
void Forums::setPosition(const int32_t &pPosition) noexcept
{
    _position = std::make_shared<int32_t>(pPosition);
    _dirtyFlag[4] = true;
}


const int32_t &Forums::getValueOfTopicsCount() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_topicsCount)
        return *_topicsCount;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Forums::getTopicsCount() const noexcept
{
    return _topicsCount;
}
void Forums::setTopicsCount(const int32_t &pTopicsCount) noexcept
{
    _topicsCount = std::make_shared<int32_t>(pTopicsCount);
    _dirtyFlag[5] = true;
}


const int32_t &Forums::getValueOfMessagesCount() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_messagesCount)
        return *_messagesCount;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Forums::getMessagesCount() const noexcept
{
    return _messagesCount;
}
void Forums::setMessagesCount(const int32_t &pMessagesCount) noexcept
{
    _messagesCount = std::make_shared<int32_t>(pMessagesCount);
    _dirtyFlag[6] = true;
}


const int32_t &Forums::getValueOfLastMessageId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_lastMessageId)
        return *_lastMessageId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Forums::getLastMessageId() const noexcept
{
    return _lastMessageId;
}
void Forums::setLastMessageId(const int32_t &pLastMessageId) noexcept
{
    _lastMessageId = std::make_shared<int32_t>(pLastMessageId);
    _dirtyFlag[7] = true;
}


void Forums::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Forums::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "project_id",
        "name",
        "description",
        "position",
        "topics_count",
        "messages_count",
        "last_message_id"
    };
    return _inCols;
}

void Forums::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getName())
    {
        binder << getValueOfName();
    }
    else
    {
        binder << nullptr;
    }
    if(getDescription())
    {
        binder << getValueOfDescription();
    }
    else
    {
        binder << nullptr;
    }
    if(getPosition())
    {
        binder << getValueOfPosition();
    }
    else
    {
        binder << nullptr;
    }
    if(getTopicsCount())
    {
        binder << getValueOfTopicsCount();
    }
    else
    {
        binder << nullptr;
    }
    if(getMessagesCount())
    {
        binder << getValueOfMessagesCount();
    }
    else
    {
        binder << nullptr;
    }
    if(getLastMessageId())
    {
        binder << getValueOfLastMessageId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Forums::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Forums::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getPosition())
        {
            binder << getValueOfPosition();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getTopicsCount())
        {
            binder << getValueOfTopicsCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getMessagesCount())
        {
            binder << getValueOfMessagesCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getLastMessageId())
        {
            binder << getValueOfLastMessageId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Forums::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    if(getTopicsCount())
    {
        ret["topics_count"]=getValueOfTopicsCount();
    }
    else
    {
        ret["topics_count"]=Json::Value();
    }
    if(getMessagesCount())
    {
        ret["messages_count"]=getValueOfMessagesCount();
    }
    else
    {
        ret["messages_count"]=Json::Value();
    }
    if(getLastMessageId())
    {
        ret["last_message_id"]=getValueOfLastMessageId();
    }
    else
    {
        ret["last_message_id"]=Json::Value();
    }
    return ret;
}
