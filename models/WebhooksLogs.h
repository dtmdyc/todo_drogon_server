/**
 *
 *  WebhooksLogs.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject6 
{
class WebhooksLogs
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _webhooks_webhook_id;
        static const std::string _event_name;
        static const std::string _url;
        static const std::string _request_headers;
        static const std::string _request_body;
        static const std::string _response_code;
        static const std::string _response_headers;
        static const std::string _response_body;
        static const std::string _created_at;
        static const std::string _updated_at;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int32_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit WebhooksLogs(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit WebhooksLogs(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    WebhooksLogs(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    WebhooksLogs() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    bool validateMasqueradedJsonForCreation(const Json::Value &,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err);
    bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;

    /**  For column webhooks_webhook_id  */
    ///Get the value of the column webhooks_webhook_id, returns the default value if the column is null
    const int32_t &getValueOfWebhooksWebhookId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getWebhooksWebhookId() const noexcept;
    ///Set the value of the column webhooks_webhook_id
    void setWebhooksWebhookId(const int32_t &pWebhooksWebhookId) noexcept;

    /**  For column event_name  */
    ///Get the value of the column event_name, returns the default value if the column is null
    const std::string &getValueOfEventName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEventName() const noexcept;
    ///Set the value of the column event_name
    void setEventName(const std::string &pEventName) noexcept;
    void setEventName(std::string &&pEventName) noexcept;

    /**  For column url  */
    ///Get the value of the column url, returns the default value if the column is null
    const std::string &getValueOfUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUrl() const noexcept;
    ///Set the value of the column url
    void setUrl(const std::string &pUrl) noexcept;
    void setUrl(std::string &&pUrl) noexcept;

    /**  For column request_headers  */
    ///Get the value of the column request_headers, returns the default value if the column is null
    const std::string &getValueOfRequestHeaders() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRequestHeaders() const noexcept;
    ///Set the value of the column request_headers
    void setRequestHeaders(const std::string &pRequestHeaders) noexcept;
    void setRequestHeaders(std::string &&pRequestHeaders) noexcept;

    /**  For column request_body  */
    ///Get the value of the column request_body, returns the default value if the column is null
    const std::string &getValueOfRequestBody() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRequestBody() const noexcept;
    ///Set the value of the column request_body
    void setRequestBody(const std::string &pRequestBody) noexcept;
    void setRequestBody(std::string &&pRequestBody) noexcept;

    /**  For column response_code  */
    ///Get the value of the column response_code, returns the default value if the column is null
    const int32_t &getValueOfResponseCode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getResponseCode() const noexcept;
    ///Set the value of the column response_code
    void setResponseCode(const int32_t &pResponseCode) noexcept;

    /**  For column response_headers  */
    ///Get the value of the column response_headers, returns the default value if the column is null
    const std::string &getValueOfResponseHeaders() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getResponseHeaders() const noexcept;
    ///Set the value of the column response_headers
    void setResponseHeaders(const std::string &pResponseHeaders) noexcept;
    void setResponseHeaders(std::string &&pResponseHeaders) noexcept;

    /**  For column response_body  */
    ///Get the value of the column response_body, returns the default value if the column is null
    const std::string &getValueOfResponseBody() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getResponseBody() const noexcept;
    ///Set the value of the column response_body
    void setResponseBody(const std::string &pResponseBody) noexcept;
    void setResponseBody(std::string &&pResponseBody) noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;


    static size_t getColumnNumber() noexcept {  return 11;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;

  private:
    friend Mapper<WebhooksLogs>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> _id;
    std::shared_ptr<int32_t> _webhooksWebhookId;
    std::shared_ptr<std::string> _eventName;
    std::shared_ptr<std::string> _url;
    std::shared_ptr<std::string> _requestHeaders;
    std::shared_ptr<std::string> _requestBody;
    std::shared_ptr<int32_t> _responseCode;
    std::shared_ptr<std::string> _responseHeaders;
    std::shared_ptr<std::string> _responseBody;
    std::shared_ptr<::trantor::Date> _createdAt;
    std::shared_ptr<::trantor::Date> _updatedAt;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[11]={ false };

  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = $1";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = $1";
        return sql;                   
    }

    static const std::string &sqlForInserting()
    {
        static const std::string sql="insert into " + tableName + " (webhooks_webhook_id,event_name,url,request_headers,request_body,response_code,response_headers,response_body,created_at,updated_at) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) returning *";
        return sql;   
    }
};
} // namespace openproject6
} // namespace drogon_model
