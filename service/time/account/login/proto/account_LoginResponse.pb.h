// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time/account/login/proto/account_LoginResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_time_2faccount_2flogin_2fproto_2faccount_5fLoginResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_time_2faccount_2flogin_2fproto_2faccount_5fLoginResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_time_2faccount_2flogin_2fproto_2faccount_5fLoginResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_time_2faccount_2flogin_2fproto_2faccount_5fLoginResponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_time_2faccount_2flogin_2fproto_2faccount_5fLoginResponse_2eproto;
namespace timeservice {
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
}  // namespace timeservice
PROTOBUF_NAMESPACE_OPEN
template<> ::timeservice::LoginResponse* Arena::CreateMaybeMessage<::timeservice::LoginResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace timeservice {

enum LoginResponse_ErrorStatus : int {
  LoginResponse_ErrorStatus_OK = 0,
  LoginResponse_ErrorStatus_TEMP_LOCKED = 1,
  LoginResponse_ErrorStatus_DISABLED = 2,
  LoginResponse_ErrorStatus_EXPIRED = 3,
  LoginResponse_ErrorStatus_LoginResponse_ErrorStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginResponse_ErrorStatus_LoginResponse_ErrorStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginResponse_ErrorStatus_IsValid(int value);
constexpr LoginResponse_ErrorStatus LoginResponse_ErrorStatus_ErrorStatus_MIN = LoginResponse_ErrorStatus_OK;
constexpr LoginResponse_ErrorStatus LoginResponse_ErrorStatus_ErrorStatus_MAX = LoginResponse_ErrorStatus_EXPIRED;
constexpr int LoginResponse_ErrorStatus_ErrorStatus_ARRAYSIZE = LoginResponse_ErrorStatus_ErrorStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginResponse_ErrorStatus_descriptor();
template<typename T>
inline const std::string& LoginResponse_ErrorStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginResponse_ErrorStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginResponse_ErrorStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginResponse_ErrorStatus_descriptor(), enum_t_value);
}
inline bool LoginResponse_ErrorStatus_Parse(
    const std::string& name, LoginResponse_ErrorStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginResponse_ErrorStatus>(
    LoginResponse_ErrorStatus_descriptor(), name, value);
}
// ===================================================================

class LoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeservice.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeservice.LoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_time_2faccount_2flogin_2fproto_2faccount_5fLoginResponse_2eproto);
    return ::descriptor_table_time_2faccount_2flogin_2fproto_2faccount_5fLoginResponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginResponse_ErrorStatus ErrorStatus;
  static constexpr ErrorStatus OK =
    LoginResponse_ErrorStatus_OK;
  static constexpr ErrorStatus TEMP_LOCKED =
    LoginResponse_ErrorStatus_TEMP_LOCKED;
  static constexpr ErrorStatus DISABLED =
    LoginResponse_ErrorStatus_DISABLED;
  static constexpr ErrorStatus EXPIRED =
    LoginResponse_ErrorStatus_EXPIRED;
  static inline bool ErrorStatus_IsValid(int value) {
    return LoginResponse_ErrorStatus_IsValid(value);
  }
  static constexpr ErrorStatus ErrorStatus_MIN =
    LoginResponse_ErrorStatus_ErrorStatus_MIN;
  static constexpr ErrorStatus ErrorStatus_MAX =
    LoginResponse_ErrorStatus_ErrorStatus_MAX;
  static constexpr int ErrorStatus_ARRAYSIZE =
    LoginResponse_ErrorStatus_ErrorStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorStatus_descriptor() {
    return LoginResponse_ErrorStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorStatus_Name.");
    return LoginResponse_ErrorStatus_Name(enum_t_value);
  }
  static inline bool ErrorStatus_Parse(const std::string& name,
      ErrorStatus* value) {
    return LoginResponse_ErrorStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .timeservice.LoginResponse.ErrorStatus status = 1;
  void clear_status();
  ::timeservice::LoginResponse_ErrorStatus status() const;
  void set_status(::timeservice::LoginResponse_ErrorStatus value);
  private:
  ::timeservice::LoginResponse_ErrorStatus _internal_status() const;
  void _internal_set_status(::timeservice::LoginResponse_ErrorStatus value);
  public:

  // @@protoc_insertion_point(class_scope:timeservice.LoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_time_2faccount_2flogin_2fproto_2faccount_5fLoginResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginResponse

// .timeservice.LoginResponse.ErrorStatus status = 1;
inline void LoginResponse::clear_status() {
  status_ = 0;
}
inline ::timeservice::LoginResponse_ErrorStatus LoginResponse::_internal_status() const {
  return static_cast< ::timeservice::LoginResponse_ErrorStatus >(status_);
}
inline ::timeservice::LoginResponse_ErrorStatus LoginResponse::status() const {
  // @@protoc_insertion_point(field_get:timeservice.LoginResponse.status)
  return _internal_status();
}
inline void LoginResponse::_internal_set_status(::timeservice::LoginResponse_ErrorStatus value) {
  
  status_ = value;
}
inline void LoginResponse::set_status(::timeservice::LoginResponse_ErrorStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:timeservice.LoginResponse.status)
}

// string token = 2;
inline void LoginResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginResponse::token() const {
  // @@protoc_insertion_point(field_get:timeservice.LoginResponse.token)
  return _internal_token();
}
inline void LoginResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:timeservice.LoginResponse.token)
}
inline std::string* LoginResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:timeservice.LoginResponse.token)
  return _internal_mutable_token();
}
inline const std::string& LoginResponse::_internal_token() const {
  return token_.GetNoArena();
}
inline void LoginResponse::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginResponse::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeservice.LoginResponse.token)
}
inline void LoginResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeservice.LoginResponse.token)
}
inline void LoginResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeservice.LoginResponse.token)
}
inline std::string* LoginResponse::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginResponse::release_token() {
  // @@protoc_insertion_point(field_release:timeservice.LoginResponse.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:timeservice.LoginResponse.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace timeservice

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::timeservice::LoginResponse_ErrorStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::timeservice::LoginResponse_ErrorStatus>() {
  return ::timeservice::LoginResponse_ErrorStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_time_2faccount_2flogin_2fproto_2faccount_5fLoginResponse_2eproto
