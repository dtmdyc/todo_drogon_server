/**
 *
 *  MaterialBudgetItems.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MaterialBudgetItems.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string MaterialBudgetItems::Cols::_id = "id";
const std::string MaterialBudgetItems::Cols::_cost_object_id = "cost_object_id";
const std::string MaterialBudgetItems::Cols::_units = "units";
const std::string MaterialBudgetItems::Cols::_cost_type_id = "cost_type_id";
const std::string MaterialBudgetItems::Cols::_comments = "comments";
const std::string MaterialBudgetItems::Cols::_budget = "budget";
const std::string MaterialBudgetItems::primaryKeyName = "id";
const bool MaterialBudgetItems::hasPrimaryKey = true;
const std::string MaterialBudgetItems::tableName = "material_budget_items";

const std::vector<typename MaterialBudgetItems::MetaData> MaterialBudgetItems::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"cost_object_id","int32_t","integer",4,0,0,1},
{"units","double","double precision",8,0,0,1},
{"cost_type_id","int32_t","integer",4,0,0,0},
{"comments","std::string","character varying",0,0,0,1},
{"budget","int64_t","numeric",8,0,0,0}
};
const std::string &MaterialBudgetItems::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
MaterialBudgetItems::MaterialBudgetItems(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["cost_object_id"].isNull())
        {
            _costObjectId=std::make_shared<int32_t>(r["cost_object_id"].as<int32_t>());
        }
        if(!r["units"].isNull())
        {
            _units=std::make_shared<double>(r["units"].as<double>());
        }
        if(!r["cost_type_id"].isNull())
        {
            _costTypeId=std::make_shared<int32_t>(r["cost_type_id"].as<int32_t>());
        }
        if(!r["comments"].isNull())
        {
            _comments=std::make_shared<std::string>(r["comments"].as<std::string>());
        }
        if(!r["budget"].isNull())
        {
            _budget=std::make_shared<int64_t>(r["budget"].as<int64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _costObjectId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _units=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _costTypeId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _comments=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _budget=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }

}

MaterialBudgetItems::MaterialBudgetItems(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _costObjectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _units=std::make_shared<double>(pJson[pMasqueradingVector[2]].asDouble());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _costTypeId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _comments=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _budget=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
    }
}

MaterialBudgetItems::MaterialBudgetItems(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("cost_object_id"))
    {
        _costObjectId=std::make_shared<int32_t>((int32_t)pJson["cost_object_id"].asInt64());
    }
    if(pJson.isMember("units"))
    {
        _units=std::make_shared<double>(pJson["units"].asDouble());
    }
    if(pJson.isMember("cost_type_id"))
    {
        _costTypeId=std::make_shared<int32_t>((int32_t)pJson["cost_type_id"].asInt64());
    }
    if(pJson.isMember("comments"))
    {
        _comments=std::make_shared<std::string>(pJson["comments"].asString());
    }
    if(pJson.isMember("budget"))
    {
        _budget=std::make_shared<int64_t>((int64_t)pJson["budget"].asInt64());
    }
}

void MaterialBudgetItems::updateByMasqueradedJson(const Json::Value &pJson, 
                                                                                                     const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        _costObjectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        _units=std::make_shared<double>(pJson[pMasqueradingVector[2]].asDouble());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        _costTypeId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        _comments=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        _budget=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
    }
}
                                                                    
void MaterialBudgetItems::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("cost_object_id"))
    {
        _dirtyFlag[1] = true;
        _costObjectId=std::make_shared<int32_t>((int32_t)pJson["cost_object_id"].asInt64());
    }
    if(pJson.isMember("units"))
    {
        _dirtyFlag[2] = true;
        _units=std::make_shared<double>(pJson["units"].asDouble());
    }
    if(pJson.isMember("cost_type_id"))
    {
        _dirtyFlag[3] = true;
        _costTypeId=std::make_shared<int32_t>((int32_t)pJson["cost_type_id"].asInt64());
    }
    if(pJson.isMember("comments"))
    {
        _dirtyFlag[4] = true;
        _comments=std::make_shared<std::string>(pJson["comments"].asString());
    }
    if(pJson.isMember("budget"))
    {
        _dirtyFlag[5] = true;
        _budget=std::make_shared<int64_t>((int64_t)pJson["budget"].asInt64());
    }
}

const int32_t &MaterialBudgetItems::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MaterialBudgetItems::getId() const noexcept
{
    return _id;
}
const typename MaterialBudgetItems::PrimaryKeyType & MaterialBudgetItems::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &MaterialBudgetItems::getValueOfCostObjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_costObjectId)
        return *_costObjectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MaterialBudgetItems::getCostObjectId() const noexcept
{
    return _costObjectId;
}
void MaterialBudgetItems::setCostObjectId(const int32_t &pCostObjectId) noexcept
{
    _costObjectId = std::make_shared<int32_t>(pCostObjectId);
    _dirtyFlag[1] = true;
}


const double &MaterialBudgetItems::getValueOfUnits() const noexcept
{
    const static double defaultValue = double();
    if(_units)
        return *_units;
    return defaultValue;
}
const std::shared_ptr<double> &MaterialBudgetItems::getUnits() const noexcept
{
    return _units;
}
void MaterialBudgetItems::setUnits(const double &pUnits) noexcept
{
    _units = std::make_shared<double>(pUnits);
    _dirtyFlag[2] = true;
}


const int32_t &MaterialBudgetItems::getValueOfCostTypeId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_costTypeId)
        return *_costTypeId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MaterialBudgetItems::getCostTypeId() const noexcept
{
    return _costTypeId;
}
void MaterialBudgetItems::setCostTypeId(const int32_t &pCostTypeId) noexcept
{
    _costTypeId = std::make_shared<int32_t>(pCostTypeId);
    _dirtyFlag[3] = true;
}


const std::string &MaterialBudgetItems::getValueOfComments() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_comments)
        return *_comments;
    return defaultValue;
}
const std::shared_ptr<std::string> &MaterialBudgetItems::getComments() const noexcept
{
    return _comments;
}
void MaterialBudgetItems::setComments(const std::string &pComments) noexcept
{
    _comments = std::make_shared<std::string>(pComments);
    _dirtyFlag[4] = true;
}
void MaterialBudgetItems::setComments(std::string &&pComments) noexcept
{
    _comments = std::make_shared<std::string>(std::move(pComments));
    _dirtyFlag[4] = true;
}


const int64_t &MaterialBudgetItems::getValueOfBudget() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_budget)
        return *_budget;
    return defaultValue;
}
const std::shared_ptr<int64_t> &MaterialBudgetItems::getBudget() const noexcept
{
    return _budget;
}
void MaterialBudgetItems::setBudget(const int64_t &pBudget) noexcept
{
    _budget = std::make_shared<int64_t>(pBudget);
    _dirtyFlag[5] = true;
}


void MaterialBudgetItems::updateId(const uint64_t id)
{
}

const std::vector<std::string> &MaterialBudgetItems::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "cost_object_id",
        "units",
        "cost_type_id",
        "comments",
        "budget"
    };
    return _inCols;
}

void MaterialBudgetItems::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getCostObjectId())
    {
        binder << getValueOfCostObjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getUnits())
    {
        binder << getValueOfUnits();
    }
    else
    {
        binder << nullptr;
    }
    if(getCostTypeId())
    {
        binder << getValueOfCostTypeId();
    }
    else
    {
        binder << nullptr;
    }
    if(getComments())
    {
        binder << getValueOfComments();
    }
    else
    {
        binder << nullptr;
    }
    if(getBudget())
    {
        binder << getValueOfBudget();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> MaterialBudgetItems::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void MaterialBudgetItems::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getCostObjectId())
        {
            binder << getValueOfCostObjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getUnits())
        {
            binder << getValueOfUnits();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getCostTypeId())
        {
            binder << getValueOfCostTypeId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getComments())
        {
            binder << getValueOfComments();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getBudget())
        {
            binder << getValueOfBudget();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MaterialBudgetItems::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCostObjectId())
    {
        ret["cost_object_id"]=getValueOfCostObjectId();
    }
    else
    {
        ret["cost_object_id"]=Json::Value();
    }
    if(getUnits())
    {
        ret["units"]=getValueOfUnits();
    }
    else
    {
        ret["units"]=Json::Value();
    }
    if(getCostTypeId())
    {
        ret["cost_type_id"]=getValueOfCostTypeId();
    }
    else
    {
        ret["cost_type_id"]=Json::Value();
    }
    if(getComments())
    {
        ret["comments"]=getValueOfComments();
    }
    else
    {
        ret["comments"]=Json::Value();
    }
    if(getBudget())
    {
        ret["budget"]=(Json::Int64)getValueOfBudget();
    }
    else
    {
        ret["budget"]=Json::Value();
    }
    return ret;
}

Json::Value MaterialBudgetItems::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCostObjectId())
            {
                ret[pMasqueradingVector[1]]=getValueOfCostObjectId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUnits())
            {
                ret[pMasqueradingVector[2]]=getValueOfUnits();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCostTypeId())
            {
                ret[pMasqueradingVector[3]]=getValueOfCostTypeId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getComments())
            {
                ret[pMasqueradingVector[4]]=getValueOfComments();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getBudget())
            {
                ret[pMasqueradingVector[5]]=(Json::Int64)getValueOfBudget();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCostObjectId())
    {
        ret["cost_object_id"]=getValueOfCostObjectId();
    }
    else
    {
        ret["cost_object_id"]=Json::Value();
    }
    if(getUnits())
    {
        ret["units"]=getValueOfUnits();
    }
    else
    {
        ret["units"]=Json::Value();
    }
    if(getCostTypeId())
    {
        ret["cost_type_id"]=getValueOfCostTypeId();
    }
    else
    {
        ret["cost_type_id"]=Json::Value();
    }
    if(getComments())
    {
        ret["comments"]=getValueOfComments();
    }
    else
    {
        ret["comments"]=Json::Value();
    }
    if(getBudget())
    {
        ret["budget"]=(Json::Int64)getValueOfBudget();
    }
    else
    {
        ret["budget"]=Json::Value();
    }
    return ret;
}
