/**
 *
 *  JournalVersions.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "JournalVersions.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string JournalVersions::Cols::_id = "id";
const std::string JournalVersions::Cols::_journable_type = "journable_type";
const std::string JournalVersions::Cols::_journable_id = "journable_id";
const std::string JournalVersions::Cols::_version = "version";
const std::string JournalVersions::primaryKeyName = "id";
const bool JournalVersions::hasPrimaryKey = true;
const std::string JournalVersions::tableName = "journal_versions";

const std::vector<typename JournalVersions::MetaData> JournalVersions::_metaData={
{"id","int64_t","bigint",8,1,1,1},
{"journable_type","std::string","character varying",0,0,0,0},
{"journable_id","int32_t","integer",4,0,0,0},
{"version","int32_t","integer",4,0,0,0}
};
const std::string &JournalVersions::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
JournalVersions::JournalVersions(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["journable_type"].isNull())
        {
            _journableType=std::make_shared<std::string>(r["journable_type"].as<std::string>());
        }
        if(!r["journable_id"].isNull())
        {
            _journableId=std::make_shared<int32_t>(r["journable_id"].as<int32_t>());
        }
        if(!r["version"].isNull())
        {
            _version=std::make_shared<int32_t>(r["version"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _journableType=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _journableId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _version=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

JournalVersions::JournalVersions(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _journableType=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _journableId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _version=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
    }
}

JournalVersions::JournalVersions(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("journable_type"))
    {
        _journableType=std::make_shared<std::string>(pJson["journable_type"].asString());
    }
    if(pJson.isMember("journable_id"))
    {
        _journableId=std::make_shared<int32_t>((int32_t)pJson["journable_id"].asInt64());
    }
    if(pJson.isMember("version"))
    {
        _version=std::make_shared<int32_t>((int32_t)pJson["version"].asInt64());
    }
}

void JournalVersions::updateByMasqueradedJson(const Json::Value &pJson, 
                                                                                                     const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        _journableType=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        _journableId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        _version=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
    }
}
                                                                    
void JournalVersions::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("journable_type"))
    {
        _dirtyFlag[1] = true;
        _journableType=std::make_shared<std::string>(pJson["journable_type"].asString());
    }
    if(pJson.isMember("journable_id"))
    {
        _dirtyFlag[2] = true;
        _journableId=std::make_shared<int32_t>((int32_t)pJson["journable_id"].asInt64());
    }
    if(pJson.isMember("version"))
    {
        _dirtyFlag[3] = true;
        _version=std::make_shared<int32_t>((int32_t)pJson["version"].asInt64());
    }
}

const int64_t &JournalVersions::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int64_t> &JournalVersions::getId() const noexcept
{
    return _id;
}
const typename JournalVersions::PrimaryKeyType & JournalVersions::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &JournalVersions::getValueOfJournableType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_journableType)
        return *_journableType;
    return defaultValue;
}
const std::shared_ptr<std::string> &JournalVersions::getJournableType() const noexcept
{
    return _journableType;
}
void JournalVersions::setJournableType(const std::string &pJournableType) noexcept
{
    _journableType = std::make_shared<std::string>(pJournableType);
    _dirtyFlag[1] = true;
}
void JournalVersions::setJournableType(std::string &&pJournableType) noexcept
{
    _journableType = std::make_shared<std::string>(std::move(pJournableType));
    _dirtyFlag[1] = true;
}


const int32_t &JournalVersions::getValueOfJournableId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journableId)
        return *_journableId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &JournalVersions::getJournableId() const noexcept
{
    return _journableId;
}
void JournalVersions::setJournableId(const int32_t &pJournableId) noexcept
{
    _journableId = std::make_shared<int32_t>(pJournableId);
    _dirtyFlag[2] = true;
}


const int32_t &JournalVersions::getValueOfVersion() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_version)
        return *_version;
    return defaultValue;
}
const std::shared_ptr<int32_t> &JournalVersions::getVersion() const noexcept
{
    return _version;
}
void JournalVersions::setVersion(const int32_t &pVersion) noexcept
{
    _version = std::make_shared<int32_t>(pVersion);
    _dirtyFlag[3] = true;
}


void JournalVersions::updateId(const uint64_t id)
{
}

const std::vector<std::string> &JournalVersions::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journable_type",
        "journable_id",
        "version"
    };
    return _inCols;
}

void JournalVersions::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getJournableType())
    {
        binder << getValueOfJournableType();
    }
    else
    {
        binder << nullptr;
    }
    if(getJournableId())
    {
        binder << getValueOfJournableId();
    }
    else
    {
        binder << nullptr;
    }
    if(getVersion())
    {
        binder << getValueOfVersion();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> JournalVersions::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void JournalVersions::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournableType())
        {
            binder << getValueOfJournableType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getJournableId())
        {
            binder << getValueOfJournableId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value JournalVersions::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournableType())
    {
        ret["journable_type"]=getValueOfJournableType();
    }
    else
    {
        ret["journable_type"]=Json::Value();
    }
    if(getJournableId())
    {
        ret["journable_id"]=getValueOfJournableId();
    }
    else
    {
        ret["journable_id"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    return ret;
}

Json::Value JournalVersions::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getJournableType())
            {
                ret[pMasqueradingVector[1]]=getValueOfJournableType();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getJournableId())
            {
                ret[pMasqueradingVector[2]]=getValueOfJournableId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getVersion())
            {
                ret[pMasqueradingVector[3]]=getValueOfVersion();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournableType())
    {
        ret["journable_type"]=getValueOfJournableType();
    }
    else
    {
        ret["journable_type"]=Json::Value();
    }
    if(getJournableId())
    {
        ret["journable_id"]=getValueOfJournableId();
    }
    else
    {
        ret["journable_id"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    return ret;
}
