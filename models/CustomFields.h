/**
 *
 *  CustomFields.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject4 
{
class CustomFields
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _type;
        static const std::string _field_format;
        static const std::string _regexp;
        static const std::string _min_length;
        static const std::string _max_length;
        static const std::string _is_required;
        static const std::string _is_for_all;
        static const std::string _is_filter;
        static const std::string _position;
        static const std::string _searchable;
        static const std::string _editable;
        static const std::string _visible;
        static const std::string _multi_value;
        static const std::string _default_value;
        static const std::string _name;
        static const std::string _created_at;
        static const std::string _updated_at;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int32_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit CustomFields(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit CustomFields(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
     CustomFields(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    CustomFields() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson, 
                                                                          const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;

    /**  For column type  */
    ///Get the value of the column type, returns the default value if the column is null
    const std::string &getValueOfType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getType() const noexcept;
    ///Set the value of the column type
    void setType(const std::string &pType) noexcept;
    void setType(std::string &&pType) noexcept;

    /**  For column field_format  */
    ///Get the value of the column field_format, returns the default value if the column is null
    const std::string &getValueOfFieldFormat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFieldFormat() const noexcept;
    ///Set the value of the column field_format
    void setFieldFormat(const std::string &pFieldFormat) noexcept;
    void setFieldFormat(std::string &&pFieldFormat) noexcept;

    /**  For column regexp  */
    ///Get the value of the column regexp, returns the default value if the column is null
    const std::string &getValueOfRegexp() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRegexp() const noexcept;
    ///Set the value of the column regexp
    void setRegexp(const std::string &pRegexp) noexcept;
    void setRegexp(std::string &&pRegexp) noexcept;

    /**  For column min_length  */
    ///Get the value of the column min_length, returns the default value if the column is null
    const int32_t &getValueOfMinLength() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getMinLength() const noexcept;
    ///Set the value of the column min_length
    void setMinLength(const int32_t &pMinLength) noexcept;

    /**  For column max_length  */
    ///Get the value of the column max_length, returns the default value if the column is null
    const int32_t &getValueOfMaxLength() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getMaxLength() const noexcept;
    ///Set the value of the column max_length
    void setMaxLength(const int32_t &pMaxLength) noexcept;

    /**  For column is_required  */
    ///Get the value of the column is_required, returns the default value if the column is null
    const bool &getValueOfIsRequired() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getIsRequired() const noexcept;
    ///Set the value of the column is_required
    void setIsRequired(const bool &pIsRequired) noexcept;

    /**  For column is_for_all  */
    ///Get the value of the column is_for_all, returns the default value if the column is null
    const bool &getValueOfIsForAll() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getIsForAll() const noexcept;
    ///Set the value of the column is_for_all
    void setIsForAll(const bool &pIsForAll) noexcept;

    /**  For column is_filter  */
    ///Get the value of the column is_filter, returns the default value if the column is null
    const bool &getValueOfIsFilter() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getIsFilter() const noexcept;
    ///Set the value of the column is_filter
    void setIsFilter(const bool &pIsFilter) noexcept;

    /**  For column position  */
    ///Get the value of the column position, returns the default value if the column is null
    const int32_t &getValueOfPosition() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getPosition() const noexcept;
    ///Set the value of the column position
    void setPosition(const int32_t &pPosition) noexcept;

    /**  For column searchable  */
    ///Get the value of the column searchable, returns the default value if the column is null
    const bool &getValueOfSearchable() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getSearchable() const noexcept;
    ///Set the value of the column searchable
    void setSearchable(const bool &pSearchable) noexcept;

    /**  For column editable  */
    ///Get the value of the column editable, returns the default value if the column is null
    const bool &getValueOfEditable() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getEditable() const noexcept;
    ///Set the value of the column editable
    void setEditable(const bool &pEditable) noexcept;

    /**  For column visible  */
    ///Get the value of the column visible, returns the default value if the column is null
    const bool &getValueOfVisible() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getVisible() const noexcept;
    ///Set the value of the column visible
    void setVisible(const bool &pVisible) noexcept;

    /**  For column multi_value  */
    ///Get the value of the column multi_value, returns the default value if the column is null
    const bool &getValueOfMultiValue() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getMultiValue() const noexcept;
    ///Set the value of the column multi_value
    void setMultiValue(const bool &pMultiValue) noexcept;

    /**  For column default_value  */
    ///Get the value of the column default_value, returns the default value if the column is null
    const std::string &getValueOfDefaultValue() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDefaultValue() const noexcept;
    ///Set the value of the column default_value
    void setDefaultValue(const std::string &pDefaultValue) noexcept;
    void setDefaultValue(std::string &&pDefaultValue) noexcept;

    /**  For column name  */
    ///Get the value of the column name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;
    ///Set the value of the column name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;


    static size_t getColumnNumber() noexcept {  return 18;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;

  private:
    friend Mapper<CustomFields>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> _id;
    std::shared_ptr<std::string> _type;
    std::shared_ptr<std::string> _fieldFormat;
    std::shared_ptr<std::string> _regexp;
    std::shared_ptr<int32_t> _minLength;
    std::shared_ptr<int32_t> _maxLength;
    std::shared_ptr<bool> _isRequired;
    std::shared_ptr<bool> _isForAll;
    std::shared_ptr<bool> _isFilter;
    std::shared_ptr<int32_t> _position;
    std::shared_ptr<bool> _searchable;
    std::shared_ptr<bool> _editable;
    std::shared_ptr<bool> _visible;
    std::shared_ptr<bool> _multiValue;
    std::shared_ptr<std::string> _defaultValue;
    std::shared_ptr<std::string> _name;
    std::shared_ptr<::trantor::Date> _createdAt;
    std::shared_ptr<::trantor::Date> _updatedAt;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[18]={ false };
};
} // namespace openproject4
} // namespace drogon_model
