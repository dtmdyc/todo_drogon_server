/**
 *
 *  Repositories.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Repositories.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject6;

const std::string Repositories::Cols::_id = "id";
const std::string Repositories::Cols::_project_id = "project_id";
const std::string Repositories::Cols::_url = "url";
const std::string Repositories::Cols::_login = "login";
const std::string Repositories::Cols::_password = "password";
const std::string Repositories::Cols::_root_url = "root_url";
const std::string Repositories::Cols::_type = "type";
const std::string Repositories::Cols::_path_encoding = "path_encoding";
const std::string Repositories::Cols::_log_encoding = "log_encoding";
const std::string Repositories::Cols::_scm_type = "scm_type";
const std::string Repositories::Cols::_required_storage_bytes = "required_storage_bytes";
const std::string Repositories::Cols::_storage_updated_at = "storage_updated_at";
const std::string Repositories::primaryKeyName = "id";
const bool Repositories::hasPrimaryKey = true;
const std::string Repositories::tableName = "repositories";

const std::vector<typename Repositories::MetaData> Repositories::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"project_id","int32_t","integer",4,0,0,1},
{"url","std::string","character varying",0,0,0,1},
{"login","std::string","character varying",60,0,0,0},
{"password","std::string","character varying",0,0,0,0},
{"root_url","std::string","character varying",0,0,0,0},
{"type","std::string","character varying",0,0,0,0},
{"path_encoding","std::string","character varying",64,0,0,0},
{"log_encoding","std::string","character varying",64,0,0,0},
{"scm_type","std::string","character varying",0,0,0,1},
{"required_storage_bytes","int64_t","bigint",8,0,0,1},
{"storage_updated_at","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &Repositories::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Repositories::Repositories(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["url"].isNull())
        {
            _url=std::make_shared<std::string>(r["url"].as<std::string>());
        }
        if(!r["login"].isNull())
        {
            _login=std::make_shared<std::string>(r["login"].as<std::string>());
        }
        if(!r["password"].isNull())
        {
            _password=std::make_shared<std::string>(r["password"].as<std::string>());
        }
        if(!r["root_url"].isNull())
        {
            _rootUrl=std::make_shared<std::string>(r["root_url"].as<std::string>());
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["path_encoding"].isNull())
        {
            _pathEncoding=std::make_shared<std::string>(r["path_encoding"].as<std::string>());
        }
        if(!r["log_encoding"].isNull())
        {
            _logEncoding=std::make_shared<std::string>(r["log_encoding"].as<std::string>());
        }
        if(!r["scm_type"].isNull())
        {
            _scmType=std::make_shared<std::string>(r["scm_type"].as<std::string>());
        }
        if(!r["required_storage_bytes"].isNull())
        {
            _requiredStorageBytes=std::make_shared<int64_t>(r["required_storage_bytes"].as<int64_t>());
        }
        if(!r["storage_updated_at"].isNull())
        {
            auto timeStr = r["storage_updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _storageUpdatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _projectId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _url=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _login=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _password=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _rootUrl=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            _type=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            _pathEncoding=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            _logEncoding=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            _scmType=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            _requiredStorageBytes=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _storageUpdatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }

}

Repositories::Repositories(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _dirtyFlag[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _url=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _login=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _password=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _rootUrl=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            _type=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _pathEncoding=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            _logEncoding=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            _scmType=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            _requiredStorageBytes=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        _dirtyFlag[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _storageUpdatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

Repositories::Repositories(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _dirtyFlag[0]=true;
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("project_id"))
    {
        _dirtyFlag[1]=true;
        if(!pJson["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson["project_id"].asInt64());
        }
    }
    if(pJson.isMember("url"))
    {
        _dirtyFlag[2]=true;
        if(!pJson["url"].isNull())
        {
            _url=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if(pJson.isMember("login"))
    {
        _dirtyFlag[3]=true;
        if(!pJson["login"].isNull())
        {
            _login=std::make_shared<std::string>(pJson["login"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        _dirtyFlag[4]=true;
        if(!pJson["password"].isNull())
        {
            _password=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("root_url"))
    {
        _dirtyFlag[5]=true;
        if(!pJson["root_url"].isNull())
        {
            _rootUrl=std::make_shared<std::string>(pJson["root_url"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        _dirtyFlag[6]=true;
        if(!pJson["type"].isNull())
        {
            _type=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("path_encoding"))
    {
        _dirtyFlag[7]=true;
        if(!pJson["path_encoding"].isNull())
        {
            _pathEncoding=std::make_shared<std::string>(pJson["path_encoding"].asString());
        }
    }
    if(pJson.isMember("log_encoding"))
    {
        _dirtyFlag[8]=true;
        if(!pJson["log_encoding"].isNull())
        {
            _logEncoding=std::make_shared<std::string>(pJson["log_encoding"].asString());
        }
    }
    if(pJson.isMember("scm_type"))
    {
        _dirtyFlag[9]=true;
        if(!pJson["scm_type"].isNull())
        {
            _scmType=std::make_shared<std::string>(pJson["scm_type"].asString());
        }
    }
    if(pJson.isMember("required_storage_bytes"))
    {
        _dirtyFlag[10]=true;
        if(!pJson["required_storage_bytes"].isNull())
        {
            _requiredStorageBytes=std::make_shared<int64_t>((int64_t)pJson["required_storage_bytes"].asInt64());
        }
    }
    if(pJson.isMember("storage_updated_at"))
    {
        _dirtyFlag[11]=true;
        if(!pJson["storage_updated_at"].isNull())
        {
            auto timeStr = pJson["storage_updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _storageUpdatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

void Repositories::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _url=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _login=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _password=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _rootUrl=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            _type=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _pathEncoding=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            _logEncoding=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            _scmType=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            _requiredStorageBytes=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        _dirtyFlag[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _storageUpdatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}
                                                                    
void Repositories::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("project_id"))
    {
        _dirtyFlag[1] = true;
        if(!pJson["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson["project_id"].asInt64());
        }
    }
    if(pJson.isMember("url"))
    {
        _dirtyFlag[2] = true;
        if(!pJson["url"].isNull())
        {
            _url=std::make_shared<std::string>(pJson["url"].asString());
        }
    }
    if(pJson.isMember("login"))
    {
        _dirtyFlag[3] = true;
        if(!pJson["login"].isNull())
        {
            _login=std::make_shared<std::string>(pJson["login"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        _dirtyFlag[4] = true;
        if(!pJson["password"].isNull())
        {
            _password=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("root_url"))
    {
        _dirtyFlag[5] = true;
        if(!pJson["root_url"].isNull())
        {
            _rootUrl=std::make_shared<std::string>(pJson["root_url"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        _dirtyFlag[6] = true;
        if(!pJson["type"].isNull())
        {
            _type=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("path_encoding"))
    {
        _dirtyFlag[7] = true;
        if(!pJson["path_encoding"].isNull())
        {
            _pathEncoding=std::make_shared<std::string>(pJson["path_encoding"].asString());
        }
    }
    if(pJson.isMember("log_encoding"))
    {
        _dirtyFlag[8] = true;
        if(!pJson["log_encoding"].isNull())
        {
            _logEncoding=std::make_shared<std::string>(pJson["log_encoding"].asString());
        }
    }
    if(pJson.isMember("scm_type"))
    {
        _dirtyFlag[9] = true;
        if(!pJson["scm_type"].isNull())
        {
            _scmType=std::make_shared<std::string>(pJson["scm_type"].asString());
        }
    }
    if(pJson.isMember("required_storage_bytes"))
    {
        _dirtyFlag[10] = true;
        if(!pJson["required_storage_bytes"].isNull())
        {
            _requiredStorageBytes=std::make_shared<int64_t>((int64_t)pJson["required_storage_bytes"].asInt64());
        }
    }
    if(pJson.isMember("storage_updated_at"))
    {
        _dirtyFlag[11] = true;
        if(!pJson["storage_updated_at"].isNull())
        {
            auto timeStr = pJson["storage_updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _storageUpdatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
}

const int32_t &Repositories::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Repositories::getId() const noexcept
{
    return _id;
}
const typename Repositories::PrimaryKeyType & Repositories::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &Repositories::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Repositories::getProjectId() const noexcept
{
    return _projectId;
}
void Repositories::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[1] = true;
}


const std::string &Repositories::getValueOfUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_url)
        return *_url;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getUrl() const noexcept
{
    return _url;
}
void Repositories::setUrl(const std::string &pUrl) noexcept
{
    _url = std::make_shared<std::string>(pUrl);
    _dirtyFlag[2] = true;
}
void Repositories::setUrl(std::string &&pUrl) noexcept
{
    _url = std::make_shared<std::string>(std::move(pUrl));
    _dirtyFlag[2] = true;
}


const std::string &Repositories::getValueOfLogin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_login)
        return *_login;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getLogin() const noexcept
{
    return _login;
}
void Repositories::setLogin(const std::string &pLogin) noexcept
{
    _login = std::make_shared<std::string>(pLogin);
    _dirtyFlag[3] = true;
}
void Repositories::setLogin(std::string &&pLogin) noexcept
{
    _login = std::make_shared<std::string>(std::move(pLogin));
    _dirtyFlag[3] = true;
}


const std::string &Repositories::getValueOfPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_password)
        return *_password;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getPassword() const noexcept
{
    return _password;
}
void Repositories::setPassword(const std::string &pPassword) noexcept
{
    _password = std::make_shared<std::string>(pPassword);
    _dirtyFlag[4] = true;
}
void Repositories::setPassword(std::string &&pPassword) noexcept
{
    _password = std::make_shared<std::string>(std::move(pPassword));
    _dirtyFlag[4] = true;
}


const std::string &Repositories::getValueOfRootUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_rootUrl)
        return *_rootUrl;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getRootUrl() const noexcept
{
    return _rootUrl;
}
void Repositories::setRootUrl(const std::string &pRootUrl) noexcept
{
    _rootUrl = std::make_shared<std::string>(pRootUrl);
    _dirtyFlag[5] = true;
}
void Repositories::setRootUrl(std::string &&pRootUrl) noexcept
{
    _rootUrl = std::make_shared<std::string>(std::move(pRootUrl));
    _dirtyFlag[5] = true;
}


const std::string &Repositories::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getType() const noexcept
{
    return _type;
}
void Repositories::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[6] = true;
}
void Repositories::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[6] = true;
}


const std::string &Repositories::getValueOfPathEncoding() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_pathEncoding)
        return *_pathEncoding;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getPathEncoding() const noexcept
{
    return _pathEncoding;
}
void Repositories::setPathEncoding(const std::string &pPathEncoding) noexcept
{
    _pathEncoding = std::make_shared<std::string>(pPathEncoding);
    _dirtyFlag[7] = true;
}
void Repositories::setPathEncoding(std::string &&pPathEncoding) noexcept
{
    _pathEncoding = std::make_shared<std::string>(std::move(pPathEncoding));
    _dirtyFlag[7] = true;
}


const std::string &Repositories::getValueOfLogEncoding() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_logEncoding)
        return *_logEncoding;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getLogEncoding() const noexcept
{
    return _logEncoding;
}
void Repositories::setLogEncoding(const std::string &pLogEncoding) noexcept
{
    _logEncoding = std::make_shared<std::string>(pLogEncoding);
    _dirtyFlag[8] = true;
}
void Repositories::setLogEncoding(std::string &&pLogEncoding) noexcept
{
    _logEncoding = std::make_shared<std::string>(std::move(pLogEncoding));
    _dirtyFlag[8] = true;
}


const std::string &Repositories::getValueOfScmType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_scmType)
        return *_scmType;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getScmType() const noexcept
{
    return _scmType;
}
void Repositories::setScmType(const std::string &pScmType) noexcept
{
    _scmType = std::make_shared<std::string>(pScmType);
    _dirtyFlag[9] = true;
}
void Repositories::setScmType(std::string &&pScmType) noexcept
{
    _scmType = std::make_shared<std::string>(std::move(pScmType));
    _dirtyFlag[9] = true;
}


const int64_t &Repositories::getValueOfRequiredStorageBytes() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_requiredStorageBytes)
        return *_requiredStorageBytes;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Repositories::getRequiredStorageBytes() const noexcept
{
    return _requiredStorageBytes;
}
void Repositories::setRequiredStorageBytes(const int64_t &pRequiredStorageBytes) noexcept
{
    _requiredStorageBytes = std::make_shared<int64_t>(pRequiredStorageBytes);
    _dirtyFlag[10] = true;
}


const ::trantor::Date &Repositories::getValueOfStorageUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_storageUpdatedAt)
        return *_storageUpdatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Repositories::getStorageUpdatedAt() const noexcept
{
    return _storageUpdatedAt;
}
void Repositories::setStorageUpdatedAt(const ::trantor::Date &pStorageUpdatedAt) noexcept
{
    _storageUpdatedAt = std::make_shared<::trantor::Date>(pStorageUpdatedAt);
    _dirtyFlag[11] = true;
}


void Repositories::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Repositories::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "project_id",
        "url",
        "login",
        "password",
        "root_url",
        "type",
        "path_encoding",
        "log_encoding",
        "scm_type",
        "required_storage_bytes",
        "storage_updated_at"
    };
    return _inCols;
}

void Repositories::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getLogin())
        {
            binder << getValueOfLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getRootUrl())
        {
            binder << getValueOfRootUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getPathEncoding())
        {
            binder << getValueOfPathEncoding();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getLogEncoding())
        {
            binder << getValueOfLogEncoding();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getScmType())
        {
            binder << getValueOfScmType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getRequiredStorageBytes())
        {
            binder << getValueOfRequiredStorageBytes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getStorageUpdatedAt())
        {
            binder << getValueOfStorageUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Repositories::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Repositories::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getLogin())
        {
            binder << getValueOfLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getRootUrl())
        {
            binder << getValueOfRootUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getPathEncoding())
        {
            binder << getValueOfPathEncoding();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getLogEncoding())
        {
            binder << getValueOfLogEncoding();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getScmType())
        {
            binder << getValueOfScmType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getRequiredStorageBytes())
        {
            binder << getValueOfRequiredStorageBytes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getStorageUpdatedAt())
        {
            binder << getValueOfStorageUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Repositories::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getLogin())
    {
        ret["login"]=getValueOfLogin();
    }
    else
    {
        ret["login"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getRootUrl())
    {
        ret["root_url"]=getValueOfRootUrl();
    }
    else
    {
        ret["root_url"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getPathEncoding())
    {
        ret["path_encoding"]=getValueOfPathEncoding();
    }
    else
    {
        ret["path_encoding"]=Json::Value();
    }
    if(getLogEncoding())
    {
        ret["log_encoding"]=getValueOfLogEncoding();
    }
    else
    {
        ret["log_encoding"]=Json::Value();
    }
    if(getScmType())
    {
        ret["scm_type"]=getValueOfScmType();
    }
    else
    {
        ret["scm_type"]=Json::Value();
    }
    if(getRequiredStorageBytes())
    {
        ret["required_storage_bytes"]=(Json::Int64)getValueOfRequiredStorageBytes();
    }
    else
    {
        ret["required_storage_bytes"]=Json::Value();
    }
    if(getStorageUpdatedAt())
    {
        ret["storage_updated_at"]=getStorageUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["storage_updated_at"]=Json::Value();
    }
    return ret;
}

Json::Value Repositories::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getProjectId())
            {
                ret[pMasqueradingVector[1]]=getValueOfProjectId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getUrl())
            {
                ret[pMasqueradingVector[2]]=getValueOfUrl();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getLogin())
            {
                ret[pMasqueradingVector[3]]=getValueOfLogin();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPassword())
            {
                ret[pMasqueradingVector[4]]=getValueOfPassword();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getRootUrl())
            {
                ret[pMasqueradingVector[5]]=getValueOfRootUrl();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[6]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getPathEncoding())
            {
                ret[pMasqueradingVector[7]]=getValueOfPathEncoding();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getLogEncoding())
            {
                ret[pMasqueradingVector[8]]=getValueOfLogEncoding();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getScmType())
            {
                ret[pMasqueradingVector[9]]=getValueOfScmType();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getRequiredStorageBytes())
            {
                ret[pMasqueradingVector[10]]=(Json::Int64)getValueOfRequiredStorageBytes();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getStorageUpdatedAt())
            {
                ret[pMasqueradingVector[11]]=getStorageUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getLogin())
    {
        ret["login"]=getValueOfLogin();
    }
    else
    {
        ret["login"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getRootUrl())
    {
        ret["root_url"]=getValueOfRootUrl();
    }
    else
    {
        ret["root_url"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getPathEncoding())
    {
        ret["path_encoding"]=getValueOfPathEncoding();
    }
    else
    {
        ret["path_encoding"]=Json::Value();
    }
    if(getLogEncoding())
    {
        ret["log_encoding"]=getValueOfLogEncoding();
    }
    else
    {
        ret["log_encoding"]=Json::Value();
    }
    if(getScmType())
    {
        ret["scm_type"]=getValueOfScmType();
    }
    else
    {
        ret["scm_type"]=Json::Value();
    }
    if(getRequiredStorageBytes())
    {
        ret["required_storage_bytes"]=(Json::Int64)getValueOfRequiredStorageBytes();
    }
    else
    {
        ret["required_storage_bytes"]=Json::Value();
    }
    if(getStorageUpdatedAt())
    {
        ret["storage_updated_at"]=getStorageUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["storage_updated_at"]=Json::Value();
    }
    return ret;
}

bool Repositories::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(1, "project_id", pJson["project_id"], err, true))
            return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(2, "url", pJson["url"], err, true))
            return false;
    }
    if(pJson.isMember("login"))
    {
        if(!validJsonOfField(3, "login", pJson["login"], err, true))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(4, "password", pJson["password"], err, true))
            return false;
    }
    if(pJson.isMember("root_url"))
    {
        if(!validJsonOfField(5, "root_url", pJson["root_url"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(6, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("path_encoding"))
    {
        if(!validJsonOfField(7, "path_encoding", pJson["path_encoding"], err, true))
            return false;
    }
    if(pJson.isMember("log_encoding"))
    {
        if(!validJsonOfField(8, "log_encoding", pJson["log_encoding"], err, true))
            return false;
    }
    if(pJson.isMember("scm_type"))
    {
        if(!validJsonOfField(9, "scm_type", pJson["scm_type"], err, true))
            return false;
    }
    else
    {
        err="The scm_type column cannot be null";
        return false;
    }
    if(pJson.isMember("required_storage_bytes"))
    {
        if(!validJsonOfField(10, "required_storage_bytes", pJson["required_storage_bytes"], err, true))
            return false;
    }
    if(pJson.isMember("storage_updated_at"))
    {
        if(!validJsonOfField(11, "storage_updated_at", pJson["storage_updated_at"], err, true))
            return false;
    }
    return true;
}
bool Repositories::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    return true;
}
bool Repositories::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(1, "project_id", pJson["project_id"], err, false))
            return false;
    }
    if(pJson.isMember("url"))
    {
        if(!validJsonOfField(2, "url", pJson["url"], err, false))
            return false;
    }
    if(pJson.isMember("login"))
    {
        if(!validJsonOfField(3, "login", pJson["login"], err, false))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(4, "password", pJson["password"], err, false))
            return false;
    }
    if(pJson.isMember("root_url"))
    {
        if(!validJsonOfField(5, "root_url", pJson["root_url"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(6, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("path_encoding"))
    {
        if(!validJsonOfField(7, "path_encoding", pJson["path_encoding"], err, false))
            return false;
    }
    if(pJson.isMember("log_encoding"))
    {
        if(!validJsonOfField(8, "log_encoding", pJson["log_encoding"], err, false))
            return false;
    }
    if(pJson.isMember("scm_type"))
    {
        if(!validJsonOfField(9, "scm_type", pJson["scm_type"], err, false))
            return false;
    }
    if(pJson.isMember("required_storage_bytes"))
    {
        if(!validJsonOfField(10, "required_storage_bytes", pJson["required_storage_bytes"], err, false))
            return false;
    }
    if(pJson.isMember("storage_updated_at"))
    {
        if(!validJsonOfField(11, "storage_updated_at", pJson["storage_updated_at"], err, false))
            return false;
    }
    return true;
}
bool Repositories::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    return true;
}
bool Repositories::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson, 
                                    std::string &err, 
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 3:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 60 )";
                return false;               
            }

            break;
        case 4:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 5:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 6:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 7:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 64)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 64 )";
                return false;               
            }

            break;
        case 8:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 64)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 64 )";
                return false;               
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 11:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
