/**
 *
 *  Users.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject6 
{
class Users
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _login;
        static const std::string _firstname;
        static const std::string _lastname;
        static const std::string _mail;
        static const std::string _admin;
        static const std::string _status;
        static const std::string _last_login_on;
        static const std::string _language;
        static const std::string _auth_source_id;
        static const std::string _created_on;
        static const std::string _updated_on;
        static const std::string _type;
        static const std::string _identity_url;
        static const std::string _mail_notification;
        static const std::string _first_login;
        static const std::string _force_password_change;
        static const std::string _failed_login_count;
        static const std::string _last_failed_login_on;
        static const std::string _consented_at;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int32_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Users(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Users(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Users(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Users() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    bool validateMasqueradedJsonForCreation(const Json::Value &,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err);
    bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;

    /**  For column login  */
    ///Get the value of the column login, returns the default value if the column is null
    const std::string &getValueOfLogin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLogin() const noexcept;
    ///Set the value of the column login
    void setLogin(const std::string &pLogin) noexcept;
    void setLogin(std::string &&pLogin) noexcept;

    /**  For column firstname  */
    ///Get the value of the column firstname, returns the default value if the column is null
    const std::string &getValueOfFirstname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirstname() const noexcept;
    ///Set the value of the column firstname
    void setFirstname(const std::string &pFirstname) noexcept;
    void setFirstname(std::string &&pFirstname) noexcept;

    /**  For column lastname  */
    ///Get the value of the column lastname, returns the default value if the column is null
    const std::string &getValueOfLastname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLastname() const noexcept;
    ///Set the value of the column lastname
    void setLastname(const std::string &pLastname) noexcept;
    void setLastname(std::string &&pLastname) noexcept;

    /**  For column mail  */
    ///Get the value of the column mail, returns the default value if the column is null
    const std::string &getValueOfMail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMail() const noexcept;
    ///Set the value of the column mail
    void setMail(const std::string &pMail) noexcept;
    void setMail(std::string &&pMail) noexcept;

    /**  For column admin  */
    ///Get the value of the column admin, returns the default value if the column is null
    const bool &getValueOfAdmin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getAdmin() const noexcept;
    ///Set the value of the column admin
    void setAdmin(const bool &pAdmin) noexcept;

    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const int32_t &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getStatus() const noexcept;
    ///Set the value of the column status
    void setStatus(const int32_t &pStatus) noexcept;

    /**  For column last_login_on  */
    ///Get the value of the column last_login_on, returns the default value if the column is null
    const ::trantor::Date &getValueOfLastLoginOn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getLastLoginOn() const noexcept;
    ///Set the value of the column last_login_on
    void setLastLoginOn(const ::trantor::Date &pLastLoginOn) noexcept;

    /**  For column language  */
    ///Get the value of the column language, returns the default value if the column is null
    const std::string &getValueOfLanguage() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLanguage() const noexcept;
    ///Set the value of the column language
    void setLanguage(const std::string &pLanguage) noexcept;
    void setLanguage(std::string &&pLanguage) noexcept;

    /**  For column auth_source_id  */
    ///Get the value of the column auth_source_id, returns the default value if the column is null
    const int32_t &getValueOfAuthSourceId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getAuthSourceId() const noexcept;
    ///Set the value of the column auth_source_id
    void setAuthSourceId(const int32_t &pAuthSourceId) noexcept;

    /**  For column created_on  */
    ///Get the value of the column created_on, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedOn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedOn() const noexcept;
    ///Set the value of the column created_on
    void setCreatedOn(const ::trantor::Date &pCreatedOn) noexcept;

    /**  For column updated_on  */
    ///Get the value of the column updated_on, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedOn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedOn() const noexcept;
    ///Set the value of the column updated_on
    void setUpdatedOn(const ::trantor::Date &pUpdatedOn) noexcept;

    /**  For column type  */
    ///Get the value of the column type, returns the default value if the column is null
    const std::string &getValueOfType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getType() const noexcept;
    ///Set the value of the column type
    void setType(const std::string &pType) noexcept;
    void setType(std::string &&pType) noexcept;

    /**  For column identity_url  */
    ///Get the value of the column identity_url, returns the default value if the column is null
    const std::string &getValueOfIdentityUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIdentityUrl() const noexcept;
    ///Set the value of the column identity_url
    void setIdentityUrl(const std::string &pIdentityUrl) noexcept;
    void setIdentityUrl(std::string &&pIdentityUrl) noexcept;

    /**  For column mail_notification  */
    ///Get the value of the column mail_notification, returns the default value if the column is null
    const std::string &getValueOfMailNotification() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMailNotification() const noexcept;
    ///Set the value of the column mail_notification
    void setMailNotification(const std::string &pMailNotification) noexcept;
    void setMailNotification(std::string &&pMailNotification) noexcept;

    /**  For column first_login  */
    ///Get the value of the column first_login, returns the default value if the column is null
    const bool &getValueOfFirstLogin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getFirstLogin() const noexcept;
    ///Set the value of the column first_login
    void setFirstLogin(const bool &pFirstLogin) noexcept;

    /**  For column force_password_change  */
    ///Get the value of the column force_password_change, returns the default value if the column is null
    const bool &getValueOfForcePasswordChange() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getForcePasswordChange() const noexcept;
    ///Set the value of the column force_password_change
    void setForcePasswordChange(const bool &pForcePasswordChange) noexcept;

    /**  For column failed_login_count  */
    ///Get the value of the column failed_login_count, returns the default value if the column is null
    const int32_t &getValueOfFailedLoginCount() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getFailedLoginCount() const noexcept;
    ///Set the value of the column failed_login_count
    void setFailedLoginCount(const int32_t &pFailedLoginCount) noexcept;

    /**  For column last_failed_login_on  */
    ///Get the value of the column last_failed_login_on, returns the default value if the column is null
    const ::trantor::Date &getValueOfLastFailedLoginOn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getLastFailedLoginOn() const noexcept;
    ///Set the value of the column last_failed_login_on
    void setLastFailedLoginOn(const ::trantor::Date &pLastFailedLoginOn) noexcept;

    /**  For column consented_at  */
    ///Get the value of the column consented_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfConsentedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getConsentedAt() const noexcept;
    ///Set the value of the column consented_at
    void setConsentedAt(const ::trantor::Date &pConsentedAt) noexcept;


    static size_t getColumnNumber() noexcept {  return 20;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;

  private:
    friend Mapper<Users>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> _id;
    std::shared_ptr<std::string> _login;
    std::shared_ptr<std::string> _firstname;
    std::shared_ptr<std::string> _lastname;
    std::shared_ptr<std::string> _mail;
    std::shared_ptr<bool> _admin;
    std::shared_ptr<int32_t> _status;
    std::shared_ptr<::trantor::Date> _lastLoginOn;
    std::shared_ptr<std::string> _language;
    std::shared_ptr<int32_t> _authSourceId;
    std::shared_ptr<::trantor::Date> _createdOn;
    std::shared_ptr<::trantor::Date> _updatedOn;
    std::shared_ptr<std::string> _type;
    std::shared_ptr<std::string> _identityUrl;
    std::shared_ptr<std::string> _mailNotification;
    std::shared_ptr<bool> _firstLogin;
    std::shared_ptr<bool> _forcePasswordChange;
    std::shared_ptr<int32_t> _failedLoginCount;
    std::shared_ptr<::trantor::Date> _lastFailedLoginOn;
    std::shared_ptr<::trantor::Date> _consentedAt;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[20]={ false };

  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = $1";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = $1";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        sql += "login,";
        ++parametersCount;
        if(!_dirtyFlag[1])
        {
            needSelection=true;
        }
        sql += "firstname,";
        ++parametersCount;
        if(!_dirtyFlag[2])
        {
            needSelection=true;
        }
        sql += "lastname,";
        ++parametersCount;
        if(!_dirtyFlag[3])
        {
            needSelection=true;
        }
        sql += "mail,";
        ++parametersCount;
        if(!_dirtyFlag[4])
        {
            needSelection=true;
        }
        sql += "admin,";
        ++parametersCount;
        if(!_dirtyFlag[5])
        {
            needSelection=true;
        }
        sql += "status,";
        ++parametersCount;
        if(!_dirtyFlag[6])
        {
            needSelection=true;
        }
        if(_dirtyFlag[7])
        {
            sql += "last_login_on,";
            ++parametersCount;
        }
        sql += "language,";
        ++parametersCount;
        if(!_dirtyFlag[8])
        {
            needSelection=true;
        }
        if(_dirtyFlag[9])
        {
            sql += "auth_source_id,";
            ++parametersCount;
        }
        if(_dirtyFlag[10])
        {
            sql += "created_on,";
            ++parametersCount;
        }
        if(_dirtyFlag[11])
        {
            sql += "updated_on,";
            ++parametersCount;
        }
        if(_dirtyFlag[12])
        {
            sql += "type,";
            ++parametersCount;
        }
        if(_dirtyFlag[13])
        {
            sql += "identity_url,";
            ++parametersCount;
        }
        sql += "mail_notification,";
        ++parametersCount;
        if(!_dirtyFlag[14])
        {
            needSelection=true;
        }
        sql += "first_login,";
        ++parametersCount;
        if(!_dirtyFlag[15])
        {
            needSelection=true;
        }
        sql += "force_password_change,";
        ++parametersCount;
        if(!_dirtyFlag[16])
        {
            needSelection=true;
        }
        sql += "failed_login_count,";
        ++parametersCount;
        if(!_dirtyFlag[17])
        {
            needSelection=true;
        }
        if(_dirtyFlag[18])
        {
            sql += "last_failed_login_on,";
            ++parametersCount;
        }
        if(_dirtyFlag[19])
        {
            sql += "consented_at,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        sql +="default,";
        if(_dirtyFlag[1])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[2])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[3])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[4])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[5])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[6])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[7])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[8])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[9])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[10])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[11])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[12])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[13])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[14])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[15])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[16])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[17])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        else
        {
            sql +="default,";
        }
        if(_dirtyFlag[18])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[19])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace openproject6
} // namespace drogon_model
