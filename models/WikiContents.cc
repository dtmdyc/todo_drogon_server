/**
 *
 *  WikiContents.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "WikiContents.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject6;

const std::string WikiContents::Cols::_id = "id";
const std::string WikiContents::Cols::_page_id = "page_id";
const std::string WikiContents::Cols::_author_id = "author_id";
const std::string WikiContents::Cols::_text = "text";
const std::string WikiContents::Cols::_updated_on = "updated_on";
const std::string WikiContents::Cols::_lock_version = "lock_version";
const std::string WikiContents::primaryKeyName = "id";
const bool WikiContents::hasPrimaryKey = true;
const std::string WikiContents::tableName = "wiki_contents";

const std::vector<typename WikiContents::MetaData> WikiContents::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"page_id","int32_t","integer",4,0,0,1},
{"author_id","int32_t","integer",4,0,0,0},
{"text","std::string","text",0,0,0,0},
{"updated_on","::trantor::Date","timestamp without time zone",0,0,0,1},
{"lock_version","int32_t","integer",4,0,0,1}
};
const std::string &WikiContents::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
WikiContents::WikiContents(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["page_id"].isNull())
        {
            _pageId=std::make_shared<int32_t>(r["page_id"].as<int32_t>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["text"].isNull())
        {
            _text=std::make_shared<std::string>(r["text"].as<std::string>());
        }
        if(!r["updated_on"].isNull())
        {
            auto timeStr = r["updated_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["lock_version"].isNull())
        {
            _lockVersion=std::make_shared<int32_t>(r["lock_version"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _pageId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _authorId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _text=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _lockVersion=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

WikiContents::WikiContents(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _dirtyFlag[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _pageId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _text=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _lockVersion=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

WikiContents::WikiContents(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _dirtyFlag[0]=true;
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("page_id"))
    {
        _dirtyFlag[1]=true;
        if(!pJson["page_id"].isNull())
        {
            _pageId=std::make_shared<int32_t>((int32_t)pJson["page_id"].asInt64());
        }
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[2]=true;
        if(!pJson["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
        }
    }
    if(pJson.isMember("text"))
    {
        _dirtyFlag[3]=true;
        if(!pJson["text"].isNull())
        {
            _text=std::make_shared<std::string>(pJson["text"].asString());
        }
    }
    if(pJson.isMember("updated_on"))
    {
        _dirtyFlag[4]=true;
        if(!pJson["updated_on"].isNull())
        {
            auto timeStr = pJson["updated_on"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("lock_version"))
    {
        _dirtyFlag[5]=true;
        if(!pJson["lock_version"].isNull())
        {
            _lockVersion=std::make_shared<int32_t>((int32_t)pJson["lock_version"].asInt64());
        }
    }
}

void WikiContents::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _pageId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _text=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _lockVersion=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}
                                                                    
void WikiContents::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("page_id"))
    {
        _dirtyFlag[1] = true;
        if(!pJson["page_id"].isNull())
        {
            _pageId=std::make_shared<int32_t>((int32_t)pJson["page_id"].asInt64());
        }
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[2] = true;
        if(!pJson["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
        }
    }
    if(pJson.isMember("text"))
    {
        _dirtyFlag[3] = true;
        if(!pJson["text"].isNull())
        {
            _text=std::make_shared<std::string>(pJson["text"].asString());
        }
    }
    if(pJson.isMember("updated_on"))
    {
        _dirtyFlag[4] = true;
        if(!pJson["updated_on"].isNull())
        {
            auto timeStr = pJson["updated_on"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("lock_version"))
    {
        _dirtyFlag[5] = true;
        if(!pJson["lock_version"].isNull())
        {
            _lockVersion=std::make_shared<int32_t>((int32_t)pJson["lock_version"].asInt64());
        }
    }
}

const int32_t &WikiContents::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WikiContents::getId() const noexcept
{
    return _id;
}
const typename WikiContents::PrimaryKeyType & WikiContents::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &WikiContents::getValueOfPageId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_pageId)
        return *_pageId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WikiContents::getPageId() const noexcept
{
    return _pageId;
}
void WikiContents::setPageId(const int32_t &pPageId) noexcept
{
    _pageId = std::make_shared<int32_t>(pPageId);
    _dirtyFlag[1] = true;
}


const int32_t &WikiContents::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WikiContents::getAuthorId() const noexcept
{
    return _authorId;
}
void WikiContents::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[2] = true;
}


const std::string &WikiContents::getValueOfText() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_text)
        return *_text;
    return defaultValue;
}
const std::shared_ptr<std::string> &WikiContents::getText() const noexcept
{
    return _text;
}
void WikiContents::setText(const std::string &pText) noexcept
{
    _text = std::make_shared<std::string>(pText);
    _dirtyFlag[3] = true;
}
void WikiContents::setText(std::string &&pText) noexcept
{
    _text = std::make_shared<std::string>(std::move(pText));
    _dirtyFlag[3] = true;
}


const ::trantor::Date &WikiContents::getValueOfUpdatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedOn)
        return *_updatedOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WikiContents::getUpdatedOn() const noexcept
{
    return _updatedOn;
}
void WikiContents::setUpdatedOn(const ::trantor::Date &pUpdatedOn) noexcept
{
    _updatedOn = std::make_shared<::trantor::Date>(pUpdatedOn);
    _dirtyFlag[4] = true;
}


const int32_t &WikiContents::getValueOfLockVersion() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_lockVersion)
        return *_lockVersion;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WikiContents::getLockVersion() const noexcept
{
    return _lockVersion;
}
void WikiContents::setLockVersion(const int32_t &pLockVersion) noexcept
{
    _lockVersion = std::make_shared<int32_t>(pLockVersion);
    _dirtyFlag[5] = true;
}


void WikiContents::updateId(const uint64_t id)
{
}

const std::vector<std::string> &WikiContents::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "page_id",
        "author_id",
        "text",
        "updated_on",
        "lock_version"
    };
    return _inCols;
}

void WikiContents::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getPageId())
        {
            binder << getValueOfPageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getText())
        {
            binder << getValueOfText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getUpdatedOn())
        {
            binder << getValueOfUpdatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getLockVersion())
        {
            binder << getValueOfLockVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> WikiContents::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void WikiContents::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getPageId())
        {
            binder << getValueOfPageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getText())
        {
            binder << getValueOfText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getUpdatedOn())
        {
            binder << getValueOfUpdatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getLockVersion())
        {
            binder << getValueOfLockVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value WikiContents::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPageId())
    {
        ret["page_id"]=getValueOfPageId();
    }
    else
    {
        ret["page_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getUpdatedOn())
    {
        ret["updated_on"]=getUpdatedOn()->toDbStringLocal();
    }
    else
    {
        ret["updated_on"]=Json::Value();
    }
    if(getLockVersion())
    {
        ret["lock_version"]=getValueOfLockVersion();
    }
    else
    {
        ret["lock_version"]=Json::Value();
    }
    return ret;
}

Json::Value WikiContents::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPageId())
            {
                ret[pMasqueradingVector[1]]=getValueOfPageId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAuthorId())
            {
                ret[pMasqueradingVector[2]]=getValueOfAuthorId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getText())
            {
                ret[pMasqueradingVector[3]]=getValueOfText();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getUpdatedOn())
            {
                ret[pMasqueradingVector[4]]=getUpdatedOn()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getLockVersion())
            {
                ret[pMasqueradingVector[5]]=getValueOfLockVersion();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPageId())
    {
        ret["page_id"]=getValueOfPageId();
    }
    else
    {
        ret["page_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getUpdatedOn())
    {
        ret["updated_on"]=getUpdatedOn()->toDbStringLocal();
    }
    else
    {
        ret["updated_on"]=Json::Value();
    }
    if(getLockVersion())
    {
        ret["lock_version"]=getValueOfLockVersion();
    }
    else
    {
        ret["lock_version"]=Json::Value();
    }
    return ret;
}

bool WikiContents::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("page_id"))
    {
        if(!validJsonOfField(1, "page_id", pJson["page_id"], err, true))
            return false;
    }
    else
    {
        err="The page_id column cannot be null";
        return false;
    }
    if(pJson.isMember("author_id"))
    {
        if(!validJsonOfField(2, "author_id", pJson["author_id"], err, true))
            return false;
    }
    if(pJson.isMember("text"))
    {
        if(!validJsonOfField(3, "text", pJson["text"], err, true))
            return false;
    }
    if(pJson.isMember("updated_on"))
    {
        if(!validJsonOfField(4, "updated_on", pJson["updated_on"], err, true))
            return false;
    }
    else
    {
        err="The updated_on column cannot be null";
        return false;
    }
    if(pJson.isMember("lock_version"))
    {
        if(!validJsonOfField(5, "lock_version", pJson["lock_version"], err, true))
            return false;
    }
    else
    {
        err="The lock_version column cannot be null";
        return false;
    }
    return true;
}
bool WikiContents::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
    }
    return true;
}
bool WikiContents::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("page_id"))
    {
        if(!validJsonOfField(1, "page_id", pJson["page_id"], err, false))
            return false;
    }
    if(pJson.isMember("author_id"))
    {
        if(!validJsonOfField(2, "author_id", pJson["author_id"], err, false))
            return false;
    }
    if(pJson.isMember("text"))
    {
        if(!validJsonOfField(3, "text", pJson["text"], err, false))
            return false;
    }
    if(pJson.isMember("updated_on"))
    {
        if(!validJsonOfField(4, "updated_on", pJson["updated_on"], err, false))
            return false;
    }
    if(pJson.isMember("lock_version"))
    {
        if(!validJsonOfField(5, "lock_version", pJson["lock_version"], err, false))
            return false;
    }
    return true;
}
bool WikiContents::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    return true;
}
bool WikiContents::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson, 
                                    std::string &err, 
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 2:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 3:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
