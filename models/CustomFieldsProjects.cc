/**
 *
 *  CustomFieldsProjects.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "CustomFieldsProjects.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string CustomFieldsProjects::Cols::_custom_field_id = "custom_field_id";
const std::string CustomFieldsProjects::Cols::_project_id = "project_id";
const std::string CustomFieldsProjects::primaryKeyName = "";
const bool CustomFieldsProjects::hasPrimaryKey = false;
const std::string CustomFieldsProjects::tableName = "custom_fields_projects";

const std::vector<typename CustomFieldsProjects::MetaData> CustomFieldsProjects::_metaData={
{"custom_field_id","int32_t","integer",4,0,0,1},
{"project_id","int32_t","integer",4,0,0,1}
};
const std::string &CustomFieldsProjects::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
CustomFieldsProjects::CustomFieldsProjects(const Row &r) noexcept
{
        if(!r["custom_field_id"].isNull())
        {
            _customFieldId=std::make_shared<int32_t>(r["custom_field_id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
}
const int32_t &CustomFieldsProjects::getValueOfCustomFieldId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_customFieldId)
        return *_customFieldId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomFieldsProjects::getCustomFieldId() const noexcept
{
    return _customFieldId;
}
void CustomFieldsProjects::setCustomFieldId(const int32_t &pCustomFieldId) noexcept
{
    _customFieldId = std::make_shared<int32_t>(pCustomFieldId);
    _dirtyFlag[0] = true;
}


const int32_t &CustomFieldsProjects::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomFieldsProjects::getProjectId() const noexcept
{
    return _projectId;
}
void CustomFieldsProjects::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[1] = true;
}


void CustomFieldsProjects::updateId(const uint64_t id)
{
}

const std::vector<std::string> &CustomFieldsProjects::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "custom_field_id",
        "project_id"
    };
    return _inCols;
}

void CustomFieldsProjects::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getCustomFieldId())
    {
        binder << getValueOfCustomFieldId();
    }
    else
    {
        binder << nullptr;
    }
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> CustomFieldsProjects::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void CustomFieldsProjects::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[0])
    {
        if(getCustomFieldId())
        {
            binder << getValueOfCustomFieldId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value CustomFieldsProjects::toJson() const
{
    Json::Value ret;
    if(getCustomFieldId())
    {
        ret["custom_field_id"]=getValueOfCustomFieldId();
    }
    else
    {
        ret["custom_field_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    return ret;
}
