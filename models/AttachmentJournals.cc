/**
 *
 *  AttachmentJournals.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "AttachmentJournals.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string AttachmentJournals::Cols::_id = "id";
const std::string AttachmentJournals::Cols::_journal_id = "journal_id";
const std::string AttachmentJournals::Cols::_container_id = "container_id";
const std::string AttachmentJournals::Cols::_container_type = "container_type";
const std::string AttachmentJournals::Cols::_filename = "filename";
const std::string AttachmentJournals::Cols::_disk_filename = "disk_filename";
const std::string AttachmentJournals::Cols::_filesize = "filesize";
const std::string AttachmentJournals::Cols::_content_type = "content_type";
const std::string AttachmentJournals::Cols::_digest = "digest";
const std::string AttachmentJournals::Cols::_downloads = "downloads";
const std::string AttachmentJournals::Cols::_author_id = "author_id";
const std::string AttachmentJournals::Cols::_description = "description";
const std::string AttachmentJournals::primaryKeyName = "id";
const bool AttachmentJournals::hasPrimaryKey = true;
const std::string AttachmentJournals::tableName = "attachment_journals";

const std::vector<typename AttachmentJournals::MetaData> AttachmentJournals::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"journal_id","int32_t","integer",4,0,0,1},
{"container_id","int32_t","integer",4,0,0,0},
{"container_type","std::string","character varying",30,0,0,0},
{"filename","std::string","character varying",0,0,0,1},
{"disk_filename","std::string","character varying",0,0,0,1},
{"filesize","int32_t","integer",4,0,0,1},
{"content_type","std::string","character varying",0,0,0,0},
{"digest","std::string","character varying",40,0,0,1},
{"downloads","int32_t","integer",4,0,0,1},
{"author_id","int32_t","integer",4,0,0,1},
{"description","std::string","text",0,0,0,0}
};
const std::string &AttachmentJournals::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
AttachmentJournals::AttachmentJournals(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>(r["journal_id"].as<int32_t>());
        }
        if(!r["container_id"].isNull())
        {
            _containerId=std::make_shared<int32_t>(r["container_id"].as<int32_t>());
        }
        if(!r["container_type"].isNull())
        {
            _containerType=std::make_shared<std::string>(r["container_type"].as<std::string>());
        }
        if(!r["filename"].isNull())
        {
            _filename=std::make_shared<std::string>(r["filename"].as<std::string>());
        }
        if(!r["disk_filename"].isNull())
        {
            _diskFilename=std::make_shared<std::string>(r["disk_filename"].as<std::string>());
        }
        if(!r["filesize"].isNull())
        {
            _filesize=std::make_shared<int32_t>(r["filesize"].as<int32_t>());
        }
        if(!r["content_type"].isNull())
        {
            _contentType=std::make_shared<std::string>(r["content_type"].as<std::string>());
        }
        if(!r["digest"].isNull())
        {
            _digest=std::make_shared<std::string>(r["digest"].as<std::string>());
        }
        if(!r["downloads"].isNull())
        {
            _downloads=std::make_shared<int32_t>(r["downloads"].as<int32_t>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["description"].isNull())
        {
            _description=std::make_shared<std::string>(r["description"].as<std::string>());
        }
}
const int32_t &AttachmentJournals::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AttachmentJournals::getId() const noexcept
{
    return _id;
}
const typename AttachmentJournals::PrimaryKeyType & AttachmentJournals::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &AttachmentJournals::getValueOfJournalId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journalId)
        return *_journalId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AttachmentJournals::getJournalId() const noexcept
{
    return _journalId;
}
void AttachmentJournals::setJournalId(const int32_t &pJournalId) noexcept
{
    _journalId = std::make_shared<int32_t>(pJournalId);
    _dirtyFlag[1] = true;
}


const int32_t &AttachmentJournals::getValueOfContainerId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_containerId)
        return *_containerId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AttachmentJournals::getContainerId() const noexcept
{
    return _containerId;
}
void AttachmentJournals::setContainerId(const int32_t &pContainerId) noexcept
{
    _containerId = std::make_shared<int32_t>(pContainerId);
    _dirtyFlag[2] = true;
}


const std::string &AttachmentJournals::getValueOfContainerType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_containerType)
        return *_containerType;
    return defaultValue;
}
const std::shared_ptr<std::string> &AttachmentJournals::getContainerType() const noexcept
{
    return _containerType;
}
void AttachmentJournals::setContainerType(const std::string &pContainerType) noexcept
{
    _containerType = std::make_shared<std::string>(pContainerType);
    _dirtyFlag[3] = true;
}
void AttachmentJournals::setContainerType(std::string &&pContainerType) noexcept
{
    _containerType = std::make_shared<std::string>(std::move(pContainerType));
    _dirtyFlag[3] = true;
}


const std::string &AttachmentJournals::getValueOfFilename() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_filename)
        return *_filename;
    return defaultValue;
}
const std::shared_ptr<std::string> &AttachmentJournals::getFilename() const noexcept
{
    return _filename;
}
void AttachmentJournals::setFilename(const std::string &pFilename) noexcept
{
    _filename = std::make_shared<std::string>(pFilename);
    _dirtyFlag[4] = true;
}
void AttachmentJournals::setFilename(std::string &&pFilename) noexcept
{
    _filename = std::make_shared<std::string>(std::move(pFilename));
    _dirtyFlag[4] = true;
}


const std::string &AttachmentJournals::getValueOfDiskFilename() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_diskFilename)
        return *_diskFilename;
    return defaultValue;
}
const std::shared_ptr<std::string> &AttachmentJournals::getDiskFilename() const noexcept
{
    return _diskFilename;
}
void AttachmentJournals::setDiskFilename(const std::string &pDiskFilename) noexcept
{
    _diskFilename = std::make_shared<std::string>(pDiskFilename);
    _dirtyFlag[5] = true;
}
void AttachmentJournals::setDiskFilename(std::string &&pDiskFilename) noexcept
{
    _diskFilename = std::make_shared<std::string>(std::move(pDiskFilename));
    _dirtyFlag[5] = true;
}


const int32_t &AttachmentJournals::getValueOfFilesize() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_filesize)
        return *_filesize;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AttachmentJournals::getFilesize() const noexcept
{
    return _filesize;
}
void AttachmentJournals::setFilesize(const int32_t &pFilesize) noexcept
{
    _filesize = std::make_shared<int32_t>(pFilesize);
    _dirtyFlag[6] = true;
}


const std::string &AttachmentJournals::getValueOfContentType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_contentType)
        return *_contentType;
    return defaultValue;
}
const std::shared_ptr<std::string> &AttachmentJournals::getContentType() const noexcept
{
    return _contentType;
}
void AttachmentJournals::setContentType(const std::string &pContentType) noexcept
{
    _contentType = std::make_shared<std::string>(pContentType);
    _dirtyFlag[7] = true;
}
void AttachmentJournals::setContentType(std::string &&pContentType) noexcept
{
    _contentType = std::make_shared<std::string>(std::move(pContentType));
    _dirtyFlag[7] = true;
}


const std::string &AttachmentJournals::getValueOfDigest() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_digest)
        return *_digest;
    return defaultValue;
}
const std::shared_ptr<std::string> &AttachmentJournals::getDigest() const noexcept
{
    return _digest;
}
void AttachmentJournals::setDigest(const std::string &pDigest) noexcept
{
    _digest = std::make_shared<std::string>(pDigest);
    _dirtyFlag[8] = true;
}
void AttachmentJournals::setDigest(std::string &&pDigest) noexcept
{
    _digest = std::make_shared<std::string>(std::move(pDigest));
    _dirtyFlag[8] = true;
}


const int32_t &AttachmentJournals::getValueOfDownloads() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_downloads)
        return *_downloads;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AttachmentJournals::getDownloads() const noexcept
{
    return _downloads;
}
void AttachmentJournals::setDownloads(const int32_t &pDownloads) noexcept
{
    _downloads = std::make_shared<int32_t>(pDownloads);
    _dirtyFlag[9] = true;
}


const int32_t &AttachmentJournals::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AttachmentJournals::getAuthorId() const noexcept
{
    return _authorId;
}
void AttachmentJournals::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[10] = true;
}


const std::string &AttachmentJournals::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_description)
        return *_description;
    return defaultValue;
}
const std::shared_ptr<std::string> &AttachmentJournals::getDescription() const noexcept
{
    return _description;
}
void AttachmentJournals::setDescription(const std::string &pDescription) noexcept
{
    _description = std::make_shared<std::string>(pDescription);
    _dirtyFlag[11] = true;
}
void AttachmentJournals::setDescription(std::string &&pDescription) noexcept
{
    _description = std::make_shared<std::string>(std::move(pDescription));
    _dirtyFlag[11] = true;
}


void AttachmentJournals::updateId(const uint64_t id)
{
}

const std::vector<std::string> &AttachmentJournals::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journal_id",
        "container_id",
        "container_type",
        "filename",
        "disk_filename",
        "filesize",
        "content_type",
        "digest",
        "downloads",
        "author_id",
        "description"
    };
    return _inCols;
}

void AttachmentJournals::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getJournalId())
    {
        binder << getValueOfJournalId();
    }
    else
    {
        binder << nullptr;
    }
    if(getContainerId())
    {
        binder << getValueOfContainerId();
    }
    else
    {
        binder << nullptr;
    }
    if(getContainerType())
    {
        binder << getValueOfContainerType();
    }
    else
    {
        binder << nullptr;
    }
    if(getFilename())
    {
        binder << getValueOfFilename();
    }
    else
    {
        binder << nullptr;
    }
    if(getDiskFilename())
    {
        binder << getValueOfDiskFilename();
    }
    else
    {
        binder << nullptr;
    }
    if(getFilesize())
    {
        binder << getValueOfFilesize();
    }
    else
    {
        binder << nullptr;
    }
    if(getContentType())
    {
        binder << getValueOfContentType();
    }
    else
    {
        binder << nullptr;
    }
    if(getDigest())
    {
        binder << getValueOfDigest();
    }
    else
    {
        binder << nullptr;
    }
    if(getDownloads())
    {
        binder << getValueOfDownloads();
    }
    else
    {
        binder << nullptr;
    }
    if(getAuthorId())
    {
        binder << getValueOfAuthorId();
    }
    else
    {
        binder << nullptr;
    }
    if(getDescription())
    {
        binder << getValueOfDescription();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> AttachmentJournals::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void AttachmentJournals::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getContainerId())
        {
            binder << getValueOfContainerId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getContainerType())
        {
            binder << getValueOfContainerType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getFilename())
        {
            binder << getValueOfFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getDiskFilename())
        {
            binder << getValueOfDiskFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getFilesize())
        {
            binder << getValueOfFilesize();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getContentType())
        {
            binder << getValueOfContentType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getDigest())
        {
            binder << getValueOfDigest();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getDownloads())
        {
            binder << getValueOfDownloads();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value AttachmentJournals::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getContainerId())
    {
        ret["container_id"]=getValueOfContainerId();
    }
    else
    {
        ret["container_id"]=Json::Value();
    }
    if(getContainerType())
    {
        ret["container_type"]=getValueOfContainerType();
    }
    else
    {
        ret["container_type"]=Json::Value();
    }
    if(getFilename())
    {
        ret["filename"]=getValueOfFilename();
    }
    else
    {
        ret["filename"]=Json::Value();
    }
    if(getDiskFilename())
    {
        ret["disk_filename"]=getValueOfDiskFilename();
    }
    else
    {
        ret["disk_filename"]=Json::Value();
    }
    if(getFilesize())
    {
        ret["filesize"]=getValueOfFilesize();
    }
    else
    {
        ret["filesize"]=Json::Value();
    }
    if(getContentType())
    {
        ret["content_type"]=getValueOfContentType();
    }
    else
    {
        ret["content_type"]=Json::Value();
    }
    if(getDigest())
    {
        ret["digest"]=getValueOfDigest();
    }
    else
    {
        ret["digest"]=Json::Value();
    }
    if(getDownloads())
    {
        ret["downloads"]=getValueOfDownloads();
    }
    else
    {
        ret["downloads"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    return ret;
}
