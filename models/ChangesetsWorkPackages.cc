/**
 *
 *  ChangesetsWorkPackages.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ChangesetsWorkPackages.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string ChangesetsWorkPackages::Cols::_changeset_id = "changeset_id";
const std::string ChangesetsWorkPackages::Cols::_work_package_id = "work_package_id";
const std::string ChangesetsWorkPackages::primaryKeyName = "";
const bool ChangesetsWorkPackages::hasPrimaryKey = false;
const std::string ChangesetsWorkPackages::tableName = "changesets_work_packages";

const std::vector<typename ChangesetsWorkPackages::MetaData> ChangesetsWorkPackages::_metaData={
{"changeset_id","int32_t","integer",4,0,0,1},
{"work_package_id","int32_t","integer",4,0,0,1}
};
const std::string &ChangesetsWorkPackages::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
ChangesetsWorkPackages::ChangesetsWorkPackages(const Row &r) noexcept
{
        if(!r["changeset_id"].isNull())
        {
            _changesetId=std::make_shared<int32_t>(r["changeset_id"].as<int32_t>());
        }
        if(!r["work_package_id"].isNull())
        {
            _workPackageId=std::make_shared<int32_t>(r["work_package_id"].as<int32_t>());
        }
}
const int32_t &ChangesetsWorkPackages::getValueOfChangesetId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_changesetId)
        return *_changesetId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ChangesetsWorkPackages::getChangesetId() const noexcept
{
    return _changesetId;
}
void ChangesetsWorkPackages::setChangesetId(const int32_t &pChangesetId) noexcept
{
    _changesetId = std::make_shared<int32_t>(pChangesetId);
    _dirtyFlag[0] = true;
}


const int32_t &ChangesetsWorkPackages::getValueOfWorkPackageId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_workPackageId)
        return *_workPackageId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ChangesetsWorkPackages::getWorkPackageId() const noexcept
{
    return _workPackageId;
}
void ChangesetsWorkPackages::setWorkPackageId(const int32_t &pWorkPackageId) noexcept
{
    _workPackageId = std::make_shared<int32_t>(pWorkPackageId);
    _dirtyFlag[1] = true;
}


void ChangesetsWorkPackages::updateId(const uint64_t id)
{
}

const std::vector<std::string> &ChangesetsWorkPackages::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "changeset_id",
        "work_package_id"
    };
    return _inCols;
}

void ChangesetsWorkPackages::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getChangesetId())
    {
        binder << getValueOfChangesetId();
    }
    else
    {
        binder << nullptr;
    }
    if(getWorkPackageId())
    {
        binder << getValueOfWorkPackageId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> ChangesetsWorkPackages::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void ChangesetsWorkPackages::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[0])
    {
        if(getChangesetId())
        {
            binder << getValueOfChangesetId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[1])
    {
        if(getWorkPackageId())
        {
            binder << getValueOfWorkPackageId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ChangesetsWorkPackages::toJson() const
{
    Json::Value ret;
    if(getChangesetId())
    {
        ret["changeset_id"]=getValueOfChangesetId();
    }
    else
    {
        ret["changeset_id"]=Json::Value();
    }
    if(getWorkPackageId())
    {
        ret["work_package_id"]=getValueOfWorkPackageId();
    }
    else
    {
        ret["work_package_id"]=Json::Value();
    }
    return ret;
}
