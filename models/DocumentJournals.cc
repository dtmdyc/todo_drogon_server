/**
 *
 *  DocumentJournals.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "DocumentJournals.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string DocumentJournals::Cols::_id = "id";
const std::string DocumentJournals::Cols::_journal_id = "journal_id";
const std::string DocumentJournals::Cols::_project_id = "project_id";
const std::string DocumentJournals::Cols::_category_id = "category_id";
const std::string DocumentJournals::Cols::_title = "title";
const std::string DocumentJournals::Cols::_description = "description";
const std::string DocumentJournals::Cols::_created_on = "created_on";
const std::string DocumentJournals::primaryKeyName = "id";
const bool DocumentJournals::hasPrimaryKey = true;
const std::string DocumentJournals::tableName = "document_journals";

const std::vector<typename DocumentJournals::MetaData> DocumentJournals::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"journal_id","int32_t","integer",4,0,0,1},
{"project_id","int32_t","integer",4,0,0,1},
{"category_id","int32_t","integer",4,0,0,1},
{"title","std::string","character varying",60,0,0,1},
{"description","std::string","text",0,0,0,0},
{"created_on","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &DocumentJournals::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
DocumentJournals::DocumentJournals(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>(r["journal_id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["category_id"].isNull())
        {
            _categoryId=std::make_shared<int32_t>(r["category_id"].as<int32_t>());
        }
        if(!r["title"].isNull())
        {
            _title=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            _description=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["created_on"].isNull())
        {
            auto timeStr = r["created_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int32_t &DocumentJournals::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DocumentJournals::getId() const noexcept
{
    return _id;
}
const typename DocumentJournals::PrimaryKeyType & DocumentJournals::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &DocumentJournals::getValueOfJournalId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journalId)
        return *_journalId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DocumentJournals::getJournalId() const noexcept
{
    return _journalId;
}
void DocumentJournals::setJournalId(const int32_t &pJournalId) noexcept
{
    _journalId = std::make_shared<int32_t>(pJournalId);
    _dirtyFlag[1] = true;
}


const int32_t &DocumentJournals::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DocumentJournals::getProjectId() const noexcept
{
    return _projectId;
}
void DocumentJournals::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[2] = true;
}


const int32_t &DocumentJournals::getValueOfCategoryId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_categoryId)
        return *_categoryId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DocumentJournals::getCategoryId() const noexcept
{
    return _categoryId;
}
void DocumentJournals::setCategoryId(const int32_t &pCategoryId) noexcept
{
    _categoryId = std::make_shared<int32_t>(pCategoryId);
    _dirtyFlag[3] = true;
}


const std::string &DocumentJournals::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_title)
        return *_title;
    return defaultValue;
}
const std::shared_ptr<std::string> &DocumentJournals::getTitle() const noexcept
{
    return _title;
}
void DocumentJournals::setTitle(const std::string &pTitle) noexcept
{
    _title = std::make_shared<std::string>(pTitle);
    _dirtyFlag[4] = true;
}
void DocumentJournals::setTitle(std::string &&pTitle) noexcept
{
    _title = std::make_shared<std::string>(std::move(pTitle));
    _dirtyFlag[4] = true;
}


const std::string &DocumentJournals::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_description)
        return *_description;
    return defaultValue;
}
const std::shared_ptr<std::string> &DocumentJournals::getDescription() const noexcept
{
    return _description;
}
void DocumentJournals::setDescription(const std::string &pDescription) noexcept
{
    _description = std::make_shared<std::string>(pDescription);
    _dirtyFlag[5] = true;
}
void DocumentJournals::setDescription(std::string &&pDescription) noexcept
{
    _description = std::make_shared<std::string>(std::move(pDescription));
    _dirtyFlag[5] = true;
}


const ::trantor::Date &DocumentJournals::getValueOfCreatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdOn)
        return *_createdOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DocumentJournals::getCreatedOn() const noexcept
{
    return _createdOn;
}
void DocumentJournals::setCreatedOn(const ::trantor::Date &pCreatedOn) noexcept
{
    _createdOn = std::make_shared<::trantor::Date>(pCreatedOn);
    _dirtyFlag[6] = true;
}


void DocumentJournals::updateId(const uint64_t id)
{
}

const std::vector<std::string> &DocumentJournals::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journal_id",
        "project_id",
        "category_id",
        "title",
        "description",
        "created_on"
    };
    return _inCols;
}

void DocumentJournals::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getJournalId())
    {
        binder << getValueOfJournalId();
    }
    else
    {
        binder << nullptr;
    }
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getCategoryId())
    {
        binder << getValueOfCategoryId();
    }
    else
    {
        binder << nullptr;
    }
    if(getTitle())
    {
        binder << getValueOfTitle();
    }
    else
    {
        binder << nullptr;
    }
    if(getDescription())
    {
        binder << getValueOfDescription();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedOn())
    {
        binder << getValueOfCreatedOn();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> DocumentJournals::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void DocumentJournals::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getCategoryId())
        {
            binder << getValueOfCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getCreatedOn())
        {
            binder << getValueOfCreatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value DocumentJournals::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getCategoryId())
    {
        ret["category_id"]=getValueOfCategoryId();
    }
    else
    {
        ret["category_id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getCreatedOn())
    {
        ret["created_on"]=getCreatedOn()->toDbStringLocal();
    }
    else
    {
        ret["created_on"]=Json::Value();
    }
    return ret;
}
