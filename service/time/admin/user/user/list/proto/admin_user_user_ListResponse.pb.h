// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time/admin/user/user/list/proto/admin_user_user_ListResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_time_2fadmin_2fuser_2fuser_2flist_2fproto_2fadmin_5fuser_5fuser_5fListResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_time_2fadmin_2fuser_2fuser_2flist_2fproto_2fadmin_5fuser_5fuser_5fListResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_time_2fadmin_2fuser_2fuser_2flist_2fproto_2fadmin_5fuser_5fuser_5fListResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_time_2fadmin_2fuser_2fuser_2flist_2fproto_2fadmin_5fuser_5fuser_5fListResponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_time_2fadmin_2fuser_2fuser_2flist_2fproto_2fadmin_5fuser_5fuser_5fListResponse_2eproto;
namespace timeservice {
class UserListResponse;
class UserListResponseDefaultTypeInternal;
extern UserListResponseDefaultTypeInternal _UserListResponse_default_instance_;
}  // namespace timeservice
PROTOBUF_NAMESPACE_OPEN
template<> ::timeservice::UserListResponse* Arena::CreateMaybeMessage<::timeservice::UserListResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace timeservice {

enum UserListResponse_ErrorStatus : int {
  UserListResponse_ErrorStatus_OK = 0,
  UserListResponse_ErrorStatus_UNAUTHORISED = 1,
  UserListResponse_ErrorStatus_UserListResponse_ErrorStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserListResponse_ErrorStatus_UserListResponse_ErrorStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserListResponse_ErrorStatus_IsValid(int value);
constexpr UserListResponse_ErrorStatus UserListResponse_ErrorStatus_ErrorStatus_MIN = UserListResponse_ErrorStatus_OK;
constexpr UserListResponse_ErrorStatus UserListResponse_ErrorStatus_ErrorStatus_MAX = UserListResponse_ErrorStatus_UNAUTHORISED;
constexpr int UserListResponse_ErrorStatus_ErrorStatus_ARRAYSIZE = UserListResponse_ErrorStatus_ErrorStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserListResponse_ErrorStatus_descriptor();
template<typename T>
inline const std::string& UserListResponse_ErrorStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserListResponse_ErrorStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserListResponse_ErrorStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserListResponse_ErrorStatus_descriptor(), enum_t_value);
}
inline bool UserListResponse_ErrorStatus_Parse(
    const std::string& name, UserListResponse_ErrorStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserListResponse_ErrorStatus>(
    UserListResponse_ErrorStatus_descriptor(), name, value);
}
// ===================================================================

class UserListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeservice.UserListResponse) */ {
 public:
  UserListResponse();
  virtual ~UserListResponse();

  UserListResponse(const UserListResponse& from);
  UserListResponse(UserListResponse&& from) noexcept
    : UserListResponse() {
    *this = ::std::move(from);
  }

  inline UserListResponse& operator=(const UserListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserListResponse& operator=(UserListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserListResponse* internal_default_instance() {
    return reinterpret_cast<const UserListResponse*>(
               &_UserListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserListResponse& a, UserListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserListResponse* New() const final {
    return CreateMaybeMessage<UserListResponse>(nullptr);
  }

  UserListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserListResponse& from);
  void MergeFrom(const UserListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeservice.UserListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_time_2fadmin_2fuser_2fuser_2flist_2fproto_2fadmin_5fuser_5fuser_5fListResponse_2eproto);
    return ::descriptor_table_time_2fadmin_2fuser_2fuser_2flist_2fproto_2fadmin_5fuser_5fuser_5fListResponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserListResponse_ErrorStatus ErrorStatus;
  static constexpr ErrorStatus OK =
    UserListResponse_ErrorStatus_OK;
  static constexpr ErrorStatus UNAUTHORISED =
    UserListResponse_ErrorStatus_UNAUTHORISED;
  static inline bool ErrorStatus_IsValid(int value) {
    return UserListResponse_ErrorStatus_IsValid(value);
  }
  static constexpr ErrorStatus ErrorStatus_MIN =
    UserListResponse_ErrorStatus_ErrorStatus_MIN;
  static constexpr ErrorStatus ErrorStatus_MAX =
    UserListResponse_ErrorStatus_ErrorStatus_MAX;
  static constexpr int ErrorStatus_ARRAYSIZE =
    UserListResponse_ErrorStatus_ErrorStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorStatus_descriptor() {
    return UserListResponse_ErrorStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorStatus_Name.");
    return UserListResponse_ErrorStatus_Name(enum_t_value);
  }
  static inline bool ErrorStatus_Parse(const std::string& name,
      ErrorStatus* value) {
    return UserListResponse_ErrorStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kJsonFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // string json = 3;
  void clear_json();
  const std::string& json() const;
  void set_json(const std::string& value);
  void set_json(std::string&& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  std::string* mutable_json();
  std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // .timeservice.UserListResponse.ErrorStatus status = 1;
  void clear_status();
  ::timeservice::UserListResponse_ErrorStatus status() const;
  void set_status(::timeservice::UserListResponse_ErrorStatus value);
  private:
  ::timeservice::UserListResponse_ErrorStatus _internal_status() const;
  void _internal_set_status(::timeservice::UserListResponse_ErrorStatus value);
  public:

  // @@protoc_insertion_point(class_scope:timeservice.UserListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_time_2fadmin_2fuser_2fuser_2flist_2fproto_2fadmin_5fuser_5fuser_5fListResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserListResponse

// .timeservice.UserListResponse.ErrorStatus status = 1;
inline void UserListResponse::clear_status() {
  status_ = 0;
}
inline ::timeservice::UserListResponse_ErrorStatus UserListResponse::_internal_status() const {
  return static_cast< ::timeservice::UserListResponse_ErrorStatus >(status_);
}
inline ::timeservice::UserListResponse_ErrorStatus UserListResponse::status() const {
  // @@protoc_insertion_point(field_get:timeservice.UserListResponse.status)
  return _internal_status();
}
inline void UserListResponse::_internal_set_status(::timeservice::UserListResponse_ErrorStatus value) {
  
  status_ = value;
}
inline void UserListResponse::set_status(::timeservice::UserListResponse_ErrorStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:timeservice.UserListResponse.status)
}

// string error_msg = 2;
inline void UserListResponse::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserListResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:timeservice.UserListResponse.error_msg)
  return _internal_error_msg();
}
inline void UserListResponse::set_error_msg(const std::string& value) {
  _internal_set_error_msg(value);
  // @@protoc_insertion_point(field_set:timeservice.UserListResponse.error_msg)
}
inline std::string* UserListResponse::mutable_error_msg() {
  // @@protoc_insertion_point(field_mutable:timeservice.UserListResponse.error_msg)
  return _internal_mutable_error_msg();
}
inline const std::string& UserListResponse::_internal_error_msg() const {
  return error_msg_.GetNoArena();
}
inline void UserListResponse::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserListResponse::set_error_msg(std::string&& value) {
  
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeservice.UserListResponse.error_msg)
}
inline void UserListResponse::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeservice.UserListResponse.error_msg)
}
inline void UserListResponse::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeservice.UserListResponse.error_msg)
}
inline std::string* UserListResponse::_internal_mutable_error_msg() {
  
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserListResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:timeservice.UserListResponse.error_msg)
  
  return error_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserListResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:timeservice.UserListResponse.error_msg)
}

// string json = 3;
inline void UserListResponse::clear_json() {
  json_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserListResponse::json() const {
  // @@protoc_insertion_point(field_get:timeservice.UserListResponse.json)
  return _internal_json();
}
inline void UserListResponse::set_json(const std::string& value) {
  _internal_set_json(value);
  // @@protoc_insertion_point(field_set:timeservice.UserListResponse.json)
}
inline std::string* UserListResponse::mutable_json() {
  // @@protoc_insertion_point(field_mutable:timeservice.UserListResponse.json)
  return _internal_mutable_json();
}
inline const std::string& UserListResponse::_internal_json() const {
  return json_.GetNoArena();
}
inline void UserListResponse::_internal_set_json(const std::string& value) {
  
  json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserListResponse::set_json(std::string&& value) {
  
  json_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeservice.UserListResponse.json)
}
inline void UserListResponse::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeservice.UserListResponse.json)
}
inline void UserListResponse::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeservice.UserListResponse.json)
}
inline std::string* UserListResponse::_internal_mutable_json() {
  
  return json_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserListResponse::release_json() {
  // @@protoc_insertion_point(field_release:timeservice.UserListResponse.json)
  
  return json_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserListResponse::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:timeservice.UserListResponse.json)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace timeservice

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::timeservice::UserListResponse_ErrorStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::timeservice::UserListResponse_ErrorStatus>() {
  return ::timeservice::UserListResponse_ErrorStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_time_2fadmin_2fuser_2fuser_2flist_2fproto_2fadmin_5fuser_5fuser_5fListResponse_2eproto
