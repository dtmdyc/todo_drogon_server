/**
 *
 *  CostEntries.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject4 
{
class CostEntries
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _user_id;
        static const std::string _project_id;
        static const std::string _work_package_id;
        static const std::string _cost_type_id;
        static const std::string _units;
        static const std::string _spent_on;
        static const std::string _created_on;
        static const std::string _updated_on;
        static const std::string _comments;
        static const std::string _blocked;
        static const std::string _overridden_costs;
        static const std::string _costs;
        static const std::string _rate_id;
        static const std::string _tyear;
        static const std::string _tmonth;
        static const std::string _tweek;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int32_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;
    explicit CostEntries(const Row &r) noexcept;
    CostEntries() = default;
    
    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;

    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const int32_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getUserId() const noexcept;
    ///Set the value of the column user_id
    void setUserId(const int32_t &pUserId) noexcept;

    /**  For column project_id  */
    ///Get the value of the column project_id, returns the default value if the column is null
    const int32_t &getValueOfProjectId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getProjectId() const noexcept;
    ///Set the value of the column project_id
    void setProjectId(const int32_t &pProjectId) noexcept;

    /**  For column work_package_id  */
    ///Get the value of the column work_package_id, returns the default value if the column is null
    const int32_t &getValueOfWorkPackageId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getWorkPackageId() const noexcept;
    ///Set the value of the column work_package_id
    void setWorkPackageId(const int32_t &pWorkPackageId) noexcept;

    /**  For column cost_type_id  */
    ///Get the value of the column cost_type_id, returns the default value if the column is null
    const int32_t &getValueOfCostTypeId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getCostTypeId() const noexcept;
    ///Set the value of the column cost_type_id
    void setCostTypeId(const int32_t &pCostTypeId) noexcept;

    /**  For column units  */
    ///Get the value of the column units, returns the default value if the column is null
    const double &getValueOfUnits() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getUnits() const noexcept;
    ///Set the value of the column units
    void setUnits(const double &pUnits) noexcept;

    /**  For column spent_on  */
    ///Get the value of the column spent_on, returns the default value if the column is null
    const ::trantor::Date &getValueOfSpentOn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getSpentOn() const noexcept;
    ///Set the value of the column spent_on
    void setSpentOn(const ::trantor::Date &pSpentOn) noexcept;

    /**  For column created_on  */
    ///Get the value of the column created_on, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedOn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedOn() const noexcept;
    ///Set the value of the column created_on
    void setCreatedOn(const ::trantor::Date &pCreatedOn) noexcept;

    /**  For column updated_on  */
    ///Get the value of the column updated_on, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedOn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedOn() const noexcept;
    ///Set the value of the column updated_on
    void setUpdatedOn(const ::trantor::Date &pUpdatedOn) noexcept;

    /**  For column comments  */
    ///Get the value of the column comments, returns the default value if the column is null
    const std::string &getValueOfComments() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComments() const noexcept;
    ///Set the value of the column comments
    void setComments(const std::string &pComments) noexcept;
    void setComments(std::string &&pComments) noexcept;

    /**  For column blocked  */
    ///Get the value of the column blocked, returns the default value if the column is null
    const bool &getValueOfBlocked() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getBlocked() const noexcept;
    ///Set the value of the column blocked
    void setBlocked(const bool &pBlocked) noexcept;

    /**  For column overridden_costs  */
    ///Get the value of the column overridden_costs, returns the default value if the column is null
    const int64_t &getValueOfOverriddenCosts() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getOverriddenCosts() const noexcept;
    ///Set the value of the column overridden_costs
    void setOverriddenCosts(const int64_t &pOverriddenCosts) noexcept;

    /**  For column costs  */
    ///Get the value of the column costs, returns the default value if the column is null
    const int64_t &getValueOfCosts() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getCosts() const noexcept;
    ///Set the value of the column costs
    void setCosts(const int64_t &pCosts) noexcept;

    /**  For column rate_id  */
    ///Get the value of the column rate_id, returns the default value if the column is null
    const int32_t &getValueOfRateId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getRateId() const noexcept;
    ///Set the value of the column rate_id
    void setRateId(const int32_t &pRateId) noexcept;

    /**  For column tyear  */
    ///Get the value of the column tyear, returns the default value if the column is null
    const int32_t &getValueOfTyear() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getTyear() const noexcept;
    ///Set the value of the column tyear
    void setTyear(const int32_t &pTyear) noexcept;

    /**  For column tmonth  */
    ///Get the value of the column tmonth, returns the default value if the column is null
    const int32_t &getValueOfTmonth() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getTmonth() const noexcept;
    ///Set the value of the column tmonth
    void setTmonth(const int32_t &pTmonth) noexcept;

    /**  For column tweek  */
    ///Get the value of the column tweek, returns the default value if the column is null
    const int32_t &getValueOfTweek() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getTweek() const noexcept;
    ///Set the value of the column tweek
    void setTweek(const int32_t &pTweek) noexcept;


    static size_t getColumnNumber() noexcept {  return 17;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;

  private:
    friend Mapper<CostEntries>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> _id;
    std::shared_ptr<int32_t> _userId;
    std::shared_ptr<int32_t> _projectId;
    std::shared_ptr<int32_t> _workPackageId;
    std::shared_ptr<int32_t> _costTypeId;
    std::shared_ptr<double> _units;
    std::shared_ptr<::trantor::Date> _spentOn;
    std::shared_ptr<::trantor::Date> _createdOn;
    std::shared_ptr<::trantor::Date> _updatedOn;
    std::shared_ptr<std::string> _comments;
    std::shared_ptr<bool> _blocked;
    std::shared_ptr<int64_t> _overriddenCosts;
    std::shared_ptr<int64_t> _costs;
    std::shared_ptr<int32_t> _rateId;
    std::shared_ptr<int32_t> _tyear;
    std::shared_ptr<int32_t> _tmonth;
    std::shared_ptr<int32_t> _tweek;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[17]={ false };
};
} // namespace openproject4
} // namespace drogon_model
