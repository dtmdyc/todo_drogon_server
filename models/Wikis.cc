/**
 *
 *  Wikis.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Wikis.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Wikis::Cols::_id = "id";
const std::string Wikis::Cols::_project_id = "project_id";
const std::string Wikis::Cols::_start_page = "start_page";
const std::string Wikis::Cols::_status = "status";
const std::string Wikis::Cols::_created_at = "created_at";
const std::string Wikis::Cols::_updated_at = "updated_at";
const std::string Wikis::primaryKeyName = "id";
const bool Wikis::hasPrimaryKey = true;
const std::string Wikis::tableName = "wikis";

const std::vector<typename Wikis::MetaData> Wikis::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"project_id","int32_t","integer",4,0,0,1},
{"start_page","std::string","character varying",0,0,0,1},
{"status","int32_t","integer",4,0,0,1},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &Wikis::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Wikis::Wikis(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["start_page"].isNull())
        {
            _startPage=std::make_shared<std::string>(r["start_page"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            _status=std::make_shared<int32_t>(r["status"].as<int32_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int32_t &Wikis::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Wikis::getId() const noexcept
{
    return _id;
}
const typename Wikis::PrimaryKeyType & Wikis::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &Wikis::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Wikis::getProjectId() const noexcept
{
    return _projectId;
}
void Wikis::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[1] = true;
}


const std::string &Wikis::getValueOfStartPage() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_startPage)
        return *_startPage;
    return defaultValue;
}
const std::shared_ptr<std::string> &Wikis::getStartPage() const noexcept
{
    return _startPage;
}
void Wikis::setStartPage(const std::string &pStartPage) noexcept
{
    _startPage = std::make_shared<std::string>(pStartPage);
    _dirtyFlag[2] = true;
}
void Wikis::setStartPage(std::string &&pStartPage) noexcept
{
    _startPage = std::make_shared<std::string>(std::move(pStartPage));
    _dirtyFlag[2] = true;
}


const int32_t &Wikis::getValueOfStatus() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_status)
        return *_status;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Wikis::getStatus() const noexcept
{
    return _status;
}
void Wikis::setStatus(const int32_t &pStatus) noexcept
{
    _status = std::make_shared<int32_t>(pStatus);
    _dirtyFlag[3] = true;
}


const ::trantor::Date &Wikis::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Wikis::getCreatedAt() const noexcept
{
    return _createdAt;
}
void Wikis::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[4] = true;
}


const ::trantor::Date &Wikis::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Wikis::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void Wikis::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[5] = true;
}


void Wikis::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Wikis::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "project_id",
        "start_page",
        "status",
        "created_at",
        "updated_at"
    };
    return _inCols;
}

void Wikis::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getStartPage())
    {
        binder << getValueOfStartPage();
    }
    else
    {
        binder << nullptr;
    }
    if(getStatus())
    {
        binder << getValueOfStatus();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Wikis::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Wikis::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getStartPage())
        {
            binder << getValueOfStartPage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Wikis::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getStartPage())
    {
        ret["start_page"]=getValueOfStartPage();
    }
    else
    {
        ret["start_page"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}
