/**
 *
 *  OauthAccessTokens.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject4 
{
class OauthAccessTokens
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _resource_owner_id;
        static const std::string _application_id;
        static const std::string _token;
        static const std::string _refresh_token;
        static const std::string _expires_in;
        static const std::string _revoked_at;
        static const std::string _created_at;
        static const std::string _scopes;
        static const std::string _previous_refresh_token;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int64_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;
    explicit OauthAccessTokens(const Row &r) noexcept;
    OauthAccessTokens() = default;
    
    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getId() const noexcept;

    /**  For column resource_owner_id  */
    ///Get the value of the column resource_owner_id, returns the default value if the column is null
    const int64_t &getValueOfResourceOwnerId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getResourceOwnerId() const noexcept;
    ///Set the value of the column resource_owner_id
    void setResourceOwnerId(const int64_t &pResourceOwnerId) noexcept;

    /**  For column application_id  */
    ///Get the value of the column application_id, returns the default value if the column is null
    const int64_t &getValueOfApplicationId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getApplicationId() const noexcept;
    ///Set the value of the column application_id
    void setApplicationId(const int64_t &pApplicationId) noexcept;

    /**  For column token  */
    ///Get the value of the column token, returns the default value if the column is null
    const std::string &getValueOfToken() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getToken() const noexcept;
    ///Set the value of the column token
    void setToken(const std::string &pToken) noexcept;
    void setToken(std::string &&pToken) noexcept;

    /**  For column refresh_token  */
    ///Get the value of the column refresh_token, returns the default value if the column is null
    const std::string &getValueOfRefreshToken() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRefreshToken() const noexcept;
    ///Set the value of the column refresh_token
    void setRefreshToken(const std::string &pRefreshToken) noexcept;
    void setRefreshToken(std::string &&pRefreshToken) noexcept;

    /**  For column expires_in  */
    ///Get the value of the column expires_in, returns the default value if the column is null
    const int32_t &getValueOfExpiresIn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getExpiresIn() const noexcept;
    ///Set the value of the column expires_in
    void setExpiresIn(const int32_t &pExpiresIn) noexcept;

    /**  For column revoked_at  */
    ///Get the value of the column revoked_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfRevokedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getRevokedAt() const noexcept;
    ///Set the value of the column revoked_at
    void setRevokedAt(const ::trantor::Date &pRevokedAt) noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;

    /**  For column scopes  */
    ///Get the value of the column scopes, returns the default value if the column is null
    const std::string &getValueOfScopes() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getScopes() const noexcept;
    ///Set the value of the column scopes
    void setScopes(const std::string &pScopes) noexcept;
    void setScopes(std::string &&pScopes) noexcept;

    /**  For column previous_refresh_token  */
    ///Get the value of the column previous_refresh_token, returns the default value if the column is null
    const std::string &getValueOfPreviousRefreshToken() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPreviousRefreshToken() const noexcept;
    ///Set the value of the column previous_refresh_token
    void setPreviousRefreshToken(const std::string &pPreviousRefreshToken) noexcept;
    void setPreviousRefreshToken(std::string &&pPreviousRefreshToken) noexcept;


    static size_t getColumnNumber() noexcept {  return 10;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;

  private:
    friend Mapper<OauthAccessTokens>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> _id;
    std::shared_ptr<int64_t> _resourceOwnerId;
    std::shared_ptr<int64_t> _applicationId;
    std::shared_ptr<std::string> _token;
    std::shared_ptr<std::string> _refreshToken;
    std::shared_ptr<int32_t> _expiresIn;
    std::shared_ptr<::trantor::Date> _revokedAt;
    std::shared_ptr<::trantor::Date> _createdAt;
    std::shared_ptr<std::string> _scopes;
    std::shared_ptr<std::string> _previousRefreshToken;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[10]={ false };
};
} // namespace openproject4
} // namespace drogon_model
