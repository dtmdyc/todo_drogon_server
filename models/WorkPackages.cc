/**
 *
 *  WorkPackages.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "WorkPackages.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string WorkPackages::Cols::_id = "id";
const std::string WorkPackages::Cols::_type_id = "type_id";
const std::string WorkPackages::Cols::_project_id = "project_id";
const std::string WorkPackages::Cols::_subject = "subject";
const std::string WorkPackages::Cols::_description = "description";
const std::string WorkPackages::Cols::_due_date = "due_date";
const std::string WorkPackages::Cols::_category_id = "category_id";
const std::string WorkPackages::Cols::_status_id = "status_id";
const std::string WorkPackages::Cols::_assigned_to_id = "assigned_to_id";
const std::string WorkPackages::Cols::_priority_id = "priority_id";
const std::string WorkPackages::Cols::_fixed_version_id = "fixed_version_id";
const std::string WorkPackages::Cols::_author_id = "author_id";
const std::string WorkPackages::Cols::_lock_version = "lock_version";
const std::string WorkPackages::Cols::_done_ratio = "done_ratio";
const std::string WorkPackages::Cols::_estimated_hours = "estimated_hours";
const std::string WorkPackages::Cols::_created_at = "created_at";
const std::string WorkPackages::Cols::_updated_at = "updated_at";
const std::string WorkPackages::Cols::_start_date = "start_date";
const std::string WorkPackages::Cols::_responsible_id = "responsible_id";
const std::string WorkPackages::Cols::_cost_object_id = "cost_object_id";
const std::string WorkPackages::Cols::_position = "position";
const std::string WorkPackages::Cols::_story_points = "story_points";
const std::string WorkPackages::Cols::_remaining_hours = "remaining_hours";
const std::string WorkPackages::Cols::_derived_estimated_hours = "derived_estimated_hours";
const std::string WorkPackages::primaryKeyName = "id";
const bool WorkPackages::hasPrimaryKey = true;
const std::string WorkPackages::tableName = "work_packages";

const std::vector<typename WorkPackages::MetaData> WorkPackages::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"type_id","int32_t","integer",4,0,0,1},
{"project_id","int32_t","integer",4,0,0,1},
{"subject","std::string","character varying",0,0,0,1},
{"description","std::string","text",0,0,0,0},
{"due_date","::trantor::Date","date",0,0,0,0},
{"category_id","int32_t","integer",4,0,0,0},
{"status_id","int32_t","integer",4,0,0,1},
{"assigned_to_id","int32_t","integer",4,0,0,0},
{"priority_id","int32_t","integer",4,0,0,0},
{"fixed_version_id","int32_t","integer",4,0,0,0},
{"author_id","int32_t","integer",4,0,0,1},
{"lock_version","int32_t","integer",4,0,0,1},
{"done_ratio","int32_t","integer",4,0,0,1},
{"estimated_hours","double","double precision",8,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"start_date","::trantor::Date","date",0,0,0,0},
{"responsible_id","int32_t","integer",4,0,0,0},
{"cost_object_id","int32_t","integer",4,0,0,0},
{"position","int32_t","integer",4,0,0,0},
{"story_points","int32_t","integer",4,0,0,0},
{"remaining_hours","double","double precision",8,0,0,0},
{"derived_estimated_hours","double","double precision",8,0,0,0}
};
const std::string &WorkPackages::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
WorkPackages::WorkPackages(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["type_id"].isNull())
        {
            _typeId=std::make_shared<int32_t>(r["type_id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["subject"].isNull())
        {
            _subject=std::make_shared<std::string>(r["subject"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            _description=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["due_date"].isNull())
        {
            auto daysStr = r["due_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _dueDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["category_id"].isNull())
        {
            _categoryId=std::make_shared<int32_t>(r["category_id"].as<int32_t>());
        }
        if(!r["status_id"].isNull())
        {
            _statusId=std::make_shared<int32_t>(r["status_id"].as<int32_t>());
        }
        if(!r["assigned_to_id"].isNull())
        {
            _assignedToId=std::make_shared<int32_t>(r["assigned_to_id"].as<int32_t>());
        }
        if(!r["priority_id"].isNull())
        {
            _priorityId=std::make_shared<int32_t>(r["priority_id"].as<int32_t>());
        }
        if(!r["fixed_version_id"].isNull())
        {
            _fixedVersionId=std::make_shared<int32_t>(r["fixed_version_id"].as<int32_t>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["lock_version"].isNull())
        {
            _lockVersion=std::make_shared<int32_t>(r["lock_version"].as<int32_t>());
        }
        if(!r["done_ratio"].isNull())
        {
            _doneRatio=std::make_shared<int32_t>(r["done_ratio"].as<int32_t>());
        }
        if(!r["estimated_hours"].isNull())
        {
            _estimatedHours=std::make_shared<double>(r["estimated_hours"].as<double>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["start_date"].isNull())
        {
            auto daysStr = r["start_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _startDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["responsible_id"].isNull())
        {
            _responsibleId=std::make_shared<int32_t>(r["responsible_id"].as<int32_t>());
        }
        if(!r["cost_object_id"].isNull())
        {
            _costObjectId=std::make_shared<int32_t>(r["cost_object_id"].as<int32_t>());
        }
        if(!r["position"].isNull())
        {
            _position=std::make_shared<int32_t>(r["position"].as<int32_t>());
        }
        if(!r["story_points"].isNull())
        {
            _storyPoints=std::make_shared<int32_t>(r["story_points"].as<int32_t>());
        }
        if(!r["remaining_hours"].isNull())
        {
            _remainingHours=std::make_shared<double>(r["remaining_hours"].as<double>());
        }
        if(!r["derived_estimated_hours"].isNull())
        {
            _derivedEstimatedHours=std::make_shared<double>(r["derived_estimated_hours"].as<double>());
        }
}
const int32_t &WorkPackages::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getId() const noexcept
{
    return _id;
}
const typename WorkPackages::PrimaryKeyType & WorkPackages::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &WorkPackages::getValueOfTypeId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_typeId)
        return *_typeId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getTypeId() const noexcept
{
    return _typeId;
}
void WorkPackages::setTypeId(const int32_t &pTypeId) noexcept
{
    _typeId = std::make_shared<int32_t>(pTypeId);
    _dirtyFlag[1] = true;
}


const int32_t &WorkPackages::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getProjectId() const noexcept
{
    return _projectId;
}
void WorkPackages::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[2] = true;
}


const std::string &WorkPackages::getValueOfSubject() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_subject)
        return *_subject;
    return defaultValue;
}
const std::shared_ptr<std::string> &WorkPackages::getSubject() const noexcept
{
    return _subject;
}
void WorkPackages::setSubject(const std::string &pSubject) noexcept
{
    _subject = std::make_shared<std::string>(pSubject);
    _dirtyFlag[3] = true;
}
void WorkPackages::setSubject(std::string &&pSubject) noexcept
{
    _subject = std::make_shared<std::string>(std::move(pSubject));
    _dirtyFlag[3] = true;
}


const std::string &WorkPackages::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_description)
        return *_description;
    return defaultValue;
}
const std::shared_ptr<std::string> &WorkPackages::getDescription() const noexcept
{
    return _description;
}
void WorkPackages::setDescription(const std::string &pDescription) noexcept
{
    _description = std::make_shared<std::string>(pDescription);
    _dirtyFlag[4] = true;
}
void WorkPackages::setDescription(std::string &&pDescription) noexcept
{
    _description = std::make_shared<std::string>(std::move(pDescription));
    _dirtyFlag[4] = true;
}


const ::trantor::Date &WorkPackages::getValueOfDueDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_dueDate)
        return *_dueDate;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WorkPackages::getDueDate() const noexcept
{
    return _dueDate;
}
void WorkPackages::setDueDate(const ::trantor::Date &pDueDate) noexcept
{
    _dueDate = std::make_shared<::trantor::Date>(pDueDate.roundDay());
    _dirtyFlag[5] = true;
}


const int32_t &WorkPackages::getValueOfCategoryId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_categoryId)
        return *_categoryId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getCategoryId() const noexcept
{
    return _categoryId;
}
void WorkPackages::setCategoryId(const int32_t &pCategoryId) noexcept
{
    _categoryId = std::make_shared<int32_t>(pCategoryId);
    _dirtyFlag[6] = true;
}


const int32_t &WorkPackages::getValueOfStatusId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_statusId)
        return *_statusId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getStatusId() const noexcept
{
    return _statusId;
}
void WorkPackages::setStatusId(const int32_t &pStatusId) noexcept
{
    _statusId = std::make_shared<int32_t>(pStatusId);
    _dirtyFlag[7] = true;
}


const int32_t &WorkPackages::getValueOfAssignedToId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_assignedToId)
        return *_assignedToId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getAssignedToId() const noexcept
{
    return _assignedToId;
}
void WorkPackages::setAssignedToId(const int32_t &pAssignedToId) noexcept
{
    _assignedToId = std::make_shared<int32_t>(pAssignedToId);
    _dirtyFlag[8] = true;
}


const int32_t &WorkPackages::getValueOfPriorityId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_priorityId)
        return *_priorityId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getPriorityId() const noexcept
{
    return _priorityId;
}
void WorkPackages::setPriorityId(const int32_t &pPriorityId) noexcept
{
    _priorityId = std::make_shared<int32_t>(pPriorityId);
    _dirtyFlag[9] = true;
}


const int32_t &WorkPackages::getValueOfFixedVersionId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_fixedVersionId)
        return *_fixedVersionId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getFixedVersionId() const noexcept
{
    return _fixedVersionId;
}
void WorkPackages::setFixedVersionId(const int32_t &pFixedVersionId) noexcept
{
    _fixedVersionId = std::make_shared<int32_t>(pFixedVersionId);
    _dirtyFlag[10] = true;
}


const int32_t &WorkPackages::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getAuthorId() const noexcept
{
    return _authorId;
}
void WorkPackages::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[11] = true;
}


const int32_t &WorkPackages::getValueOfLockVersion() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_lockVersion)
        return *_lockVersion;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getLockVersion() const noexcept
{
    return _lockVersion;
}
void WorkPackages::setLockVersion(const int32_t &pLockVersion) noexcept
{
    _lockVersion = std::make_shared<int32_t>(pLockVersion);
    _dirtyFlag[12] = true;
}


const int32_t &WorkPackages::getValueOfDoneRatio() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_doneRatio)
        return *_doneRatio;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getDoneRatio() const noexcept
{
    return _doneRatio;
}
void WorkPackages::setDoneRatio(const int32_t &pDoneRatio) noexcept
{
    _doneRatio = std::make_shared<int32_t>(pDoneRatio);
    _dirtyFlag[13] = true;
}


const double &WorkPackages::getValueOfEstimatedHours() const noexcept
{
    const static double defaultValue = double();
    if(_estimatedHours)
        return *_estimatedHours;
    return defaultValue;
}
const std::shared_ptr<double> &WorkPackages::getEstimatedHours() const noexcept
{
    return _estimatedHours;
}
void WorkPackages::setEstimatedHours(const double &pEstimatedHours) noexcept
{
    _estimatedHours = std::make_shared<double>(pEstimatedHours);
    _dirtyFlag[14] = true;
}


const ::trantor::Date &WorkPackages::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WorkPackages::getCreatedAt() const noexcept
{
    return _createdAt;
}
void WorkPackages::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[15] = true;
}


const ::trantor::Date &WorkPackages::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WorkPackages::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void WorkPackages::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[16] = true;
}


const ::trantor::Date &WorkPackages::getValueOfStartDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_startDate)
        return *_startDate;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WorkPackages::getStartDate() const noexcept
{
    return _startDate;
}
void WorkPackages::setStartDate(const ::trantor::Date &pStartDate) noexcept
{
    _startDate = std::make_shared<::trantor::Date>(pStartDate.roundDay());
    _dirtyFlag[17] = true;
}


const int32_t &WorkPackages::getValueOfResponsibleId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_responsibleId)
        return *_responsibleId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getResponsibleId() const noexcept
{
    return _responsibleId;
}
void WorkPackages::setResponsibleId(const int32_t &pResponsibleId) noexcept
{
    _responsibleId = std::make_shared<int32_t>(pResponsibleId);
    _dirtyFlag[18] = true;
}


const int32_t &WorkPackages::getValueOfCostObjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_costObjectId)
        return *_costObjectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getCostObjectId() const noexcept
{
    return _costObjectId;
}
void WorkPackages::setCostObjectId(const int32_t &pCostObjectId) noexcept
{
    _costObjectId = std::make_shared<int32_t>(pCostObjectId);
    _dirtyFlag[19] = true;
}


const int32_t &WorkPackages::getValueOfPosition() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_position)
        return *_position;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getPosition() const noexcept
{
    return _position;
}
void WorkPackages::setPosition(const int32_t &pPosition) noexcept
{
    _position = std::make_shared<int32_t>(pPosition);
    _dirtyFlag[20] = true;
}


const int32_t &WorkPackages::getValueOfStoryPoints() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_storyPoints)
        return *_storyPoints;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackages::getStoryPoints() const noexcept
{
    return _storyPoints;
}
void WorkPackages::setStoryPoints(const int32_t &pStoryPoints) noexcept
{
    _storyPoints = std::make_shared<int32_t>(pStoryPoints);
    _dirtyFlag[21] = true;
}


const double &WorkPackages::getValueOfRemainingHours() const noexcept
{
    const static double defaultValue = double();
    if(_remainingHours)
        return *_remainingHours;
    return defaultValue;
}
const std::shared_ptr<double> &WorkPackages::getRemainingHours() const noexcept
{
    return _remainingHours;
}
void WorkPackages::setRemainingHours(const double &pRemainingHours) noexcept
{
    _remainingHours = std::make_shared<double>(pRemainingHours);
    _dirtyFlag[22] = true;
}


const double &WorkPackages::getValueOfDerivedEstimatedHours() const noexcept
{
    const static double defaultValue = double();
    if(_derivedEstimatedHours)
        return *_derivedEstimatedHours;
    return defaultValue;
}
const std::shared_ptr<double> &WorkPackages::getDerivedEstimatedHours() const noexcept
{
    return _derivedEstimatedHours;
}
void WorkPackages::setDerivedEstimatedHours(const double &pDerivedEstimatedHours) noexcept
{
    _derivedEstimatedHours = std::make_shared<double>(pDerivedEstimatedHours);
    _dirtyFlag[23] = true;
}


void WorkPackages::updateId(const uint64_t id)
{
}

const std::vector<std::string> &WorkPackages::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "type_id",
        "project_id",
        "subject",
        "description",
        "due_date",
        "category_id",
        "status_id",
        "assigned_to_id",
        "priority_id",
        "fixed_version_id",
        "author_id",
        "lock_version",
        "done_ratio",
        "estimated_hours",
        "created_at",
        "updated_at",
        "start_date",
        "responsible_id",
        "cost_object_id",
        "position",
        "story_points",
        "remaining_hours",
        "derived_estimated_hours"
    };
    return _inCols;
}

void WorkPackages::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getTypeId())
    {
        binder << getValueOfTypeId();
    }
    else
    {
        binder << nullptr;
    }
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getSubject())
    {
        binder << getValueOfSubject();
    }
    else
    {
        binder << nullptr;
    }
    if(getDescription())
    {
        binder << getValueOfDescription();
    }
    else
    {
        binder << nullptr;
    }
    if(getDueDate())
    {
        binder << getValueOfDueDate();
    }
    else
    {
        binder << nullptr;
    }
    if(getCategoryId())
    {
        binder << getValueOfCategoryId();
    }
    else
    {
        binder << nullptr;
    }
    if(getStatusId())
    {
        binder << getValueOfStatusId();
    }
    else
    {
        binder << nullptr;
    }
    if(getAssignedToId())
    {
        binder << getValueOfAssignedToId();
    }
    else
    {
        binder << nullptr;
    }
    if(getPriorityId())
    {
        binder << getValueOfPriorityId();
    }
    else
    {
        binder << nullptr;
    }
    if(getFixedVersionId())
    {
        binder << getValueOfFixedVersionId();
    }
    else
    {
        binder << nullptr;
    }
    if(getAuthorId())
    {
        binder << getValueOfAuthorId();
    }
    else
    {
        binder << nullptr;
    }
    if(getLockVersion())
    {
        binder << getValueOfLockVersion();
    }
    else
    {
        binder << nullptr;
    }
    if(getDoneRatio())
    {
        binder << getValueOfDoneRatio();
    }
    else
    {
        binder << nullptr;
    }
    if(getEstimatedHours())
    {
        binder << getValueOfEstimatedHours();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getStartDate())
    {
        binder << getValueOfStartDate();
    }
    else
    {
        binder << nullptr;
    }
    if(getResponsibleId())
    {
        binder << getValueOfResponsibleId();
    }
    else
    {
        binder << nullptr;
    }
    if(getCostObjectId())
    {
        binder << getValueOfCostObjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getPosition())
    {
        binder << getValueOfPosition();
    }
    else
    {
        binder << nullptr;
    }
    if(getStoryPoints())
    {
        binder << getValueOfStoryPoints();
    }
    else
    {
        binder << nullptr;
    }
    if(getRemainingHours())
    {
        binder << getValueOfRemainingHours();
    }
    else
    {
        binder << nullptr;
    }
    if(getDerivedEstimatedHours())
    {
        binder << getValueOfDerivedEstimatedHours();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> WorkPackages::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void WorkPackages::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getTypeId())
        {
            binder << getValueOfTypeId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getSubject())
        {
            binder << getValueOfSubject();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getDueDate())
        {
            binder << getValueOfDueDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getCategoryId())
        {
            binder << getValueOfCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getStatusId())
        {
            binder << getValueOfStatusId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getAssignedToId())
        {
            binder << getValueOfAssignedToId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getPriorityId())
        {
            binder << getValueOfPriorityId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getFixedVersionId())
        {
            binder << getValueOfFixedVersionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getLockVersion())
        {
            binder << getValueOfLockVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getDoneRatio())
        {
            binder << getValueOfDoneRatio();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getEstimatedHours())
        {
            binder << getValueOfEstimatedHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[16])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[17])
    {
        if(getStartDate())
        {
            binder << getValueOfStartDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[18])
    {
        if(getResponsibleId())
        {
            binder << getValueOfResponsibleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[19])
    {
        if(getCostObjectId())
        {
            binder << getValueOfCostObjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[20])
    {
        if(getPosition())
        {
            binder << getValueOfPosition();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[21])
    {
        if(getStoryPoints())
        {
            binder << getValueOfStoryPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[22])
    {
        if(getRemainingHours())
        {
            binder << getValueOfRemainingHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[23])
    {
        if(getDerivedEstimatedHours())
        {
            binder << getValueOfDerivedEstimatedHours();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value WorkPackages::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTypeId())
    {
        ret["type_id"]=getValueOfTypeId();
    }
    else
    {
        ret["type_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getDueDate())
    {
        ret["due_date"]=getDueDate()->toDbStringLocal();
    }
    else
    {
        ret["due_date"]=Json::Value();
    }
    if(getCategoryId())
    {
        ret["category_id"]=getValueOfCategoryId();
    }
    else
    {
        ret["category_id"]=Json::Value();
    }
    if(getStatusId())
    {
        ret["status_id"]=getValueOfStatusId();
    }
    else
    {
        ret["status_id"]=Json::Value();
    }
    if(getAssignedToId())
    {
        ret["assigned_to_id"]=getValueOfAssignedToId();
    }
    else
    {
        ret["assigned_to_id"]=Json::Value();
    }
    if(getPriorityId())
    {
        ret["priority_id"]=getValueOfPriorityId();
    }
    else
    {
        ret["priority_id"]=Json::Value();
    }
    if(getFixedVersionId())
    {
        ret["fixed_version_id"]=getValueOfFixedVersionId();
    }
    else
    {
        ret["fixed_version_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getLockVersion())
    {
        ret["lock_version"]=getValueOfLockVersion();
    }
    else
    {
        ret["lock_version"]=Json::Value();
    }
    if(getDoneRatio())
    {
        ret["done_ratio"]=getValueOfDoneRatio();
    }
    else
    {
        ret["done_ratio"]=Json::Value();
    }
    if(getEstimatedHours())
    {
        ret["estimated_hours"]=getValueOfEstimatedHours();
    }
    else
    {
        ret["estimated_hours"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getStartDate())
    {
        ret["start_date"]=getStartDate()->toDbStringLocal();
    }
    else
    {
        ret["start_date"]=Json::Value();
    }
    if(getResponsibleId())
    {
        ret["responsible_id"]=getValueOfResponsibleId();
    }
    else
    {
        ret["responsible_id"]=Json::Value();
    }
    if(getCostObjectId())
    {
        ret["cost_object_id"]=getValueOfCostObjectId();
    }
    else
    {
        ret["cost_object_id"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    if(getStoryPoints())
    {
        ret["story_points"]=getValueOfStoryPoints();
    }
    else
    {
        ret["story_points"]=Json::Value();
    }
    if(getRemainingHours())
    {
        ret["remaining_hours"]=getValueOfRemainingHours();
    }
    else
    {
        ret["remaining_hours"]=Json::Value();
    }
    if(getDerivedEstimatedHours())
    {
        ret["derived_estimated_hours"]=getValueOfDerivedEstimatedHours();
    }
    else
    {
        ret["derived_estimated_hours"]=Json::Value();
    }
    return ret;
}
