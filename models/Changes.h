/**
 *
 *  Changes.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject4 
{
class Changes
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _changeset_id;
        static const std::string _action;
        static const std::string _path;
        static const std::string _from_path;
        static const std::string _from_revision;
        static const std::string _revision;
        static const std::string _branch;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int32_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;
    explicit Changes(const Row &r) noexcept;
    Changes() = default;
    
    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;

    /**  For column changeset_id  */
    ///Get the value of the column changeset_id, returns the default value if the column is null
    const int32_t &getValueOfChangesetId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getChangesetId() const noexcept;
    ///Set the value of the column changeset_id
    void setChangesetId(const int32_t &pChangesetId) noexcept;

    /**  For column action  */
    ///Get the value of the column action, returns the default value if the column is null
    const std::string &getValueOfAction() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAction() const noexcept;
    ///Set the value of the column action
    void setAction(const std::string &pAction) noexcept;
    void setAction(std::string &&pAction) noexcept;

    /**  For column path  */
    ///Get the value of the column path, returns the default value if the column is null
    const std::string &getValueOfPath() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPath() const noexcept;
    ///Set the value of the column path
    void setPath(const std::string &pPath) noexcept;
    void setPath(std::string &&pPath) noexcept;

    /**  For column from_path  */
    ///Get the value of the column from_path, returns the default value if the column is null
    const std::string &getValueOfFromPath() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFromPath() const noexcept;
    ///Set the value of the column from_path
    void setFromPath(const std::string &pFromPath) noexcept;
    void setFromPath(std::string &&pFromPath) noexcept;

    /**  For column from_revision  */
    ///Get the value of the column from_revision, returns the default value if the column is null
    const std::string &getValueOfFromRevision() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFromRevision() const noexcept;
    ///Set the value of the column from_revision
    void setFromRevision(const std::string &pFromRevision) noexcept;
    void setFromRevision(std::string &&pFromRevision) noexcept;

    /**  For column revision  */
    ///Get the value of the column revision, returns the default value if the column is null
    const std::string &getValueOfRevision() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRevision() const noexcept;
    ///Set the value of the column revision
    void setRevision(const std::string &pRevision) noexcept;
    void setRevision(std::string &&pRevision) noexcept;

    /**  For column branch  */
    ///Get the value of the column branch, returns the default value if the column is null
    const std::string &getValueOfBranch() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBranch() const noexcept;
    ///Set the value of the column branch
    void setBranch(const std::string &pBranch) noexcept;
    void setBranch(std::string &&pBranch) noexcept;


    static size_t getColumnNumber() noexcept {  return 8;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;

  private:
    friend Mapper<Changes>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> _id;
    std::shared_ptr<int32_t> _changesetId;
    std::shared_ptr<std::string> _action;
    std::shared_ptr<std::string> _path;
    std::shared_ptr<std::string> _fromPath;
    std::shared_ptr<std::string> _fromRevision;
    std::shared_ptr<std::string> _revision;
    std::shared_ptr<std::string> _branch;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[8]={ false };
};
} // namespace openproject4
} // namespace drogon_model
