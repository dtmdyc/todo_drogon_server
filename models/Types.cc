/**
 *
 *  Types.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Types.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Types::Cols::_id = "id";
const std::string Types::Cols::_name = "name";
const std::string Types::Cols::_position = "position";
const std::string Types::Cols::_is_in_roadmap = "is_in_roadmap";
const std::string Types::Cols::_is_milestone = "is_milestone";
const std::string Types::Cols::_is_default = "is_default";
const std::string Types::Cols::_color_id = "color_id";
const std::string Types::Cols::_created_at = "created_at";
const std::string Types::Cols::_updated_at = "updated_at";
const std::string Types::Cols::_is_standard = "is_standard";
const std::string Types::Cols::_attribute_groups = "attribute_groups";
const std::string Types::Cols::_description = "description";
const std::string Types::primaryKeyName = "id";
const bool Types::hasPrimaryKey = true;
const std::string Types::tableName = "types";

const std::vector<typename Types::MetaData> Types::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"name","std::string","character varying",0,0,0,1},
{"position","int32_t","integer",4,0,0,0},
{"is_in_roadmap","bool","boolean",1,0,0,1},
{"is_milestone","bool","boolean",1,0,0,1},
{"is_default","bool","boolean",1,0,0,1},
{"color_id","int32_t","integer",4,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"is_standard","bool","boolean",1,0,0,1},
{"attribute_groups","std::string","text",0,0,0,0},
{"description","std::string","text",0,0,0,0}
};
const std::string &Types::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Types::Types(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["position"].isNull())
        {
            _position=std::make_shared<int32_t>(r["position"].as<int32_t>());
        }
        if(!r["is_in_roadmap"].isNull())
        {
            _isInRoadmap=std::make_shared<bool>(r["is_in_roadmap"].as<bool>());
        }
        if(!r["is_milestone"].isNull())
        {
            _isMilestone=std::make_shared<bool>(r["is_milestone"].as<bool>());
        }
        if(!r["is_default"].isNull())
        {
            _isDefault=std::make_shared<bool>(r["is_default"].as<bool>());
        }
        if(!r["color_id"].isNull())
        {
            _colorId=std::make_shared<int32_t>(r["color_id"].as<int32_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["is_standard"].isNull())
        {
            _isStandard=std::make_shared<bool>(r["is_standard"].as<bool>());
        }
        if(!r["attribute_groups"].isNull())
        {
            _attributeGroups=std::make_shared<std::string>(r["attribute_groups"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            _description=std::make_shared<std::string>(r["description"].as<std::string>());
        }
}
const int32_t &Types::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Types::getId() const noexcept
{
    return _id;
}
const typename Types::PrimaryKeyType & Types::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &Types::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &Types::getName() const noexcept
{
    return _name;
}
void Types::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[1] = true;
}
void Types::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[1] = true;
}


const int32_t &Types::getValueOfPosition() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_position)
        return *_position;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Types::getPosition() const noexcept
{
    return _position;
}
void Types::setPosition(const int32_t &pPosition) noexcept
{
    _position = std::make_shared<int32_t>(pPosition);
    _dirtyFlag[2] = true;
}


const bool &Types::getValueOfIsInRoadmap() const noexcept
{
    const static bool defaultValue = bool();
    if(_isInRoadmap)
        return *_isInRoadmap;
    return defaultValue;
}
const std::shared_ptr<bool> &Types::getIsInRoadmap() const noexcept
{
    return _isInRoadmap;
}
void Types::setIsInRoadmap(const bool &pIsInRoadmap) noexcept
{
    _isInRoadmap = std::make_shared<bool>(pIsInRoadmap);
    _dirtyFlag[3] = true;
}


const bool &Types::getValueOfIsMilestone() const noexcept
{
    const static bool defaultValue = bool();
    if(_isMilestone)
        return *_isMilestone;
    return defaultValue;
}
const std::shared_ptr<bool> &Types::getIsMilestone() const noexcept
{
    return _isMilestone;
}
void Types::setIsMilestone(const bool &pIsMilestone) noexcept
{
    _isMilestone = std::make_shared<bool>(pIsMilestone);
    _dirtyFlag[4] = true;
}


const bool &Types::getValueOfIsDefault() const noexcept
{
    const static bool defaultValue = bool();
    if(_isDefault)
        return *_isDefault;
    return defaultValue;
}
const std::shared_ptr<bool> &Types::getIsDefault() const noexcept
{
    return _isDefault;
}
void Types::setIsDefault(const bool &pIsDefault) noexcept
{
    _isDefault = std::make_shared<bool>(pIsDefault);
    _dirtyFlag[5] = true;
}


const int32_t &Types::getValueOfColorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_colorId)
        return *_colorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Types::getColorId() const noexcept
{
    return _colorId;
}
void Types::setColorId(const int32_t &pColorId) noexcept
{
    _colorId = std::make_shared<int32_t>(pColorId);
    _dirtyFlag[6] = true;
}


const ::trantor::Date &Types::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Types::getCreatedAt() const noexcept
{
    return _createdAt;
}
void Types::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[7] = true;
}


const ::trantor::Date &Types::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Types::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void Types::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[8] = true;
}


const bool &Types::getValueOfIsStandard() const noexcept
{
    const static bool defaultValue = bool();
    if(_isStandard)
        return *_isStandard;
    return defaultValue;
}
const std::shared_ptr<bool> &Types::getIsStandard() const noexcept
{
    return _isStandard;
}
void Types::setIsStandard(const bool &pIsStandard) noexcept
{
    _isStandard = std::make_shared<bool>(pIsStandard);
    _dirtyFlag[9] = true;
}


const std::string &Types::getValueOfAttributeGroups() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attributeGroups)
        return *_attributeGroups;
    return defaultValue;
}
const std::shared_ptr<std::string> &Types::getAttributeGroups() const noexcept
{
    return _attributeGroups;
}
void Types::setAttributeGroups(const std::string &pAttributeGroups) noexcept
{
    _attributeGroups = std::make_shared<std::string>(pAttributeGroups);
    _dirtyFlag[10] = true;
}
void Types::setAttributeGroups(std::string &&pAttributeGroups) noexcept
{
    _attributeGroups = std::make_shared<std::string>(std::move(pAttributeGroups));
    _dirtyFlag[10] = true;
}


const std::string &Types::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_description)
        return *_description;
    return defaultValue;
}
const std::shared_ptr<std::string> &Types::getDescription() const noexcept
{
    return _description;
}
void Types::setDescription(const std::string &pDescription) noexcept
{
    _description = std::make_shared<std::string>(pDescription);
    _dirtyFlag[11] = true;
}
void Types::setDescription(std::string &&pDescription) noexcept
{
    _description = std::make_shared<std::string>(std::move(pDescription));
    _dirtyFlag[11] = true;
}


void Types::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Types::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "name",
        "position",
        "is_in_roadmap",
        "is_milestone",
        "is_default",
        "color_id",
        "created_at",
        "updated_at",
        "is_standard",
        "attribute_groups",
        "description"
    };
    return _inCols;
}

void Types::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getName())
    {
        binder << getValueOfName();
    }
    else
    {
        binder << nullptr;
    }
    if(getPosition())
    {
        binder << getValueOfPosition();
    }
    else
    {
        binder << nullptr;
    }
    if(getIsInRoadmap())
    {
        binder << getValueOfIsInRoadmap();
    }
    else
    {
        binder << nullptr;
    }
    if(getIsMilestone())
    {
        binder << getValueOfIsMilestone();
    }
    else
    {
        binder << nullptr;
    }
    if(getIsDefault())
    {
        binder << getValueOfIsDefault();
    }
    else
    {
        binder << nullptr;
    }
    if(getColorId())
    {
        binder << getValueOfColorId();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getIsStandard())
    {
        binder << getValueOfIsStandard();
    }
    else
    {
        binder << nullptr;
    }
    if(getAttributeGroups())
    {
        binder << getValueOfAttributeGroups();
    }
    else
    {
        binder << nullptr;
    }
    if(getDescription())
    {
        binder << getValueOfDescription();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Types::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Types::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getPosition())
        {
            binder << getValueOfPosition();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getIsInRoadmap())
        {
            binder << getValueOfIsInRoadmap();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getIsMilestone())
        {
            binder << getValueOfIsMilestone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getIsDefault())
        {
            binder << getValueOfIsDefault();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getColorId())
        {
            binder << getValueOfColorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getIsStandard())
        {
            binder << getValueOfIsStandard();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getAttributeGroups())
        {
            binder << getValueOfAttributeGroups();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Types::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    if(getIsInRoadmap())
    {
        ret["is_in_roadmap"]=getValueOfIsInRoadmap();
    }
    else
    {
        ret["is_in_roadmap"]=Json::Value();
    }
    if(getIsMilestone())
    {
        ret["is_milestone"]=getValueOfIsMilestone();
    }
    else
    {
        ret["is_milestone"]=Json::Value();
    }
    if(getIsDefault())
    {
        ret["is_default"]=getValueOfIsDefault();
    }
    else
    {
        ret["is_default"]=Json::Value();
    }
    if(getColorId())
    {
        ret["color_id"]=getValueOfColorId();
    }
    else
    {
        ret["color_id"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getIsStandard())
    {
        ret["is_standard"]=getValueOfIsStandard();
    }
    else
    {
        ret["is_standard"]=Json::Value();
    }
    if(getAttributeGroups())
    {
        ret["attribute_groups"]=getValueOfAttributeGroups();
    }
    else
    {
        ret["attribute_groups"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    return ret;
}
