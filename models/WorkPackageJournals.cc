/**
 *
 *  WorkPackageJournals.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "WorkPackageJournals.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject6;

const std::string WorkPackageJournals::Cols::_id = "id";
const std::string WorkPackageJournals::Cols::_journal_id = "journal_id";
const std::string WorkPackageJournals::Cols::_type_id = "type_id";
const std::string WorkPackageJournals::Cols::_project_id = "project_id";
const std::string WorkPackageJournals::Cols::_subject = "subject";
const std::string WorkPackageJournals::Cols::_description = "description";
const std::string WorkPackageJournals::Cols::_due_date = "due_date";
const std::string WorkPackageJournals::Cols::_category_id = "category_id";
const std::string WorkPackageJournals::Cols::_status_id = "status_id";
const std::string WorkPackageJournals::Cols::_assigned_to_id = "assigned_to_id";
const std::string WorkPackageJournals::Cols::_priority_id = "priority_id";
const std::string WorkPackageJournals::Cols::_fixed_version_id = "fixed_version_id";
const std::string WorkPackageJournals::Cols::_author_id = "author_id";
const std::string WorkPackageJournals::Cols::_done_ratio = "done_ratio";
const std::string WorkPackageJournals::Cols::_estimated_hours = "estimated_hours";
const std::string WorkPackageJournals::Cols::_start_date = "start_date";
const std::string WorkPackageJournals::Cols::_parent_id = "parent_id";
const std::string WorkPackageJournals::Cols::_responsible_id = "responsible_id";
const std::string WorkPackageJournals::Cols::_cost_object_id = "cost_object_id";
const std::string WorkPackageJournals::Cols::_story_points = "story_points";
const std::string WorkPackageJournals::Cols::_remaining_hours = "remaining_hours";
const std::string WorkPackageJournals::Cols::_derived_estimated_hours = "derived_estimated_hours";
const std::string WorkPackageJournals::primaryKeyName = "id";
const bool WorkPackageJournals::hasPrimaryKey = true;
const std::string WorkPackageJournals::tableName = "work_package_journals";

const std::vector<typename WorkPackageJournals::MetaData> WorkPackageJournals::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"journal_id","int32_t","integer",4,0,0,1},
{"type_id","int32_t","integer",4,0,0,1},
{"project_id","int32_t","integer",4,0,0,1},
{"subject","std::string","character varying",0,0,0,1},
{"description","std::string","text",0,0,0,0},
{"due_date","::trantor::Date","date",0,0,0,0},
{"category_id","int32_t","integer",4,0,0,0},
{"status_id","int32_t","integer",4,0,0,1},
{"assigned_to_id","int32_t","integer",4,0,0,0},
{"priority_id","int32_t","integer",4,0,0,1},
{"fixed_version_id","int32_t","integer",4,0,0,0},
{"author_id","int32_t","integer",4,0,0,1},
{"done_ratio","int32_t","integer",4,0,0,1},
{"estimated_hours","double","double precision",8,0,0,0},
{"start_date","::trantor::Date","date",0,0,0,0},
{"parent_id","int32_t","integer",4,0,0,0},
{"responsible_id","int32_t","integer",4,0,0,0},
{"cost_object_id","int32_t","integer",4,0,0,0},
{"story_points","int32_t","integer",4,0,0,0},
{"remaining_hours","double","double precision",8,0,0,0},
{"derived_estimated_hours","double","double precision",8,0,0,0}
};
const std::string &WorkPackageJournals::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
WorkPackageJournals::WorkPackageJournals(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>(r["journal_id"].as<int32_t>());
        }
        if(!r["type_id"].isNull())
        {
            _typeId=std::make_shared<int32_t>(r["type_id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["subject"].isNull())
        {
            _subject=std::make_shared<std::string>(r["subject"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            _description=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["due_date"].isNull())
        {
            auto daysStr = r["due_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _dueDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["category_id"].isNull())
        {
            _categoryId=std::make_shared<int32_t>(r["category_id"].as<int32_t>());
        }
        if(!r["status_id"].isNull())
        {
            _statusId=std::make_shared<int32_t>(r["status_id"].as<int32_t>());
        }
        if(!r["assigned_to_id"].isNull())
        {
            _assignedToId=std::make_shared<int32_t>(r["assigned_to_id"].as<int32_t>());
        }
        if(!r["priority_id"].isNull())
        {
            _priorityId=std::make_shared<int32_t>(r["priority_id"].as<int32_t>());
        }
        if(!r["fixed_version_id"].isNull())
        {
            _fixedVersionId=std::make_shared<int32_t>(r["fixed_version_id"].as<int32_t>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["done_ratio"].isNull())
        {
            _doneRatio=std::make_shared<int32_t>(r["done_ratio"].as<int32_t>());
        }
        if(!r["estimated_hours"].isNull())
        {
            _estimatedHours=std::make_shared<double>(r["estimated_hours"].as<double>());
        }
        if(!r["start_date"].isNull())
        {
            auto daysStr = r["start_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _startDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["parent_id"].isNull())
        {
            _parentId=std::make_shared<int32_t>(r["parent_id"].as<int32_t>());
        }
        if(!r["responsible_id"].isNull())
        {
            _responsibleId=std::make_shared<int32_t>(r["responsible_id"].as<int32_t>());
        }
        if(!r["cost_object_id"].isNull())
        {
            _costObjectId=std::make_shared<int32_t>(r["cost_object_id"].as<int32_t>());
        }
        if(!r["story_points"].isNull())
        {
            _storyPoints=std::make_shared<int32_t>(r["story_points"].as<int32_t>());
        }
        if(!r["remaining_hours"].isNull())
        {
            _remainingHours=std::make_shared<double>(r["remaining_hours"].as<double>());
        }
        if(!r["derived_estimated_hours"].isNull())
        {
            _derivedEstimatedHours=std::make_shared<double>(r["derived_estimated_hours"].as<double>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 22 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _journalId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _typeId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _projectId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _subject=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _description=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _dueDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            _categoryId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            _statusId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            _assignedToId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            _priorityId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            _fixedVersionId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            _authorId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            _doneRatio=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            _estimatedHours=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _startDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            _parentId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            _responsibleId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            _costObjectId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            _storyPoints=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            _remainingHours=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            _derivedEstimatedHours=std::make_shared<double>(r[index].as<double>());
        }
    }

}

WorkPackageJournals::WorkPackageJournals(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 22)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _dirtyFlag[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _typeId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _subject=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _description=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _dueDate=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _categoryId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            _statusId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            _assignedToId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            _priorityId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        _dirtyFlag[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            _fixedVersionId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        _dirtyFlag[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        _dirtyFlag[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            _doneRatio=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[13]].asInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        _dirtyFlag[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            _estimatedHours=std::make_shared<double>(pJson[pMasqueradingVector[14]].asDouble());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        _dirtyFlag[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _startDate=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        _dirtyFlag[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            _parentId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        _dirtyFlag[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            _responsibleId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        _dirtyFlag[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            _costObjectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        _dirtyFlag[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            _storyPoints=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        _dirtyFlag[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            _remainingHours=std::make_shared<double>(pJson[pMasqueradingVector[20]].asDouble());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        _dirtyFlag[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            _derivedEstimatedHours=std::make_shared<double>(pJson[pMasqueradingVector[21]].asDouble());
        }
    }
}

WorkPackageJournals::WorkPackageJournals(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _dirtyFlag[0]=true;
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("journal_id"))
    {
        _dirtyFlag[1]=true;
        if(!pJson["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson["journal_id"].asInt64());
        }
    }
    if(pJson.isMember("type_id"))
    {
        _dirtyFlag[2]=true;
        if(!pJson["type_id"].isNull())
        {
            _typeId=std::make_shared<int32_t>((int32_t)pJson["type_id"].asInt64());
        }
    }
    if(pJson.isMember("project_id"))
    {
        _dirtyFlag[3]=true;
        if(!pJson["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson["project_id"].asInt64());
        }
    }
    if(pJson.isMember("subject"))
    {
        _dirtyFlag[4]=true;
        if(!pJson["subject"].isNull())
        {
            _subject=std::make_shared<std::string>(pJson["subject"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        _dirtyFlag[5]=true;
        if(!pJson["description"].isNull())
        {
            _description=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("due_date"))
    {
        _dirtyFlag[6]=true;
        if(!pJson["due_date"].isNull())
        {
            auto daysStr = pJson["due_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _dueDate=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("category_id"))
    {
        _dirtyFlag[7]=true;
        if(!pJson["category_id"].isNull())
        {
            _categoryId=std::make_shared<int32_t>((int32_t)pJson["category_id"].asInt64());
        }
    }
    if(pJson.isMember("status_id"))
    {
        _dirtyFlag[8]=true;
        if(!pJson["status_id"].isNull())
        {
            _statusId=std::make_shared<int32_t>((int32_t)pJson["status_id"].asInt64());
        }
    }
    if(pJson.isMember("assigned_to_id"))
    {
        _dirtyFlag[9]=true;
        if(!pJson["assigned_to_id"].isNull())
        {
            _assignedToId=std::make_shared<int32_t>((int32_t)pJson["assigned_to_id"].asInt64());
        }
    }
    if(pJson.isMember("priority_id"))
    {
        _dirtyFlag[10]=true;
        if(!pJson["priority_id"].isNull())
        {
            _priorityId=std::make_shared<int32_t>((int32_t)pJson["priority_id"].asInt64());
        }
    }
    if(pJson.isMember("fixed_version_id"))
    {
        _dirtyFlag[11]=true;
        if(!pJson["fixed_version_id"].isNull())
        {
            _fixedVersionId=std::make_shared<int32_t>((int32_t)pJson["fixed_version_id"].asInt64());
        }
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[12]=true;
        if(!pJson["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
        }
    }
    if(pJson.isMember("done_ratio"))
    {
        _dirtyFlag[13]=true;
        if(!pJson["done_ratio"].isNull())
        {
            _doneRatio=std::make_shared<int32_t>((int32_t)pJson["done_ratio"].asInt64());
        }
    }
    if(pJson.isMember("estimated_hours"))
    {
        _dirtyFlag[14]=true;
        if(!pJson["estimated_hours"].isNull())
        {
            _estimatedHours=std::make_shared<double>(pJson["estimated_hours"].asDouble());
        }
    }
    if(pJson.isMember("start_date"))
    {
        _dirtyFlag[15]=true;
        if(!pJson["start_date"].isNull())
        {
            auto daysStr = pJson["start_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _startDate=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("parent_id"))
    {
        _dirtyFlag[16]=true;
        if(!pJson["parent_id"].isNull())
        {
            _parentId=std::make_shared<int32_t>((int32_t)pJson["parent_id"].asInt64());
        }
    }
    if(pJson.isMember("responsible_id"))
    {
        _dirtyFlag[17]=true;
        if(!pJson["responsible_id"].isNull())
        {
            _responsibleId=std::make_shared<int32_t>((int32_t)pJson["responsible_id"].asInt64());
        }
    }
    if(pJson.isMember("cost_object_id"))
    {
        _dirtyFlag[18]=true;
        if(!pJson["cost_object_id"].isNull())
        {
            _costObjectId=std::make_shared<int32_t>((int32_t)pJson["cost_object_id"].asInt64());
        }
    }
    if(pJson.isMember("story_points"))
    {
        _dirtyFlag[19]=true;
        if(!pJson["story_points"].isNull())
        {
            _storyPoints=std::make_shared<int32_t>((int32_t)pJson["story_points"].asInt64());
        }
    }
    if(pJson.isMember("remaining_hours"))
    {
        _dirtyFlag[20]=true;
        if(!pJson["remaining_hours"].isNull())
        {
            _remainingHours=std::make_shared<double>(pJson["remaining_hours"].asDouble());
        }
    }
    if(pJson.isMember("derived_estimated_hours"))
    {
        _dirtyFlag[21]=true;
        if(!pJson["derived_estimated_hours"].isNull())
        {
            _derivedEstimatedHours=std::make_shared<double>(pJson["derived_estimated_hours"].asDouble());
        }
    }
}

void WorkPackageJournals::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 22)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _typeId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _subject=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _description=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _dueDate=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _categoryId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            _statusId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            _assignedToId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            _priorityId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        _dirtyFlag[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            _fixedVersionId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        _dirtyFlag[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[12]].asInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        _dirtyFlag[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            _doneRatio=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[13]].asInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        _dirtyFlag[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            _estimatedHours=std::make_shared<double>(pJson[pMasqueradingVector[14]].asDouble());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        _dirtyFlag[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _startDate=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        _dirtyFlag[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            _parentId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        _dirtyFlag[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            _responsibleId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[17]].asInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        _dirtyFlag[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            _costObjectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[18]].asInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        _dirtyFlag[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            _storyPoints=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[19]].asInt64());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        _dirtyFlag[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            _remainingHours=std::make_shared<double>(pJson[pMasqueradingVector[20]].asDouble());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        _dirtyFlag[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            _derivedEstimatedHours=std::make_shared<double>(pJson[pMasqueradingVector[21]].asDouble());
        }
    }
}
                                                                    
void WorkPackageJournals::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("journal_id"))
    {
        _dirtyFlag[1] = true;
        if(!pJson["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson["journal_id"].asInt64());
        }
    }
    if(pJson.isMember("type_id"))
    {
        _dirtyFlag[2] = true;
        if(!pJson["type_id"].isNull())
        {
            _typeId=std::make_shared<int32_t>((int32_t)pJson["type_id"].asInt64());
        }
    }
    if(pJson.isMember("project_id"))
    {
        _dirtyFlag[3] = true;
        if(!pJson["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson["project_id"].asInt64());
        }
    }
    if(pJson.isMember("subject"))
    {
        _dirtyFlag[4] = true;
        if(!pJson["subject"].isNull())
        {
            _subject=std::make_shared<std::string>(pJson["subject"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        _dirtyFlag[5] = true;
        if(!pJson["description"].isNull())
        {
            _description=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("due_date"))
    {
        _dirtyFlag[6] = true;
        if(!pJson["due_date"].isNull())
        {
            auto daysStr = pJson["due_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _dueDate=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("category_id"))
    {
        _dirtyFlag[7] = true;
        if(!pJson["category_id"].isNull())
        {
            _categoryId=std::make_shared<int32_t>((int32_t)pJson["category_id"].asInt64());
        }
    }
    if(pJson.isMember("status_id"))
    {
        _dirtyFlag[8] = true;
        if(!pJson["status_id"].isNull())
        {
            _statusId=std::make_shared<int32_t>((int32_t)pJson["status_id"].asInt64());
        }
    }
    if(pJson.isMember("assigned_to_id"))
    {
        _dirtyFlag[9] = true;
        if(!pJson["assigned_to_id"].isNull())
        {
            _assignedToId=std::make_shared<int32_t>((int32_t)pJson["assigned_to_id"].asInt64());
        }
    }
    if(pJson.isMember("priority_id"))
    {
        _dirtyFlag[10] = true;
        if(!pJson["priority_id"].isNull())
        {
            _priorityId=std::make_shared<int32_t>((int32_t)pJson["priority_id"].asInt64());
        }
    }
    if(pJson.isMember("fixed_version_id"))
    {
        _dirtyFlag[11] = true;
        if(!pJson["fixed_version_id"].isNull())
        {
            _fixedVersionId=std::make_shared<int32_t>((int32_t)pJson["fixed_version_id"].asInt64());
        }
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[12] = true;
        if(!pJson["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
        }
    }
    if(pJson.isMember("done_ratio"))
    {
        _dirtyFlag[13] = true;
        if(!pJson["done_ratio"].isNull())
        {
            _doneRatio=std::make_shared<int32_t>((int32_t)pJson["done_ratio"].asInt64());
        }
    }
    if(pJson.isMember("estimated_hours"))
    {
        _dirtyFlag[14] = true;
        if(!pJson["estimated_hours"].isNull())
        {
            _estimatedHours=std::make_shared<double>(pJson["estimated_hours"].asDouble());
        }
    }
    if(pJson.isMember("start_date"))
    {
        _dirtyFlag[15] = true;
        if(!pJson["start_date"].isNull())
        {
            auto daysStr = pJson["start_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _startDate=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("parent_id"))
    {
        _dirtyFlag[16] = true;
        if(!pJson["parent_id"].isNull())
        {
            _parentId=std::make_shared<int32_t>((int32_t)pJson["parent_id"].asInt64());
        }
    }
    if(pJson.isMember("responsible_id"))
    {
        _dirtyFlag[17] = true;
        if(!pJson["responsible_id"].isNull())
        {
            _responsibleId=std::make_shared<int32_t>((int32_t)pJson["responsible_id"].asInt64());
        }
    }
    if(pJson.isMember("cost_object_id"))
    {
        _dirtyFlag[18] = true;
        if(!pJson["cost_object_id"].isNull())
        {
            _costObjectId=std::make_shared<int32_t>((int32_t)pJson["cost_object_id"].asInt64());
        }
    }
    if(pJson.isMember("story_points"))
    {
        _dirtyFlag[19] = true;
        if(!pJson["story_points"].isNull())
        {
            _storyPoints=std::make_shared<int32_t>((int32_t)pJson["story_points"].asInt64());
        }
    }
    if(pJson.isMember("remaining_hours"))
    {
        _dirtyFlag[20] = true;
        if(!pJson["remaining_hours"].isNull())
        {
            _remainingHours=std::make_shared<double>(pJson["remaining_hours"].asDouble());
        }
    }
    if(pJson.isMember("derived_estimated_hours"))
    {
        _dirtyFlag[21] = true;
        if(!pJson["derived_estimated_hours"].isNull())
        {
            _derivedEstimatedHours=std::make_shared<double>(pJson["derived_estimated_hours"].asDouble());
        }
    }
}

const int32_t &WorkPackageJournals::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getId() const noexcept
{
    return _id;
}
const typename WorkPackageJournals::PrimaryKeyType & WorkPackageJournals::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &WorkPackageJournals::getValueOfJournalId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journalId)
        return *_journalId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getJournalId() const noexcept
{
    return _journalId;
}
void WorkPackageJournals::setJournalId(const int32_t &pJournalId) noexcept
{
    _journalId = std::make_shared<int32_t>(pJournalId);
    _dirtyFlag[1] = true;
}


const int32_t &WorkPackageJournals::getValueOfTypeId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_typeId)
        return *_typeId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getTypeId() const noexcept
{
    return _typeId;
}
void WorkPackageJournals::setTypeId(const int32_t &pTypeId) noexcept
{
    _typeId = std::make_shared<int32_t>(pTypeId);
    _dirtyFlag[2] = true;
}


const int32_t &WorkPackageJournals::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getProjectId() const noexcept
{
    return _projectId;
}
void WorkPackageJournals::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[3] = true;
}


const std::string &WorkPackageJournals::getValueOfSubject() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_subject)
        return *_subject;
    return defaultValue;
}
const std::shared_ptr<std::string> &WorkPackageJournals::getSubject() const noexcept
{
    return _subject;
}
void WorkPackageJournals::setSubject(const std::string &pSubject) noexcept
{
    _subject = std::make_shared<std::string>(pSubject);
    _dirtyFlag[4] = true;
}
void WorkPackageJournals::setSubject(std::string &&pSubject) noexcept
{
    _subject = std::make_shared<std::string>(std::move(pSubject));
    _dirtyFlag[4] = true;
}


const std::string &WorkPackageJournals::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_description)
        return *_description;
    return defaultValue;
}
const std::shared_ptr<std::string> &WorkPackageJournals::getDescription() const noexcept
{
    return _description;
}
void WorkPackageJournals::setDescription(const std::string &pDescription) noexcept
{
    _description = std::make_shared<std::string>(pDescription);
    _dirtyFlag[5] = true;
}
void WorkPackageJournals::setDescription(std::string &&pDescription) noexcept
{
    _description = std::make_shared<std::string>(std::move(pDescription));
    _dirtyFlag[5] = true;
}


const ::trantor::Date &WorkPackageJournals::getValueOfDueDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_dueDate)
        return *_dueDate;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WorkPackageJournals::getDueDate() const noexcept
{
    return _dueDate;
}
void WorkPackageJournals::setDueDate(const ::trantor::Date &pDueDate) noexcept
{
    _dueDate = std::make_shared<::trantor::Date>(pDueDate.roundDay());
    _dirtyFlag[6] = true;
}


const int32_t &WorkPackageJournals::getValueOfCategoryId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_categoryId)
        return *_categoryId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getCategoryId() const noexcept
{
    return _categoryId;
}
void WorkPackageJournals::setCategoryId(const int32_t &pCategoryId) noexcept
{
    _categoryId = std::make_shared<int32_t>(pCategoryId);
    _dirtyFlag[7] = true;
}


const int32_t &WorkPackageJournals::getValueOfStatusId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_statusId)
        return *_statusId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getStatusId() const noexcept
{
    return _statusId;
}
void WorkPackageJournals::setStatusId(const int32_t &pStatusId) noexcept
{
    _statusId = std::make_shared<int32_t>(pStatusId);
    _dirtyFlag[8] = true;
}


const int32_t &WorkPackageJournals::getValueOfAssignedToId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_assignedToId)
        return *_assignedToId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getAssignedToId() const noexcept
{
    return _assignedToId;
}
void WorkPackageJournals::setAssignedToId(const int32_t &pAssignedToId) noexcept
{
    _assignedToId = std::make_shared<int32_t>(pAssignedToId);
    _dirtyFlag[9] = true;
}


const int32_t &WorkPackageJournals::getValueOfPriorityId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_priorityId)
        return *_priorityId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getPriorityId() const noexcept
{
    return _priorityId;
}
void WorkPackageJournals::setPriorityId(const int32_t &pPriorityId) noexcept
{
    _priorityId = std::make_shared<int32_t>(pPriorityId);
    _dirtyFlag[10] = true;
}


const int32_t &WorkPackageJournals::getValueOfFixedVersionId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_fixedVersionId)
        return *_fixedVersionId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getFixedVersionId() const noexcept
{
    return _fixedVersionId;
}
void WorkPackageJournals::setFixedVersionId(const int32_t &pFixedVersionId) noexcept
{
    _fixedVersionId = std::make_shared<int32_t>(pFixedVersionId);
    _dirtyFlag[11] = true;
}


const int32_t &WorkPackageJournals::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getAuthorId() const noexcept
{
    return _authorId;
}
void WorkPackageJournals::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[12] = true;
}


const int32_t &WorkPackageJournals::getValueOfDoneRatio() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_doneRatio)
        return *_doneRatio;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getDoneRatio() const noexcept
{
    return _doneRatio;
}
void WorkPackageJournals::setDoneRatio(const int32_t &pDoneRatio) noexcept
{
    _doneRatio = std::make_shared<int32_t>(pDoneRatio);
    _dirtyFlag[13] = true;
}


const double &WorkPackageJournals::getValueOfEstimatedHours() const noexcept
{
    const static double defaultValue = double();
    if(_estimatedHours)
        return *_estimatedHours;
    return defaultValue;
}
const std::shared_ptr<double> &WorkPackageJournals::getEstimatedHours() const noexcept
{
    return _estimatedHours;
}
void WorkPackageJournals::setEstimatedHours(const double &pEstimatedHours) noexcept
{
    _estimatedHours = std::make_shared<double>(pEstimatedHours);
    _dirtyFlag[14] = true;
}


const ::trantor::Date &WorkPackageJournals::getValueOfStartDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_startDate)
        return *_startDate;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WorkPackageJournals::getStartDate() const noexcept
{
    return _startDate;
}
void WorkPackageJournals::setStartDate(const ::trantor::Date &pStartDate) noexcept
{
    _startDate = std::make_shared<::trantor::Date>(pStartDate.roundDay());
    _dirtyFlag[15] = true;
}


const int32_t &WorkPackageJournals::getValueOfParentId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_parentId)
        return *_parentId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getParentId() const noexcept
{
    return _parentId;
}
void WorkPackageJournals::setParentId(const int32_t &pParentId) noexcept
{
    _parentId = std::make_shared<int32_t>(pParentId);
    _dirtyFlag[16] = true;
}


const int32_t &WorkPackageJournals::getValueOfResponsibleId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_responsibleId)
        return *_responsibleId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getResponsibleId() const noexcept
{
    return _responsibleId;
}
void WorkPackageJournals::setResponsibleId(const int32_t &pResponsibleId) noexcept
{
    _responsibleId = std::make_shared<int32_t>(pResponsibleId);
    _dirtyFlag[17] = true;
}


const int32_t &WorkPackageJournals::getValueOfCostObjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_costObjectId)
        return *_costObjectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getCostObjectId() const noexcept
{
    return _costObjectId;
}
void WorkPackageJournals::setCostObjectId(const int32_t &pCostObjectId) noexcept
{
    _costObjectId = std::make_shared<int32_t>(pCostObjectId);
    _dirtyFlag[18] = true;
}


const int32_t &WorkPackageJournals::getValueOfStoryPoints() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_storyPoints)
        return *_storyPoints;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WorkPackageJournals::getStoryPoints() const noexcept
{
    return _storyPoints;
}
void WorkPackageJournals::setStoryPoints(const int32_t &pStoryPoints) noexcept
{
    _storyPoints = std::make_shared<int32_t>(pStoryPoints);
    _dirtyFlag[19] = true;
}


const double &WorkPackageJournals::getValueOfRemainingHours() const noexcept
{
    const static double defaultValue = double();
    if(_remainingHours)
        return *_remainingHours;
    return defaultValue;
}
const std::shared_ptr<double> &WorkPackageJournals::getRemainingHours() const noexcept
{
    return _remainingHours;
}
void WorkPackageJournals::setRemainingHours(const double &pRemainingHours) noexcept
{
    _remainingHours = std::make_shared<double>(pRemainingHours);
    _dirtyFlag[20] = true;
}


const double &WorkPackageJournals::getValueOfDerivedEstimatedHours() const noexcept
{
    const static double defaultValue = double();
    if(_derivedEstimatedHours)
        return *_derivedEstimatedHours;
    return defaultValue;
}
const std::shared_ptr<double> &WorkPackageJournals::getDerivedEstimatedHours() const noexcept
{
    return _derivedEstimatedHours;
}
void WorkPackageJournals::setDerivedEstimatedHours(const double &pDerivedEstimatedHours) noexcept
{
    _derivedEstimatedHours = std::make_shared<double>(pDerivedEstimatedHours);
    _dirtyFlag[21] = true;
}


void WorkPackageJournals::updateId(const uint64_t id)
{
}

const std::vector<std::string> &WorkPackageJournals::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journal_id",
        "type_id",
        "project_id",
        "subject",
        "description",
        "due_date",
        "category_id",
        "status_id",
        "assigned_to_id",
        "priority_id",
        "fixed_version_id",
        "author_id",
        "done_ratio",
        "estimated_hours",
        "start_date",
        "parent_id",
        "responsible_id",
        "cost_object_id",
        "story_points",
        "remaining_hours",
        "derived_estimated_hours"
    };
    return _inCols;
}

void WorkPackageJournals::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getTypeId())
        {
            binder << getValueOfTypeId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getSubject())
        {
            binder << getValueOfSubject();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getDueDate())
        {
            binder << getValueOfDueDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCategoryId())
        {
            binder << getValueOfCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getStatusId())
        {
            binder << getValueOfStatusId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getAssignedToId())
        {
            binder << getValueOfAssignedToId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getPriorityId())
        {
            binder << getValueOfPriorityId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getFixedVersionId())
        {
            binder << getValueOfFixedVersionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getDoneRatio())
        {
            binder << getValueOfDoneRatio();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getEstimatedHours())
        {
            binder << getValueOfEstimatedHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getStartDate())
        {
            binder << getValueOfStartDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[16])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[17])
    {
        if(getResponsibleId())
        {
            binder << getValueOfResponsibleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[18])
    {
        if(getCostObjectId())
        {
            binder << getValueOfCostObjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[19])
    {
        if(getStoryPoints())
        {
            binder << getValueOfStoryPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[20])
    {
        if(getRemainingHours())
        {
            binder << getValueOfRemainingHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[21])
    {
        if(getDerivedEstimatedHours())
        {
            binder << getValueOfDerivedEstimatedHours();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> WorkPackageJournals::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void WorkPackageJournals::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getTypeId())
        {
            binder << getValueOfTypeId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getSubject())
        {
            binder << getValueOfSubject();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getDueDate())
        {
            binder << getValueOfDueDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCategoryId())
        {
            binder << getValueOfCategoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getStatusId())
        {
            binder << getValueOfStatusId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getAssignedToId())
        {
            binder << getValueOfAssignedToId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getPriorityId())
        {
            binder << getValueOfPriorityId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getFixedVersionId())
        {
            binder << getValueOfFixedVersionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getDoneRatio())
        {
            binder << getValueOfDoneRatio();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getEstimatedHours())
        {
            binder << getValueOfEstimatedHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getStartDate())
        {
            binder << getValueOfStartDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[16])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[17])
    {
        if(getResponsibleId())
        {
            binder << getValueOfResponsibleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[18])
    {
        if(getCostObjectId())
        {
            binder << getValueOfCostObjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[19])
    {
        if(getStoryPoints())
        {
            binder << getValueOfStoryPoints();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[20])
    {
        if(getRemainingHours())
        {
            binder << getValueOfRemainingHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[21])
    {
        if(getDerivedEstimatedHours())
        {
            binder << getValueOfDerivedEstimatedHours();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value WorkPackageJournals::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getTypeId())
    {
        ret["type_id"]=getValueOfTypeId();
    }
    else
    {
        ret["type_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getDueDate())
    {
        ret["due_date"]=getDueDate()->toDbStringLocal();
    }
    else
    {
        ret["due_date"]=Json::Value();
    }
    if(getCategoryId())
    {
        ret["category_id"]=getValueOfCategoryId();
    }
    else
    {
        ret["category_id"]=Json::Value();
    }
    if(getStatusId())
    {
        ret["status_id"]=getValueOfStatusId();
    }
    else
    {
        ret["status_id"]=Json::Value();
    }
    if(getAssignedToId())
    {
        ret["assigned_to_id"]=getValueOfAssignedToId();
    }
    else
    {
        ret["assigned_to_id"]=Json::Value();
    }
    if(getPriorityId())
    {
        ret["priority_id"]=getValueOfPriorityId();
    }
    else
    {
        ret["priority_id"]=Json::Value();
    }
    if(getFixedVersionId())
    {
        ret["fixed_version_id"]=getValueOfFixedVersionId();
    }
    else
    {
        ret["fixed_version_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getDoneRatio())
    {
        ret["done_ratio"]=getValueOfDoneRatio();
    }
    else
    {
        ret["done_ratio"]=Json::Value();
    }
    if(getEstimatedHours())
    {
        ret["estimated_hours"]=getValueOfEstimatedHours();
    }
    else
    {
        ret["estimated_hours"]=Json::Value();
    }
    if(getStartDate())
    {
        ret["start_date"]=getStartDate()->toDbStringLocal();
    }
    else
    {
        ret["start_date"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getResponsibleId())
    {
        ret["responsible_id"]=getValueOfResponsibleId();
    }
    else
    {
        ret["responsible_id"]=Json::Value();
    }
    if(getCostObjectId())
    {
        ret["cost_object_id"]=getValueOfCostObjectId();
    }
    else
    {
        ret["cost_object_id"]=Json::Value();
    }
    if(getStoryPoints())
    {
        ret["story_points"]=getValueOfStoryPoints();
    }
    else
    {
        ret["story_points"]=Json::Value();
    }
    if(getRemainingHours())
    {
        ret["remaining_hours"]=getValueOfRemainingHours();
    }
    else
    {
        ret["remaining_hours"]=Json::Value();
    }
    if(getDerivedEstimatedHours())
    {
        ret["derived_estimated_hours"]=getValueOfDerivedEstimatedHours();
    }
    else
    {
        ret["derived_estimated_hours"]=Json::Value();
    }
    return ret;
}

Json::Value WorkPackageJournals::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 22)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getJournalId())
            {
                ret[pMasqueradingVector[1]]=getValueOfJournalId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTypeId())
            {
                ret[pMasqueradingVector[2]]=getValueOfTypeId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getProjectId())
            {
                ret[pMasqueradingVector[3]]=getValueOfProjectId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getSubject())
            {
                ret[pMasqueradingVector[4]]=getValueOfSubject();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[5]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getDueDate())
            {
                ret[pMasqueradingVector[6]]=getDueDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCategoryId())
            {
                ret[pMasqueradingVector[7]]=getValueOfCategoryId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getStatusId())
            {
                ret[pMasqueradingVector[8]]=getValueOfStatusId();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getAssignedToId())
            {
                ret[pMasqueradingVector[9]]=getValueOfAssignedToId();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getPriorityId())
            {
                ret[pMasqueradingVector[10]]=getValueOfPriorityId();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getFixedVersionId())
            {
                ret[pMasqueradingVector[11]]=getValueOfFixedVersionId();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getAuthorId())
            {
                ret[pMasqueradingVector[12]]=getValueOfAuthorId();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getDoneRatio())
            {
                ret[pMasqueradingVector[13]]=getValueOfDoneRatio();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getEstimatedHours())
            {
                ret[pMasqueradingVector[14]]=getValueOfEstimatedHours();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getStartDate())
            {
                ret[pMasqueradingVector[15]]=getStartDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getParentId())
            {
                ret[pMasqueradingVector[16]]=getValueOfParentId();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getResponsibleId())
            {
                ret[pMasqueradingVector[17]]=getValueOfResponsibleId();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getCostObjectId())
            {
                ret[pMasqueradingVector[18]]=getValueOfCostObjectId();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getStoryPoints())
            {
                ret[pMasqueradingVector[19]]=getValueOfStoryPoints();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getRemainingHours())
            {
                ret[pMasqueradingVector[20]]=getValueOfRemainingHours();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getDerivedEstimatedHours())
            {
                ret[pMasqueradingVector[21]]=getValueOfDerivedEstimatedHours();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getTypeId())
    {
        ret["type_id"]=getValueOfTypeId();
    }
    else
    {
        ret["type_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getDueDate())
    {
        ret["due_date"]=getDueDate()->toDbStringLocal();
    }
    else
    {
        ret["due_date"]=Json::Value();
    }
    if(getCategoryId())
    {
        ret["category_id"]=getValueOfCategoryId();
    }
    else
    {
        ret["category_id"]=Json::Value();
    }
    if(getStatusId())
    {
        ret["status_id"]=getValueOfStatusId();
    }
    else
    {
        ret["status_id"]=Json::Value();
    }
    if(getAssignedToId())
    {
        ret["assigned_to_id"]=getValueOfAssignedToId();
    }
    else
    {
        ret["assigned_to_id"]=Json::Value();
    }
    if(getPriorityId())
    {
        ret["priority_id"]=getValueOfPriorityId();
    }
    else
    {
        ret["priority_id"]=Json::Value();
    }
    if(getFixedVersionId())
    {
        ret["fixed_version_id"]=getValueOfFixedVersionId();
    }
    else
    {
        ret["fixed_version_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getDoneRatio())
    {
        ret["done_ratio"]=getValueOfDoneRatio();
    }
    else
    {
        ret["done_ratio"]=Json::Value();
    }
    if(getEstimatedHours())
    {
        ret["estimated_hours"]=getValueOfEstimatedHours();
    }
    else
    {
        ret["estimated_hours"]=Json::Value();
    }
    if(getStartDate())
    {
        ret["start_date"]=getStartDate()->toDbStringLocal();
    }
    else
    {
        ret["start_date"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getResponsibleId())
    {
        ret["responsible_id"]=getValueOfResponsibleId();
    }
    else
    {
        ret["responsible_id"]=Json::Value();
    }
    if(getCostObjectId())
    {
        ret["cost_object_id"]=getValueOfCostObjectId();
    }
    else
    {
        ret["cost_object_id"]=Json::Value();
    }
    if(getStoryPoints())
    {
        ret["story_points"]=getValueOfStoryPoints();
    }
    else
    {
        ret["story_points"]=Json::Value();
    }
    if(getRemainingHours())
    {
        ret["remaining_hours"]=getValueOfRemainingHours();
    }
    else
    {
        ret["remaining_hours"]=Json::Value();
    }
    if(getDerivedEstimatedHours())
    {
        ret["derived_estimated_hours"]=getValueOfDerivedEstimatedHours();
    }
    else
    {
        ret["derived_estimated_hours"]=Json::Value();
    }
    return ret;
}

bool WorkPackageJournals::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("journal_id"))
    {
        if(!validJsonOfField(1, "journal_id", pJson["journal_id"], err, true))
            return false;
    }
    else
    {
        err="The journal_id column cannot be null";
        return false;
    }
    if(pJson.isMember("type_id"))
    {
        if(!validJsonOfField(2, "type_id", pJson["type_id"], err, true))
            return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(3, "project_id", pJson["project_id"], err, true))
            return false;
    }
    if(pJson.isMember("subject"))
    {
        if(!validJsonOfField(4, "subject", pJson["subject"], err, true))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(5, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("due_date"))
    {
        if(!validJsonOfField(6, "due_date", pJson["due_date"], err, true))
            return false;
    }
    if(pJson.isMember("category_id"))
    {
        if(!validJsonOfField(7, "category_id", pJson["category_id"], err, true))
            return false;
    }
    if(pJson.isMember("status_id"))
    {
        if(!validJsonOfField(8, "status_id", pJson["status_id"], err, true))
            return false;
    }
    if(pJson.isMember("assigned_to_id"))
    {
        if(!validJsonOfField(9, "assigned_to_id", pJson["assigned_to_id"], err, true))
            return false;
    }
    if(pJson.isMember("priority_id"))
    {
        if(!validJsonOfField(10, "priority_id", pJson["priority_id"], err, true))
            return false;
    }
    if(pJson.isMember("fixed_version_id"))
    {
        if(!validJsonOfField(11, "fixed_version_id", pJson["fixed_version_id"], err, true))
            return false;
    }
    if(pJson.isMember("author_id"))
    {
        if(!validJsonOfField(12, "author_id", pJson["author_id"], err, true))
            return false;
    }
    if(pJson.isMember("done_ratio"))
    {
        if(!validJsonOfField(13, "done_ratio", pJson["done_ratio"], err, true))
            return false;
    }
    if(pJson.isMember("estimated_hours"))
    {
        if(!validJsonOfField(14, "estimated_hours", pJson["estimated_hours"], err, true))
            return false;
    }
    if(pJson.isMember("start_date"))
    {
        if(!validJsonOfField(15, "start_date", pJson["start_date"], err, true))
            return false;
    }
    if(pJson.isMember("parent_id"))
    {
        if(!validJsonOfField(16, "parent_id", pJson["parent_id"], err, true))
            return false;
    }
    if(pJson.isMember("responsible_id"))
    {
        if(!validJsonOfField(17, "responsible_id", pJson["responsible_id"], err, true))
            return false;
    }
    if(pJson.isMember("cost_object_id"))
    {
        if(!validJsonOfField(18, "cost_object_id", pJson["cost_object_id"], err, true))
            return false;
    }
    if(pJson.isMember("story_points"))
    {
        if(!validJsonOfField(19, "story_points", pJson["story_points"], err, true))
            return false;
    }
    if(pJson.isMember("remaining_hours"))
    {
        if(!validJsonOfField(20, "remaining_hours", pJson["remaining_hours"], err, true))
            return false;
    }
    if(pJson.isMember("derived_estimated_hours"))
    {
        if(!validJsonOfField(21, "derived_estimated_hours", pJson["derived_estimated_hours"], err, true))
            return false;
    }
    return true;
}
bool WorkPackageJournals::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                             const std::vector<std::string> &pMasqueradingVector,
                                                             std::string &err)
{
    if(pMasqueradingVector.size() != 22)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
    }
    return true;
}
bool WorkPackageJournals::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("journal_id"))
    {
        if(!validJsonOfField(1, "journal_id", pJson["journal_id"], err, false))
            return false;
    }
    if(pJson.isMember("type_id"))
    {
        if(!validJsonOfField(2, "type_id", pJson["type_id"], err, false))
            return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(3, "project_id", pJson["project_id"], err, false))
            return false;
    }
    if(pJson.isMember("subject"))
    {
        if(!validJsonOfField(4, "subject", pJson["subject"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(5, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("due_date"))
    {
        if(!validJsonOfField(6, "due_date", pJson["due_date"], err, false))
            return false;
    }
    if(pJson.isMember("category_id"))
    {
        if(!validJsonOfField(7, "category_id", pJson["category_id"], err, false))
            return false;
    }
    if(pJson.isMember("status_id"))
    {
        if(!validJsonOfField(8, "status_id", pJson["status_id"], err, false))
            return false;
    }
    if(pJson.isMember("assigned_to_id"))
    {
        if(!validJsonOfField(9, "assigned_to_id", pJson["assigned_to_id"], err, false))
            return false;
    }
    if(pJson.isMember("priority_id"))
    {
        if(!validJsonOfField(10, "priority_id", pJson["priority_id"], err, false))
            return false;
    }
    if(pJson.isMember("fixed_version_id"))
    {
        if(!validJsonOfField(11, "fixed_version_id", pJson["fixed_version_id"], err, false))
            return false;
    }
    if(pJson.isMember("author_id"))
    {
        if(!validJsonOfField(12, "author_id", pJson["author_id"], err, false))
            return false;
    }
    if(pJson.isMember("done_ratio"))
    {
        if(!validJsonOfField(13, "done_ratio", pJson["done_ratio"], err, false))
            return false;
    }
    if(pJson.isMember("estimated_hours"))
    {
        if(!validJsonOfField(14, "estimated_hours", pJson["estimated_hours"], err, false))
            return false;
    }
    if(pJson.isMember("start_date"))
    {
        if(!validJsonOfField(15, "start_date", pJson["start_date"], err, false))
            return false;
    }
    if(pJson.isMember("parent_id"))
    {
        if(!validJsonOfField(16, "parent_id", pJson["parent_id"], err, false))
            return false;
    }
    if(pJson.isMember("responsible_id"))
    {
        if(!validJsonOfField(17, "responsible_id", pJson["responsible_id"], err, false))
            return false;
    }
    if(pJson.isMember("cost_object_id"))
    {
        if(!validJsonOfField(18, "cost_object_id", pJson["cost_object_id"], err, false))
            return false;
    }
    if(pJson.isMember("story_points"))
    {
        if(!validJsonOfField(19, "story_points", pJson["story_points"], err, false))
            return false;
    }
    if(pJson.isMember("remaining_hours"))
    {
        if(!validJsonOfField(20, "remaining_hours", pJson["remaining_hours"], err, false))
            return false;
    }
    if(pJson.isMember("derived_estimated_hours"))
    {
        if(!validJsonOfField(21, "derived_estimated_hours", pJson["derived_estimated_hours"], err, false))
            return false;
    }
    return true;
}
bool WorkPackageJournals::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 22)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    return true;
}
bool WorkPackageJournals::validJsonOfField(size_t index,
                                           const std::string &fieldName,
                                           const Json::Value &pJson, 
                                           std::string &err, 
                                           bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 5:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 6:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 7:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 9:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 11:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 14:
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 15:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 16:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 17:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 18:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 19:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 20:
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 21:
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
