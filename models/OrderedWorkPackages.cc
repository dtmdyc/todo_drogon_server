/**
 *
 *  OrderedWorkPackages.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "OrderedWorkPackages.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject6;

const std::string OrderedWorkPackages::Cols::_id = "id";
const std::string OrderedWorkPackages::Cols::_position = "position";
const std::string OrderedWorkPackages::Cols::_query_id = "query_id";
const std::string OrderedWorkPackages::Cols::_work_package_id = "work_package_id";
const std::string OrderedWorkPackages::primaryKeyName = "id";
const bool OrderedWorkPackages::hasPrimaryKey = true;
const std::string OrderedWorkPackages::tableName = "ordered_work_packages";

const std::vector<typename OrderedWorkPackages::MetaData> OrderedWorkPackages::_metaData={
{"id","int64_t","bigint",8,1,1,1},
{"position","int32_t","integer",4,0,0,1},
{"query_id","int32_t","integer",4,0,0,0},
{"work_package_id","int32_t","integer",4,0,0,0}
};
const std::string &OrderedWorkPackages::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
OrderedWorkPackages::OrderedWorkPackages(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["position"].isNull())
        {
            _position=std::make_shared<int32_t>(r["position"].as<int32_t>());
        }
        if(!r["query_id"].isNull())
        {
            _queryId=std::make_shared<int32_t>(r["query_id"].as<int32_t>());
        }
        if(!r["work_package_id"].isNull())
        {
            _workPackageId=std::make_shared<int32_t>(r["work_package_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _position=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _queryId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _workPackageId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

OrderedWorkPackages::OrderedWorkPackages(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _position=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _queryId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _workPackageId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
    }
}

OrderedWorkPackages::OrderedWorkPackages(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("position"))
    {
        _position=std::make_shared<int32_t>((int32_t)pJson["position"].asInt64());
    }
    if(pJson.isMember("query_id"))
    {
        _queryId=std::make_shared<int32_t>((int32_t)pJson["query_id"].asInt64());
    }
    if(pJson.isMember("work_package_id"))
    {
        _workPackageId=std::make_shared<int32_t>((int32_t)pJson["work_package_id"].asInt64());
    }
}

void OrderedWorkPackages::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        _position=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        _queryId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        _workPackageId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
    }
}
                                                                    
void OrderedWorkPackages::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("position"))
    {
        _dirtyFlag[1] = true;
        _position=std::make_shared<int32_t>((int32_t)pJson["position"].asInt64());
    }
    if(pJson.isMember("query_id"))
    {
        _dirtyFlag[2] = true;
        _queryId=std::make_shared<int32_t>((int32_t)pJson["query_id"].asInt64());
    }
    if(pJson.isMember("work_package_id"))
    {
        _dirtyFlag[3] = true;
        _workPackageId=std::make_shared<int32_t>((int32_t)pJson["work_package_id"].asInt64());
    }
}

const int64_t &OrderedWorkPackages::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int64_t> &OrderedWorkPackages::getId() const noexcept
{
    return _id;
}
const typename OrderedWorkPackages::PrimaryKeyType & OrderedWorkPackages::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &OrderedWorkPackages::getValueOfPosition() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_position)
        return *_position;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OrderedWorkPackages::getPosition() const noexcept
{
    return _position;
}
void OrderedWorkPackages::setPosition(const int32_t &pPosition) noexcept
{
    _position = std::make_shared<int32_t>(pPosition);
    _dirtyFlag[1] = true;
}


const int32_t &OrderedWorkPackages::getValueOfQueryId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_queryId)
        return *_queryId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OrderedWorkPackages::getQueryId() const noexcept
{
    return _queryId;
}
void OrderedWorkPackages::setQueryId(const int32_t &pQueryId) noexcept
{
    _queryId = std::make_shared<int32_t>(pQueryId);
    _dirtyFlag[2] = true;
}


const int32_t &OrderedWorkPackages::getValueOfWorkPackageId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_workPackageId)
        return *_workPackageId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OrderedWorkPackages::getWorkPackageId() const noexcept
{
    return _workPackageId;
}
void OrderedWorkPackages::setWorkPackageId(const int32_t &pWorkPackageId) noexcept
{
    _workPackageId = std::make_shared<int32_t>(pWorkPackageId);
    _dirtyFlag[3] = true;
}


void OrderedWorkPackages::updateId(const uint64_t id)
{
}

const std::vector<std::string> &OrderedWorkPackages::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "position",
        "query_id",
        "work_package_id"
    };
    return _inCols;
}

void OrderedWorkPackages::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getPosition())
    {
        binder << getValueOfPosition();
    }
    else
    {
        binder << nullptr;
    }
    if(getQueryId())
    {
        binder << getValueOfQueryId();
    }
    else
    {
        binder << nullptr;
    }
    if(getWorkPackageId())
    {
        binder << getValueOfWorkPackageId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> OrderedWorkPackages::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void OrderedWorkPackages::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getPosition())
        {
            binder << getValueOfPosition();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getQueryId())
        {
            binder << getValueOfQueryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getWorkPackageId())
        {
            binder << getValueOfWorkPackageId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value OrderedWorkPackages::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    if(getQueryId())
    {
        ret["query_id"]=getValueOfQueryId();
    }
    else
    {
        ret["query_id"]=Json::Value();
    }
    if(getWorkPackageId())
    {
        ret["work_package_id"]=getValueOfWorkPackageId();
    }
    else
    {
        ret["work_package_id"]=Json::Value();
    }
    return ret;
}

Json::Value OrderedWorkPackages::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPosition())
            {
                ret[pMasqueradingVector[1]]=getValueOfPosition();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getQueryId())
            {
                ret[pMasqueradingVector[2]]=getValueOfQueryId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getWorkPackageId())
            {
                ret[pMasqueradingVector[3]]=getValueOfWorkPackageId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPosition())
    {
        ret["position"]=getValueOfPosition();
    }
    else
    {
        ret["position"]=Json::Value();
    }
    if(getQueryId())
    {
        ret["query_id"]=getValueOfQueryId();
    }
    else
    {
        ret["query_id"]=Json::Value();
    }
    if(getWorkPackageId())
    {
        ret["work_package_id"]=getValueOfWorkPackageId();
    }
    else
    {
        ret["work_package_id"]=Json::Value();
    }
    return ret;
}

bool OrderedWorkPackages::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("position"))
    {
        if(!validJsonOfField(1, "position", pJson["position"], err, true))
            return false;
    }
    else
    {
        err="The position column cannot be null";
        return false;
    }
    if(pJson.isMember("query_id"))
    {
        if(!validJsonOfField(2, "query_id", pJson["query_id"], err, true))
            return false;
    }
    if(pJson.isMember("work_package_id"))
    {
        if(!validJsonOfField(3, "work_package_id", pJson["work_package_id"], err, true))
            return false;
    }
    return true;
}
bool OrderedWorkPackages::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                             const std::vector<std::string> &pMasqueradingVector,
                                                             std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    return true;
}
bool OrderedWorkPackages::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("position"))
    {
        if(!validJsonOfField(1, "position", pJson["position"], err, false))
            return false;
    }
    if(pJson.isMember("query_id"))
    {
        if(!validJsonOfField(2, "query_id", pJson["query_id"], err, false))
            return false;
    }
    if(pJson.isMember("work_package_id"))
    {
        if(!validJsonOfField(3, "work_package_id", pJson["work_package_id"], err, false))
            return false;
    }
    return true;
}
bool OrderedWorkPackages::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    return true;
}
bool OrderedWorkPackages::validJsonOfField(size_t index,
                                           const std::string &fieldName,
                                           const Json::Value &pJson, 
                                           std::string &err, 
                                           bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 2:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 3:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
