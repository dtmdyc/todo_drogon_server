/**
 *
 *  Users.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Users.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Users::Cols::_id = "id";
const std::string Users::Cols::_login = "login";
const std::string Users::Cols::_firstname = "firstname";
const std::string Users::Cols::_lastname = "lastname";
const std::string Users::Cols::_mail = "mail";
const std::string Users::Cols::_admin = "admin";
const std::string Users::Cols::_status = "status";
const std::string Users::Cols::_last_login_on = "last_login_on";
const std::string Users::Cols::_language = "language";
const std::string Users::Cols::_auth_source_id = "auth_source_id";
const std::string Users::Cols::_created_on = "created_on";
const std::string Users::Cols::_updated_on = "updated_on";
const std::string Users::Cols::_type = "type";
const std::string Users::Cols::_identity_url = "identity_url";
const std::string Users::Cols::_mail_notification = "mail_notification";
const std::string Users::Cols::_first_login = "first_login";
const std::string Users::Cols::_force_password_change = "force_password_change";
const std::string Users::Cols::_failed_login_count = "failed_login_count";
const std::string Users::Cols::_last_failed_login_on = "last_failed_login_on";
const std::string Users::Cols::_consented_at = "consented_at";
const std::string Users::primaryKeyName = "id";
const bool Users::hasPrimaryKey = true;
const std::string Users::tableName = "users";

const std::vector<typename Users::MetaData> Users::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"login","std::string","character varying",256,0,0,1},
{"firstname","std::string","character varying",30,0,0,1},
{"lastname","std::string","character varying",30,0,0,1},
{"mail","std::string","character varying",60,0,0,1},
{"admin","bool","boolean",1,0,0,1},
{"status","int32_t","integer",4,0,0,1},
{"last_login_on","::trantor::Date","timestamp without time zone",0,0,0,0},
{"language","std::string","character varying",5,0,0,0},
{"auth_source_id","int32_t","integer",4,0,0,0},
{"created_on","::trantor::Date","timestamp without time zone",0,0,0,0},
{"updated_on","::trantor::Date","timestamp without time zone",0,0,0,0},
{"type","std::string","character varying",0,0,0,0},
{"identity_url","std::string","character varying",0,0,0,0},
{"mail_notification","std::string","character varying",0,0,0,1},
{"first_login","bool","boolean",1,0,0,1},
{"force_password_change","bool","boolean",1,0,0,0},
{"failed_login_count","int32_t","integer",4,0,0,0},
{"last_failed_login_on","::trantor::Date","timestamp without time zone",0,0,0,0},
{"consented_at","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &Users::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Users::Users(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["login"].isNull())
        {
            _login=std::make_shared<std::string>(r["login"].as<std::string>());
        }
        if(!r["firstname"].isNull())
        {
            _firstname=std::make_shared<std::string>(r["firstname"].as<std::string>());
        }
        if(!r["lastname"].isNull())
        {
            _lastname=std::make_shared<std::string>(r["lastname"].as<std::string>());
        }
        if(!r["mail"].isNull())
        {
            _mail=std::make_shared<std::string>(r["mail"].as<std::string>());
        }
        if(!r["admin"].isNull())
        {
            _admin=std::make_shared<bool>(r["admin"].as<bool>());
        }
        if(!r["status"].isNull())
        {
            _status=std::make_shared<int32_t>(r["status"].as<int32_t>());
        }
        if(!r["last_login_on"].isNull())
        {
            auto timeStr = r["last_login_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _lastLoginOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["language"].isNull())
        {
            _language=std::make_shared<std::string>(r["language"].as<std::string>());
        }
        if(!r["auth_source_id"].isNull())
        {
            _authSourceId=std::make_shared<int32_t>(r["auth_source_id"].as<int32_t>());
        }
        if(!r["created_on"].isNull())
        {
            auto timeStr = r["created_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_on"].isNull())
        {
            auto timeStr = r["updated_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["identity_url"].isNull())
        {
            _identityUrl=std::make_shared<std::string>(r["identity_url"].as<std::string>());
        }
        if(!r["mail_notification"].isNull())
        {
            _mailNotification=std::make_shared<std::string>(r["mail_notification"].as<std::string>());
        }
        if(!r["first_login"].isNull())
        {
            _firstLogin=std::make_shared<bool>(r["first_login"].as<bool>());
        }
        if(!r["force_password_change"].isNull())
        {
            _forcePasswordChange=std::make_shared<bool>(r["force_password_change"].as<bool>());
        }
        if(!r["failed_login_count"].isNull())
        {
            _failedLoginCount=std::make_shared<int32_t>(r["failed_login_count"].as<int32_t>());
        }
        if(!r["last_failed_login_on"].isNull())
        {
            auto timeStr = r["last_failed_login_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _lastFailedLoginOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["consented_at"].isNull())
        {
            auto timeStr = r["consented_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _consentedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int32_t &Users::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Users::getId() const noexcept
{
    return _id;
}
const typename Users::PrimaryKeyType & Users::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &Users::getValueOfLogin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_login)
        return *_login;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getLogin() const noexcept
{
    return _login;
}
void Users::setLogin(const std::string &pLogin) noexcept
{
    _login = std::make_shared<std::string>(pLogin);
    _dirtyFlag[1] = true;
}
void Users::setLogin(std::string &&pLogin) noexcept
{
    _login = std::make_shared<std::string>(std::move(pLogin));
    _dirtyFlag[1] = true;
}


const std::string &Users::getValueOfFirstname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_firstname)
        return *_firstname;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getFirstname() const noexcept
{
    return _firstname;
}
void Users::setFirstname(const std::string &pFirstname) noexcept
{
    _firstname = std::make_shared<std::string>(pFirstname);
    _dirtyFlag[2] = true;
}
void Users::setFirstname(std::string &&pFirstname) noexcept
{
    _firstname = std::make_shared<std::string>(std::move(pFirstname));
    _dirtyFlag[2] = true;
}


const std::string &Users::getValueOfLastname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_lastname)
        return *_lastname;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getLastname() const noexcept
{
    return _lastname;
}
void Users::setLastname(const std::string &pLastname) noexcept
{
    _lastname = std::make_shared<std::string>(pLastname);
    _dirtyFlag[3] = true;
}
void Users::setLastname(std::string &&pLastname) noexcept
{
    _lastname = std::make_shared<std::string>(std::move(pLastname));
    _dirtyFlag[3] = true;
}


const std::string &Users::getValueOfMail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_mail)
        return *_mail;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getMail() const noexcept
{
    return _mail;
}
void Users::setMail(const std::string &pMail) noexcept
{
    _mail = std::make_shared<std::string>(pMail);
    _dirtyFlag[4] = true;
}
void Users::setMail(std::string &&pMail) noexcept
{
    _mail = std::make_shared<std::string>(std::move(pMail));
    _dirtyFlag[4] = true;
}


const bool &Users::getValueOfAdmin() const noexcept
{
    const static bool defaultValue = bool();
    if(_admin)
        return *_admin;
    return defaultValue;
}
const std::shared_ptr<bool> &Users::getAdmin() const noexcept
{
    return _admin;
}
void Users::setAdmin(const bool &pAdmin) noexcept
{
    _admin = std::make_shared<bool>(pAdmin);
    _dirtyFlag[5] = true;
}


const int32_t &Users::getValueOfStatus() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_status)
        return *_status;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Users::getStatus() const noexcept
{
    return _status;
}
void Users::setStatus(const int32_t &pStatus) noexcept
{
    _status = std::make_shared<int32_t>(pStatus);
    _dirtyFlag[6] = true;
}


const ::trantor::Date &Users::getValueOfLastLoginOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_lastLoginOn)
        return *_lastLoginOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getLastLoginOn() const noexcept
{
    return _lastLoginOn;
}
void Users::setLastLoginOn(const ::trantor::Date &pLastLoginOn) noexcept
{
    _lastLoginOn = std::make_shared<::trantor::Date>(pLastLoginOn);
    _dirtyFlag[7] = true;
}


const std::string &Users::getValueOfLanguage() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_language)
        return *_language;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getLanguage() const noexcept
{
    return _language;
}
void Users::setLanguage(const std::string &pLanguage) noexcept
{
    _language = std::make_shared<std::string>(pLanguage);
    _dirtyFlag[8] = true;
}
void Users::setLanguage(std::string &&pLanguage) noexcept
{
    _language = std::make_shared<std::string>(std::move(pLanguage));
    _dirtyFlag[8] = true;
}


const int32_t &Users::getValueOfAuthSourceId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authSourceId)
        return *_authSourceId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Users::getAuthSourceId() const noexcept
{
    return _authSourceId;
}
void Users::setAuthSourceId(const int32_t &pAuthSourceId) noexcept
{
    _authSourceId = std::make_shared<int32_t>(pAuthSourceId);
    _dirtyFlag[9] = true;
}


const ::trantor::Date &Users::getValueOfCreatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdOn)
        return *_createdOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getCreatedOn() const noexcept
{
    return _createdOn;
}
void Users::setCreatedOn(const ::trantor::Date &pCreatedOn) noexcept
{
    _createdOn = std::make_shared<::trantor::Date>(pCreatedOn);
    _dirtyFlag[10] = true;
}


const ::trantor::Date &Users::getValueOfUpdatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedOn)
        return *_updatedOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getUpdatedOn() const noexcept
{
    return _updatedOn;
}
void Users::setUpdatedOn(const ::trantor::Date &pUpdatedOn) noexcept
{
    _updatedOn = std::make_shared<::trantor::Date>(pUpdatedOn);
    _dirtyFlag[11] = true;
}


const std::string &Users::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getType() const noexcept
{
    return _type;
}
void Users::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[12] = true;
}
void Users::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[12] = true;
}


const std::string &Users::getValueOfIdentityUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_identityUrl)
        return *_identityUrl;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getIdentityUrl() const noexcept
{
    return _identityUrl;
}
void Users::setIdentityUrl(const std::string &pIdentityUrl) noexcept
{
    _identityUrl = std::make_shared<std::string>(pIdentityUrl);
    _dirtyFlag[13] = true;
}
void Users::setIdentityUrl(std::string &&pIdentityUrl) noexcept
{
    _identityUrl = std::make_shared<std::string>(std::move(pIdentityUrl));
    _dirtyFlag[13] = true;
}


const std::string &Users::getValueOfMailNotification() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_mailNotification)
        return *_mailNotification;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getMailNotification() const noexcept
{
    return _mailNotification;
}
void Users::setMailNotification(const std::string &pMailNotification) noexcept
{
    _mailNotification = std::make_shared<std::string>(pMailNotification);
    _dirtyFlag[14] = true;
}
void Users::setMailNotification(std::string &&pMailNotification) noexcept
{
    _mailNotification = std::make_shared<std::string>(std::move(pMailNotification));
    _dirtyFlag[14] = true;
}


const bool &Users::getValueOfFirstLogin() const noexcept
{
    const static bool defaultValue = bool();
    if(_firstLogin)
        return *_firstLogin;
    return defaultValue;
}
const std::shared_ptr<bool> &Users::getFirstLogin() const noexcept
{
    return _firstLogin;
}
void Users::setFirstLogin(const bool &pFirstLogin) noexcept
{
    _firstLogin = std::make_shared<bool>(pFirstLogin);
    _dirtyFlag[15] = true;
}


const bool &Users::getValueOfForcePasswordChange() const noexcept
{
    const static bool defaultValue = bool();
    if(_forcePasswordChange)
        return *_forcePasswordChange;
    return defaultValue;
}
const std::shared_ptr<bool> &Users::getForcePasswordChange() const noexcept
{
    return _forcePasswordChange;
}
void Users::setForcePasswordChange(const bool &pForcePasswordChange) noexcept
{
    _forcePasswordChange = std::make_shared<bool>(pForcePasswordChange);
    _dirtyFlag[16] = true;
}


const int32_t &Users::getValueOfFailedLoginCount() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_failedLoginCount)
        return *_failedLoginCount;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Users::getFailedLoginCount() const noexcept
{
    return _failedLoginCount;
}
void Users::setFailedLoginCount(const int32_t &pFailedLoginCount) noexcept
{
    _failedLoginCount = std::make_shared<int32_t>(pFailedLoginCount);
    _dirtyFlag[17] = true;
}


const ::trantor::Date &Users::getValueOfLastFailedLoginOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_lastFailedLoginOn)
        return *_lastFailedLoginOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getLastFailedLoginOn() const noexcept
{
    return _lastFailedLoginOn;
}
void Users::setLastFailedLoginOn(const ::trantor::Date &pLastFailedLoginOn) noexcept
{
    _lastFailedLoginOn = std::make_shared<::trantor::Date>(pLastFailedLoginOn);
    _dirtyFlag[18] = true;
}


const ::trantor::Date &Users::getValueOfConsentedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_consentedAt)
        return *_consentedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getConsentedAt() const noexcept
{
    return _consentedAt;
}
void Users::setConsentedAt(const ::trantor::Date &pConsentedAt) noexcept
{
    _consentedAt = std::make_shared<::trantor::Date>(pConsentedAt);
    _dirtyFlag[19] = true;
}


void Users::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Users::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "login",
        "firstname",
        "lastname",
        "mail",
        "admin",
        "status",
        "last_login_on",
        "language",
        "auth_source_id",
        "created_on",
        "updated_on",
        "type",
        "identity_url",
        "mail_notification",
        "first_login",
        "force_password_change",
        "failed_login_count",
        "last_failed_login_on",
        "consented_at"
    };
    return _inCols;
}

void Users::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getLogin())
    {
        binder << getValueOfLogin();
    }
    else
    {
        binder << nullptr;
    }
    if(getFirstname())
    {
        binder << getValueOfFirstname();
    }
    else
    {
        binder << nullptr;
    }
    if(getLastname())
    {
        binder << getValueOfLastname();
    }
    else
    {
        binder << nullptr;
    }
    if(getMail())
    {
        binder << getValueOfMail();
    }
    else
    {
        binder << nullptr;
    }
    if(getAdmin())
    {
        binder << getValueOfAdmin();
    }
    else
    {
        binder << nullptr;
    }
    if(getStatus())
    {
        binder << getValueOfStatus();
    }
    else
    {
        binder << nullptr;
    }
    if(getLastLoginOn())
    {
        binder << getValueOfLastLoginOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getLanguage())
    {
        binder << getValueOfLanguage();
    }
    else
    {
        binder << nullptr;
    }
    if(getAuthSourceId())
    {
        binder << getValueOfAuthSourceId();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedOn())
    {
        binder << getValueOfCreatedOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedOn())
    {
        binder << getValueOfUpdatedOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getType())
    {
        binder << getValueOfType();
    }
    else
    {
        binder << nullptr;
    }
    if(getIdentityUrl())
    {
        binder << getValueOfIdentityUrl();
    }
    else
    {
        binder << nullptr;
    }
    if(getMailNotification())
    {
        binder << getValueOfMailNotification();
    }
    else
    {
        binder << nullptr;
    }
    if(getFirstLogin())
    {
        binder << getValueOfFirstLogin();
    }
    else
    {
        binder << nullptr;
    }
    if(getForcePasswordChange())
    {
        binder << getValueOfForcePasswordChange();
    }
    else
    {
        binder << nullptr;
    }
    if(getFailedLoginCount())
    {
        binder << getValueOfFailedLoginCount();
    }
    else
    {
        binder << nullptr;
    }
    if(getLastFailedLoginOn())
    {
        binder << getValueOfLastFailedLoginOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getConsentedAt())
    {
        binder << getValueOfConsentedAt();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Users::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Users::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getLogin())
        {
            binder << getValueOfLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getMail())
        {
            binder << getValueOfMail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getAdmin())
        {
            binder << getValueOfAdmin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getLastLoginOn())
        {
            binder << getValueOfLastLoginOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getLanguage())
        {
            binder << getValueOfLanguage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getAuthSourceId())
        {
            binder << getValueOfAuthSourceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getCreatedOn())
        {
            binder << getValueOfCreatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getUpdatedOn())
        {
            binder << getValueOfUpdatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getIdentityUrl())
        {
            binder << getValueOfIdentityUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getMailNotification())
        {
            binder << getValueOfMailNotification();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getFirstLogin())
        {
            binder << getValueOfFirstLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[16])
    {
        if(getForcePasswordChange())
        {
            binder << getValueOfForcePasswordChange();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[17])
    {
        if(getFailedLoginCount())
        {
            binder << getValueOfFailedLoginCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[18])
    {
        if(getLastFailedLoginOn())
        {
            binder << getValueOfLastFailedLoginOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[19])
    {
        if(getConsentedAt())
        {
            binder << getValueOfConsentedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Users::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getLogin())
    {
        ret["login"]=getValueOfLogin();
    }
    else
    {
        ret["login"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["firstname"]=getValueOfFirstname();
    }
    else
    {
        ret["firstname"]=Json::Value();
    }
    if(getLastname())
    {
        ret["lastname"]=getValueOfLastname();
    }
    else
    {
        ret["lastname"]=Json::Value();
    }
    if(getMail())
    {
        ret["mail"]=getValueOfMail();
    }
    else
    {
        ret["mail"]=Json::Value();
    }
    if(getAdmin())
    {
        ret["admin"]=getValueOfAdmin();
    }
    else
    {
        ret["admin"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getLastLoginOn())
    {
        ret["last_login_on"]=getLastLoginOn()->toDbStringLocal();
    }
    else
    {
        ret["last_login_on"]=Json::Value();
    }
    if(getLanguage())
    {
        ret["language"]=getValueOfLanguage();
    }
    else
    {
        ret["language"]=Json::Value();
    }
    if(getAuthSourceId())
    {
        ret["auth_source_id"]=getValueOfAuthSourceId();
    }
    else
    {
        ret["auth_source_id"]=Json::Value();
    }
    if(getCreatedOn())
    {
        ret["created_on"]=getCreatedOn()->toDbStringLocal();
    }
    else
    {
        ret["created_on"]=Json::Value();
    }
    if(getUpdatedOn())
    {
        ret["updated_on"]=getUpdatedOn()->toDbStringLocal();
    }
    else
    {
        ret["updated_on"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getIdentityUrl())
    {
        ret["identity_url"]=getValueOfIdentityUrl();
    }
    else
    {
        ret["identity_url"]=Json::Value();
    }
    if(getMailNotification())
    {
        ret["mail_notification"]=getValueOfMailNotification();
    }
    else
    {
        ret["mail_notification"]=Json::Value();
    }
    if(getFirstLogin())
    {
        ret["first_login"]=getValueOfFirstLogin();
    }
    else
    {
        ret["first_login"]=Json::Value();
    }
    if(getForcePasswordChange())
    {
        ret["force_password_change"]=getValueOfForcePasswordChange();
    }
    else
    {
        ret["force_password_change"]=Json::Value();
    }
    if(getFailedLoginCount())
    {
        ret["failed_login_count"]=getValueOfFailedLoginCount();
    }
    else
    {
        ret["failed_login_count"]=Json::Value();
    }
    if(getLastFailedLoginOn())
    {
        ret["last_failed_login_on"]=getLastFailedLoginOn()->toDbStringLocal();
    }
    else
    {
        ret["last_failed_login_on"]=Json::Value();
    }
    if(getConsentedAt())
    {
        ret["consented_at"]=getConsentedAt()->toDbStringLocal();
    }
    else
    {
        ret["consented_at"]=Json::Value();
    }
    return ret;
}
