/**
 *
 *  CostTypes.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject4 
{
class CostTypes
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _name;
        static const std::string _unit;
        static const std::string _unit_plural;
        static const std::string _default;
        static const std::string _deleted_at;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int32_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;
    explicit CostTypes(const Row &r) noexcept;
    CostTypes() = default;
    
    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;

    /**  For column name  */
    ///Get the value of the column name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;
    ///Set the value of the column name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;

    /**  For column unit  */
    ///Get the value of the column unit, returns the default value if the column is null
    const std::string &getValueOfUnit() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUnit() const noexcept;
    ///Set the value of the column unit
    void setUnit(const std::string &pUnit) noexcept;
    void setUnit(std::string &&pUnit) noexcept;

    /**  For column unit_plural  */
    ///Get the value of the column unit_plural, returns the default value if the column is null
    const std::string &getValueOfUnitPlural() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUnitPlural() const noexcept;
    ///Set the value of the column unit_plural
    void setUnitPlural(const std::string &pUnitPlural) noexcept;
    void setUnitPlural(std::string &&pUnitPlural) noexcept;

    /**  For column default  */
    ///Get the value of the column default, returns the default value if the column is null
    const bool &getValueOfDefault() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getDefault() const noexcept;
    ///Set the value of the column default
    void setDefault(const bool &pDefault) noexcept;

    /**  For column deleted_at  */
    ///Get the value of the column deleted_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfDeletedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getDeletedAt() const noexcept;
    ///Set the value of the column deleted_at
    void setDeletedAt(const ::trantor::Date &pDeletedAt) noexcept;


    static size_t getColumnNumber() noexcept {  return 6;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;

  private:
    friend Mapper<CostTypes>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> _id;
    std::shared_ptr<std::string> _name;
    std::shared_ptr<std::string> _unit;
    std::shared_ptr<std::string> _unitPlural;
    std::shared_ptr<bool> _default;
    std::shared_ptr<::trantor::Date> _deletedAt;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[6]={ false };
};
} // namespace openproject4
} // namespace drogon_model
