/**
 *
 *  TimeEntries.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject6 
{
class TimeEntries
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _project_id;
        static const std::string _user_id;
        static const std::string _work_package_id;
        static const std::string _hours;
        static const std::string _comments;
        static const std::string _activity_id;
        static const std::string _spent_on;
        static const std::string _tyear;
        static const std::string _tmonth;
        static const std::string _tweek;
        static const std::string _created_on;
        static const std::string _updated_on;
        static const std::string _overridden_costs;
        static const std::string _costs;
        static const std::string _rate_id;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int32_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit TimeEntries(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit TimeEntries(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    TimeEntries(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    TimeEntries() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    bool validateMasqueradedJsonForCreation(const Json::Value &,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err);
    bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;

    /**  For column project_id  */
    ///Get the value of the column project_id, returns the default value if the column is null
    const int32_t &getValueOfProjectId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getProjectId() const noexcept;
    ///Set the value of the column project_id
    void setProjectId(const int32_t &pProjectId) noexcept;

    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const int32_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getUserId() const noexcept;
    ///Set the value of the column user_id
    void setUserId(const int32_t &pUserId) noexcept;

    /**  For column work_package_id  */
    ///Get the value of the column work_package_id, returns the default value if the column is null
    const int32_t &getValueOfWorkPackageId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getWorkPackageId() const noexcept;
    ///Set the value of the column work_package_id
    void setWorkPackageId(const int32_t &pWorkPackageId) noexcept;

    /**  For column hours  */
    ///Get the value of the column hours, returns the default value if the column is null
    const double &getValueOfHours() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getHours() const noexcept;
    ///Set the value of the column hours
    void setHours(const double &pHours) noexcept;

    /**  For column comments  */
    ///Get the value of the column comments, returns the default value if the column is null
    const std::string &getValueOfComments() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComments() const noexcept;
    ///Set the value of the column comments
    void setComments(const std::string &pComments) noexcept;
    void setComments(std::string &&pComments) noexcept;

    /**  For column activity_id  */
    ///Get the value of the column activity_id, returns the default value if the column is null
    const int32_t &getValueOfActivityId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getActivityId() const noexcept;
    ///Set the value of the column activity_id
    void setActivityId(const int32_t &pActivityId) noexcept;

    /**  For column spent_on  */
    ///Get the value of the column spent_on, returns the default value if the column is null
    const ::trantor::Date &getValueOfSpentOn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getSpentOn() const noexcept;
    ///Set the value of the column spent_on
    void setSpentOn(const ::trantor::Date &pSpentOn) noexcept;

    /**  For column tyear  */
    ///Get the value of the column tyear, returns the default value if the column is null
    const int32_t &getValueOfTyear() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getTyear() const noexcept;
    ///Set the value of the column tyear
    void setTyear(const int32_t &pTyear) noexcept;

    /**  For column tmonth  */
    ///Get the value of the column tmonth, returns the default value if the column is null
    const int32_t &getValueOfTmonth() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getTmonth() const noexcept;
    ///Set the value of the column tmonth
    void setTmonth(const int32_t &pTmonth) noexcept;

    /**  For column tweek  */
    ///Get the value of the column tweek, returns the default value if the column is null
    const int32_t &getValueOfTweek() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getTweek() const noexcept;
    ///Set the value of the column tweek
    void setTweek(const int32_t &pTweek) noexcept;

    /**  For column created_on  */
    ///Get the value of the column created_on, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedOn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedOn() const noexcept;
    ///Set the value of the column created_on
    void setCreatedOn(const ::trantor::Date &pCreatedOn) noexcept;

    /**  For column updated_on  */
    ///Get the value of the column updated_on, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedOn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedOn() const noexcept;
    ///Set the value of the column updated_on
    void setUpdatedOn(const ::trantor::Date &pUpdatedOn) noexcept;

    /**  For column overridden_costs  */
    ///Get the value of the column overridden_costs, returns the default value if the column is null
    const int64_t &getValueOfOverriddenCosts() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getOverriddenCosts() const noexcept;
    ///Set the value of the column overridden_costs
    void setOverriddenCosts(const int64_t &pOverriddenCosts) noexcept;

    /**  For column costs  */
    ///Get the value of the column costs, returns the default value if the column is null
    const int64_t &getValueOfCosts() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getCosts() const noexcept;
    ///Set the value of the column costs
    void setCosts(const int64_t &pCosts) noexcept;

    /**  For column rate_id  */
    ///Get the value of the column rate_id, returns the default value if the column is null
    const int32_t &getValueOfRateId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getRateId() const noexcept;
    ///Set the value of the column rate_id
    void setRateId(const int32_t &pRateId) noexcept;


    static size_t getColumnNumber() noexcept {  return 16;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;

  private:
    friend Mapper<TimeEntries>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> _id;
    std::shared_ptr<int32_t> _projectId;
    std::shared_ptr<int32_t> _userId;
    std::shared_ptr<int32_t> _workPackageId;
    std::shared_ptr<double> _hours;
    std::shared_ptr<std::string> _comments;
    std::shared_ptr<int32_t> _activityId;
    std::shared_ptr<::trantor::Date> _spentOn;
    std::shared_ptr<int32_t> _tyear;
    std::shared_ptr<int32_t> _tmonth;
    std::shared_ptr<int32_t> _tweek;
    std::shared_ptr<::trantor::Date> _createdOn;
    std::shared_ptr<::trantor::Date> _updatedOn;
    std::shared_ptr<int64_t> _overriddenCosts;
    std::shared_ptr<int64_t> _costs;
    std::shared_ptr<int32_t> _rateId;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[16]={ false };

  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = $1";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = $1";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(_dirtyFlag[1])
        {
            sql += "project_id,";
            ++parametersCount;
        }
        if(_dirtyFlag[2])
        {
            sql += "user_id,";
            ++parametersCount;
        }
        if(_dirtyFlag[3])
        {
            sql += "work_package_id,";
            ++parametersCount;
        }
        if(_dirtyFlag[4])
        {
            sql += "hours,";
            ++parametersCount;
        }
        if(_dirtyFlag[5])
        {
            sql += "comments,";
            ++parametersCount;
        }
        if(_dirtyFlag[6])
        {
            sql += "activity_id,";
            ++parametersCount;
        }
        if(_dirtyFlag[7])
        {
            sql += "spent_on,";
            ++parametersCount;
        }
        if(_dirtyFlag[8])
        {
            sql += "tyear,";
            ++parametersCount;
        }
        if(_dirtyFlag[9])
        {
            sql += "tmonth,";
            ++parametersCount;
        }
        if(_dirtyFlag[10])
        {
            sql += "tweek,";
            ++parametersCount;
        }
        if(_dirtyFlag[11])
        {
            sql += "created_on,";
            ++parametersCount;
        }
        if(_dirtyFlag[12])
        {
            sql += "updated_on,";
            ++parametersCount;
        }
        if(_dirtyFlag[13])
        {
            sql += "overridden_costs,";
            ++parametersCount;
        }
        if(_dirtyFlag[14])
        {
            sql += "costs,";
            ++parametersCount;
        }
        if(_dirtyFlag[15])
        {
            sql += "rate_id,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        sql +="default,";
        if(_dirtyFlag[1])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[2])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[3])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[4])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[5])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[6])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[7])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[8])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[9])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[10])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[11])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[12])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[13])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[14])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[15])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace openproject6
} // namespace drogon_model
