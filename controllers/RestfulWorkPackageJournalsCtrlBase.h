/**
 *
 *  RestfulWorkPackageJournalsCtrlBase.h
 *  DO NOT EDIT. This file is generated by drogon_ctl automatically.
 *  Users should implement business logic in the derived class.
 */

#pragma once

#include "WorkPackageJournals.h"
using namespace drogon;

using namespace drogon_model::openproject6;

/**
 * @brief this class is created by the drogon_ctl command.
 * this class is a restful API controller for reading and writing the work_package_journals table.
 */

class RestfulWorkPackageJournalsCtrlBase
{
  public:
    void getOne(const HttpRequestPtr &req,
                std::function<void(const HttpResponsePtr &)> &&callback,
                WorkPackageJournals::PrimaryKeyType &&id);
    void updateOne(const HttpRequestPtr &req,
                   std::function<void(const HttpResponsePtr &)> &&callback,
                   WorkPackageJournals::PrimaryKeyType &&id);
    void deleteOne(const HttpRequestPtr &req,
                   std::function<void(const HttpResponsePtr &)> &&callback,
                   WorkPackageJournals::PrimaryKeyType &&id);
    void get(const HttpRequestPtr &req,
             std::function<void(const HttpResponsePtr &)> &&callback);
    void create(const HttpRequestPtr &req,
                std::function<void(const HttpResponsePtr &)> &&callback);


//    void update(const HttpRequestPtr &req,
//                std::function<void(const HttpResponsePtr &)> &&callback);

    orm::DbClientPtr getDbClient() 
    {
        return drogon::app().getDbClient(_dbClientName);
    }
    void enableMasquerading(const std::vector<std::string> &pMasqueradingVector)
    {
        _masquerading = true;
        _masqueradingVector = pMasqueradingVector;
    }
    void disableMasquerading()
    {
        _masquerading = false;
    }
  protected:
    const std::string _dbClientName = "sce";
    bool _masquerading = true;
    /**
     * The items in the vector are aliases of column names in the table.
     * if one item is set to an empty string, the related column is not sent to clients.
     */
    std::vector<std::string> _masqueradingVector={
          "id", // the alias for the id column.
          "journal_id", // the alias for the journal_id column.
          "type_id", // the alias for the type_id column.
          "project_id", // the alias for the project_id column.
          "subject", // the alias for the subject column.
          "description", // the alias for the description column.
          "due_date", // the alias for the due_date column.
          "category_id", // the alias for the category_id column.
          "status_id", // the alias for the status_id column.
          "assigned_to_id", // the alias for the assigned_to_id column.
          "priority_id", // the alias for the priority_id column.
          "fixed_version_id", // the alias for the fixed_version_id column.
          "author_id", // the alias for the author_id column.
          "done_ratio", // the alias for the done_ratio column.
          "estimated_hours", // the alias for the estimated_hours column.
          "start_date", // the alias for the start_date column.
          "parent_id", // the alias for the parent_id column.
          "responsible_id", // the alias for the responsible_id column.
          "cost_object_id", // the alias for the cost_object_id column.
          "story_points", // the alias for the story_points column.
          "remaining_hours", // the alias for the remaining_hours column.
          "derived_estimated_hours"  // the alias for the derived_estimated_hours column.
    };
};
