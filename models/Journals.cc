/**
 *
 *  Journals.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Journals.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Journals::Cols::_id = "id";
const std::string Journals::Cols::_journable_type = "journable_type";
const std::string Journals::Cols::_journable_id = "journable_id";
const std::string Journals::Cols::_user_id = "user_id";
const std::string Journals::Cols::_notes = "notes";
const std::string Journals::Cols::_created_at = "created_at";
const std::string Journals::Cols::_version = "version";
const std::string Journals::Cols::_activity_type = "activity_type";
const std::string Journals::primaryKeyName = "id";
const bool Journals::hasPrimaryKey = true;
const std::string Journals::tableName = "journals";

const std::vector<typename Journals::MetaData> Journals::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"journable_type","std::string","character varying",0,0,0,0},
{"journable_id","int32_t","integer",4,0,0,0},
{"user_id","int32_t","integer",4,0,0,1},
{"notes","std::string","text",0,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"version","int32_t","integer",4,0,0,1},
{"activity_type","std::string","character varying",0,0,0,0}
};
const std::string &Journals::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Journals::Journals(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["journable_type"].isNull())
        {
            _journableType=std::make_shared<std::string>(r["journable_type"].as<std::string>());
        }
        if(!r["journable_id"].isNull())
        {
            _journableId=std::make_shared<int32_t>(r["journable_id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["notes"].isNull())
        {
            _notes=std::make_shared<std::string>(r["notes"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["version"].isNull())
        {
            _version=std::make_shared<int32_t>(r["version"].as<int32_t>());
        }
        if(!r["activity_type"].isNull())
        {
            _activityType=std::make_shared<std::string>(r["activity_type"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _journableType=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _journableId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _userId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _notes=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            _version=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            _activityType=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Journals::Journals(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _journableType=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _journableId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _userId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _notes=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        auto timeStr = pJson[pMasqueradingVector[5]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _version=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _activityType=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
    }
}

Journals::Journals(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("journable_type"))
    {
        _journableType=std::make_shared<std::string>(pJson["journable_type"].asString());
    }
    if(pJson.isMember("journable_id"))
    {
        _journableId=std::make_shared<int32_t>((int32_t)pJson["journable_id"].asInt64());
    }
    if(pJson.isMember("user_id"))
    {
        _userId=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
    }
    if(pJson.isMember("notes"))
    {
        _notes=std::make_shared<std::string>(pJson["notes"].asString());
    }
    if(pJson.isMember("created_at"))
    {
        auto timeStr = pJson["created_at"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("version"))
    {
        _version=std::make_shared<int32_t>((int32_t)pJson["version"].asInt64());
    }
    if(pJson.isMember("activity_type"))
    {
        _activityType=std::make_shared<std::string>(pJson["activity_type"].asString());
    }
}

void Journals::updateByMasqueradedJson(const Json::Value &pJson, 
                                                                                                     const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        _journableType=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        _journableId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        _userId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        _notes=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        auto timeStr = pJson[pMasqueradingVector[5]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        _version=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        _activityType=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
    }
}
                                                                    
void Journals::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("journable_type"))
    {
        _dirtyFlag[1] = true;
        _journableType=std::make_shared<std::string>(pJson["journable_type"].asString());
    }
    if(pJson.isMember("journable_id"))
    {
        _dirtyFlag[2] = true;
        _journableId=std::make_shared<int32_t>((int32_t)pJson["journable_id"].asInt64());
    }
    if(pJson.isMember("user_id"))
    {
        _dirtyFlag[3] = true;
        _userId=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
    }
    if(pJson.isMember("notes"))
    {
        _dirtyFlag[4] = true;
        _notes=std::make_shared<std::string>(pJson["notes"].asString());
    }
    if(pJson.isMember("created_at"))
    {
        _dirtyFlag[5] = true;
        auto timeStr = pJson["created_at"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("version"))
    {
        _dirtyFlag[6] = true;
        _version=std::make_shared<int32_t>((int32_t)pJson["version"].asInt64());
    }
    if(pJson.isMember("activity_type"))
    {
        _dirtyFlag[7] = true;
        _activityType=std::make_shared<std::string>(pJson["activity_type"].asString());
    }
}

const int32_t &Journals::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Journals::getId() const noexcept
{
    return _id;
}
const typename Journals::PrimaryKeyType & Journals::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &Journals::getValueOfJournableType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_journableType)
        return *_journableType;
    return defaultValue;
}
const std::shared_ptr<std::string> &Journals::getJournableType() const noexcept
{
    return _journableType;
}
void Journals::setJournableType(const std::string &pJournableType) noexcept
{
    _journableType = std::make_shared<std::string>(pJournableType);
    _dirtyFlag[1] = true;
}
void Journals::setJournableType(std::string &&pJournableType) noexcept
{
    _journableType = std::make_shared<std::string>(std::move(pJournableType));
    _dirtyFlag[1] = true;
}


const int32_t &Journals::getValueOfJournableId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journableId)
        return *_journableId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Journals::getJournableId() const noexcept
{
    return _journableId;
}
void Journals::setJournableId(const int32_t &pJournableId) noexcept
{
    _journableId = std::make_shared<int32_t>(pJournableId);
    _dirtyFlag[2] = true;
}


const int32_t &Journals::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Journals::getUserId() const noexcept
{
    return _userId;
}
void Journals::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[3] = true;
}


const std::string &Journals::getValueOfNotes() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_notes)
        return *_notes;
    return defaultValue;
}
const std::shared_ptr<std::string> &Journals::getNotes() const noexcept
{
    return _notes;
}
void Journals::setNotes(const std::string &pNotes) noexcept
{
    _notes = std::make_shared<std::string>(pNotes);
    _dirtyFlag[4] = true;
}
void Journals::setNotes(std::string &&pNotes) noexcept
{
    _notes = std::make_shared<std::string>(std::move(pNotes));
    _dirtyFlag[4] = true;
}


const ::trantor::Date &Journals::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Journals::getCreatedAt() const noexcept
{
    return _createdAt;
}
void Journals::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[5] = true;
}


const int32_t &Journals::getValueOfVersion() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_version)
        return *_version;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Journals::getVersion() const noexcept
{
    return _version;
}
void Journals::setVersion(const int32_t &pVersion) noexcept
{
    _version = std::make_shared<int32_t>(pVersion);
    _dirtyFlag[6] = true;
}


const std::string &Journals::getValueOfActivityType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_activityType)
        return *_activityType;
    return defaultValue;
}
const std::shared_ptr<std::string> &Journals::getActivityType() const noexcept
{
    return _activityType;
}
void Journals::setActivityType(const std::string &pActivityType) noexcept
{
    _activityType = std::make_shared<std::string>(pActivityType);
    _dirtyFlag[7] = true;
}
void Journals::setActivityType(std::string &&pActivityType) noexcept
{
    _activityType = std::make_shared<std::string>(std::move(pActivityType));
    _dirtyFlag[7] = true;
}


void Journals::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Journals::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journable_type",
        "journable_id",
        "user_id",
        "notes",
        "created_at",
        "version",
        "activity_type"
    };
    return _inCols;
}

void Journals::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getJournableType())
    {
        binder << getValueOfJournableType();
    }
    else
    {
        binder << nullptr;
    }
    if(getJournableId())
    {
        binder << getValueOfJournableId();
    }
    else
    {
        binder << nullptr;
    }
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
    if(getNotes())
    {
        binder << getValueOfNotes();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getVersion())
    {
        binder << getValueOfVersion();
    }
    else
    {
        binder << nullptr;
    }
    if(getActivityType())
    {
        binder << getValueOfActivityType();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Journals::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Journals::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournableType())
        {
            binder << getValueOfJournableType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getJournableId())
        {
            binder << getValueOfJournableId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getNotes())
        {
            binder << getValueOfNotes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getActivityType())
        {
            binder << getValueOfActivityType();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Journals::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournableType())
    {
        ret["journable_type"]=getValueOfJournableType();
    }
    else
    {
        ret["journable_type"]=Json::Value();
    }
    if(getJournableId())
    {
        ret["journable_id"]=getValueOfJournableId();
    }
    else
    {
        ret["journable_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getNotes())
    {
        ret["notes"]=getValueOfNotes();
    }
    else
    {
        ret["notes"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getActivityType())
    {
        ret["activity_type"]=getValueOfActivityType();
    }
    else
    {
        ret["activity_type"]=Json::Value();
    }
    return ret;
}

Json::Value Journals::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getJournableType())
            {
                ret[pMasqueradingVector[1]]=getValueOfJournableType();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getJournableId())
            {
                ret[pMasqueradingVector[2]]=getValueOfJournableId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[3]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getNotes())
            {
                ret[pMasqueradingVector[4]]=getValueOfNotes();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[5]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getVersion())
            {
                ret[pMasqueradingVector[6]]=getValueOfVersion();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getActivityType())
            {
                ret[pMasqueradingVector[7]]=getValueOfActivityType();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournableType())
    {
        ret["journable_type"]=getValueOfJournableType();
    }
    else
    {
        ret["journable_type"]=Json::Value();
    }
    if(getJournableId())
    {
        ret["journable_id"]=getValueOfJournableId();
    }
    else
    {
        ret["journable_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getNotes())
    {
        ret["notes"]=getValueOfNotes();
    }
    else
    {
        ret["notes"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getActivityType())
    {
        ret["activity_type"]=getValueOfActivityType();
    }
    else
    {
        ret["activity_type"]=Json::Value();
    }
    return ret;
}
