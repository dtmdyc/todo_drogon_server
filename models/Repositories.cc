/**
 *
 *  Repositories.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Repositories.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Repositories::Cols::_id = "id";
const std::string Repositories::Cols::_project_id = "project_id";
const std::string Repositories::Cols::_url = "url";
const std::string Repositories::Cols::_login = "login";
const std::string Repositories::Cols::_password = "password";
const std::string Repositories::Cols::_root_url = "root_url";
const std::string Repositories::Cols::_type = "type";
const std::string Repositories::Cols::_path_encoding = "path_encoding";
const std::string Repositories::Cols::_log_encoding = "log_encoding";
const std::string Repositories::Cols::_scm_type = "scm_type";
const std::string Repositories::Cols::_required_storage_bytes = "required_storage_bytes";
const std::string Repositories::Cols::_storage_updated_at = "storage_updated_at";
const std::string Repositories::primaryKeyName = "id";
const bool Repositories::hasPrimaryKey = true;
const std::string Repositories::tableName = "repositories";

const std::vector<typename Repositories::MetaData> Repositories::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"project_id","int32_t","integer",4,0,0,1},
{"url","std::string","character varying",0,0,0,1},
{"login","std::string","character varying",60,0,0,0},
{"password","std::string","character varying",0,0,0,0},
{"root_url","std::string","character varying",0,0,0,0},
{"type","std::string","character varying",0,0,0,0},
{"path_encoding","std::string","character varying",64,0,0,0},
{"log_encoding","std::string","character varying",64,0,0,0},
{"scm_type","std::string","character varying",0,0,0,1},
{"required_storage_bytes","int64_t","bigint",8,0,0,1},
{"storage_updated_at","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &Repositories::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Repositories::Repositories(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["url"].isNull())
        {
            _url=std::make_shared<std::string>(r["url"].as<std::string>());
        }
        if(!r["login"].isNull())
        {
            _login=std::make_shared<std::string>(r["login"].as<std::string>());
        }
        if(!r["password"].isNull())
        {
            _password=std::make_shared<std::string>(r["password"].as<std::string>());
        }
        if(!r["root_url"].isNull())
        {
            _rootUrl=std::make_shared<std::string>(r["root_url"].as<std::string>());
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["path_encoding"].isNull())
        {
            _pathEncoding=std::make_shared<std::string>(r["path_encoding"].as<std::string>());
        }
        if(!r["log_encoding"].isNull())
        {
            _logEncoding=std::make_shared<std::string>(r["log_encoding"].as<std::string>());
        }
        if(!r["scm_type"].isNull())
        {
            _scmType=std::make_shared<std::string>(r["scm_type"].as<std::string>());
        }
        if(!r["required_storage_bytes"].isNull())
        {
            _requiredStorageBytes=std::make_shared<int64_t>(r["required_storage_bytes"].as<int64_t>());
        }
        if(!r["storage_updated_at"].isNull())
        {
            auto timeStr = r["storage_updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _storageUpdatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int32_t &Repositories::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Repositories::getId() const noexcept
{
    return _id;
}
const typename Repositories::PrimaryKeyType & Repositories::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &Repositories::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Repositories::getProjectId() const noexcept
{
    return _projectId;
}
void Repositories::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[1] = true;
}


const std::string &Repositories::getValueOfUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_url)
        return *_url;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getUrl() const noexcept
{
    return _url;
}
void Repositories::setUrl(const std::string &pUrl) noexcept
{
    _url = std::make_shared<std::string>(pUrl);
    _dirtyFlag[2] = true;
}
void Repositories::setUrl(std::string &&pUrl) noexcept
{
    _url = std::make_shared<std::string>(std::move(pUrl));
    _dirtyFlag[2] = true;
}


const std::string &Repositories::getValueOfLogin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_login)
        return *_login;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getLogin() const noexcept
{
    return _login;
}
void Repositories::setLogin(const std::string &pLogin) noexcept
{
    _login = std::make_shared<std::string>(pLogin);
    _dirtyFlag[3] = true;
}
void Repositories::setLogin(std::string &&pLogin) noexcept
{
    _login = std::make_shared<std::string>(std::move(pLogin));
    _dirtyFlag[3] = true;
}


const std::string &Repositories::getValueOfPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_password)
        return *_password;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getPassword() const noexcept
{
    return _password;
}
void Repositories::setPassword(const std::string &pPassword) noexcept
{
    _password = std::make_shared<std::string>(pPassword);
    _dirtyFlag[4] = true;
}
void Repositories::setPassword(std::string &&pPassword) noexcept
{
    _password = std::make_shared<std::string>(std::move(pPassword));
    _dirtyFlag[4] = true;
}


const std::string &Repositories::getValueOfRootUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_rootUrl)
        return *_rootUrl;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getRootUrl() const noexcept
{
    return _rootUrl;
}
void Repositories::setRootUrl(const std::string &pRootUrl) noexcept
{
    _rootUrl = std::make_shared<std::string>(pRootUrl);
    _dirtyFlag[5] = true;
}
void Repositories::setRootUrl(std::string &&pRootUrl) noexcept
{
    _rootUrl = std::make_shared<std::string>(std::move(pRootUrl));
    _dirtyFlag[5] = true;
}


const std::string &Repositories::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getType() const noexcept
{
    return _type;
}
void Repositories::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[6] = true;
}
void Repositories::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[6] = true;
}


const std::string &Repositories::getValueOfPathEncoding() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_pathEncoding)
        return *_pathEncoding;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getPathEncoding() const noexcept
{
    return _pathEncoding;
}
void Repositories::setPathEncoding(const std::string &pPathEncoding) noexcept
{
    _pathEncoding = std::make_shared<std::string>(pPathEncoding);
    _dirtyFlag[7] = true;
}
void Repositories::setPathEncoding(std::string &&pPathEncoding) noexcept
{
    _pathEncoding = std::make_shared<std::string>(std::move(pPathEncoding));
    _dirtyFlag[7] = true;
}


const std::string &Repositories::getValueOfLogEncoding() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_logEncoding)
        return *_logEncoding;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getLogEncoding() const noexcept
{
    return _logEncoding;
}
void Repositories::setLogEncoding(const std::string &pLogEncoding) noexcept
{
    _logEncoding = std::make_shared<std::string>(pLogEncoding);
    _dirtyFlag[8] = true;
}
void Repositories::setLogEncoding(std::string &&pLogEncoding) noexcept
{
    _logEncoding = std::make_shared<std::string>(std::move(pLogEncoding));
    _dirtyFlag[8] = true;
}


const std::string &Repositories::getValueOfScmType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_scmType)
        return *_scmType;
    return defaultValue;
}
const std::shared_ptr<std::string> &Repositories::getScmType() const noexcept
{
    return _scmType;
}
void Repositories::setScmType(const std::string &pScmType) noexcept
{
    _scmType = std::make_shared<std::string>(pScmType);
    _dirtyFlag[9] = true;
}
void Repositories::setScmType(std::string &&pScmType) noexcept
{
    _scmType = std::make_shared<std::string>(std::move(pScmType));
    _dirtyFlag[9] = true;
}


const int64_t &Repositories::getValueOfRequiredStorageBytes() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_requiredStorageBytes)
        return *_requiredStorageBytes;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Repositories::getRequiredStorageBytes() const noexcept
{
    return _requiredStorageBytes;
}
void Repositories::setRequiredStorageBytes(const int64_t &pRequiredStorageBytes) noexcept
{
    _requiredStorageBytes = std::make_shared<int64_t>(pRequiredStorageBytes);
    _dirtyFlag[10] = true;
}


const ::trantor::Date &Repositories::getValueOfStorageUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_storageUpdatedAt)
        return *_storageUpdatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Repositories::getStorageUpdatedAt() const noexcept
{
    return _storageUpdatedAt;
}
void Repositories::setStorageUpdatedAt(const ::trantor::Date &pStorageUpdatedAt) noexcept
{
    _storageUpdatedAt = std::make_shared<::trantor::Date>(pStorageUpdatedAt);
    _dirtyFlag[11] = true;
}


void Repositories::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Repositories::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "project_id",
        "url",
        "login",
        "password",
        "root_url",
        "type",
        "path_encoding",
        "log_encoding",
        "scm_type",
        "required_storage_bytes",
        "storage_updated_at"
    };
    return _inCols;
}

void Repositories::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getUrl())
    {
        binder << getValueOfUrl();
    }
    else
    {
        binder << nullptr;
    }
    if(getLogin())
    {
        binder << getValueOfLogin();
    }
    else
    {
        binder << nullptr;
    }
    if(getPassword())
    {
        binder << getValueOfPassword();
    }
    else
    {
        binder << nullptr;
    }
    if(getRootUrl())
    {
        binder << getValueOfRootUrl();
    }
    else
    {
        binder << nullptr;
    }
    if(getType())
    {
        binder << getValueOfType();
    }
    else
    {
        binder << nullptr;
    }
    if(getPathEncoding())
    {
        binder << getValueOfPathEncoding();
    }
    else
    {
        binder << nullptr;
    }
    if(getLogEncoding())
    {
        binder << getValueOfLogEncoding();
    }
    else
    {
        binder << nullptr;
    }
    if(getScmType())
    {
        binder << getValueOfScmType();
    }
    else
    {
        binder << nullptr;
    }
    if(getRequiredStorageBytes())
    {
        binder << getValueOfRequiredStorageBytes();
    }
    else
    {
        binder << nullptr;
    }
    if(getStorageUpdatedAt())
    {
        binder << getValueOfStorageUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Repositories::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Repositories::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getLogin())
        {
            binder << getValueOfLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getRootUrl())
        {
            binder << getValueOfRootUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getPathEncoding())
        {
            binder << getValueOfPathEncoding();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getLogEncoding())
        {
            binder << getValueOfLogEncoding();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getScmType())
        {
            binder << getValueOfScmType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getRequiredStorageBytes())
        {
            binder << getValueOfRequiredStorageBytes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getStorageUpdatedAt())
        {
            binder << getValueOfStorageUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Repositories::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getLogin())
    {
        ret["login"]=getValueOfLogin();
    }
    else
    {
        ret["login"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getRootUrl())
    {
        ret["root_url"]=getValueOfRootUrl();
    }
    else
    {
        ret["root_url"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getPathEncoding())
    {
        ret["path_encoding"]=getValueOfPathEncoding();
    }
    else
    {
        ret["path_encoding"]=Json::Value();
    }
    if(getLogEncoding())
    {
        ret["log_encoding"]=getValueOfLogEncoding();
    }
    else
    {
        ret["log_encoding"]=Json::Value();
    }
    if(getScmType())
    {
        ret["scm_type"]=getValueOfScmType();
    }
    else
    {
        ret["scm_type"]=Json::Value();
    }
    if(getRequiredStorageBytes())
    {
        ret["required_storage_bytes"]=(Json::Int64)getValueOfRequiredStorageBytes();
    }
    else
    {
        ret["required_storage_bytes"]=Json::Value();
    }
    if(getStorageUpdatedAt())
    {
        ret["storage_updated_at"]=getStorageUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["storage_updated_at"]=Json::Value();
    }
    return ret;
}
