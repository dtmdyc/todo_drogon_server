/**
 *
 *  SchemaMigrations.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "SchemaMigrations.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string SchemaMigrations::Cols::_version = "version";
const std::string SchemaMigrations::primaryKeyName = "version";
const bool SchemaMigrations::hasPrimaryKey = true;
const std::string SchemaMigrations::tableName = "schema_migrations";

const std::vector<typename SchemaMigrations::MetaData> SchemaMigrations::_metaData={
{"version","std::string","character varying",0,0,1,1}
};
const std::string &SchemaMigrations::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
SchemaMigrations::SchemaMigrations(const Row &r) noexcept
{
        if(!r["version"].isNull())
        {
            _version=std::make_shared<std::string>(r["version"].as<std::string>());
        }
}
const std::string &SchemaMigrations::getValueOfVersion() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_version)
        return *_version;
    return defaultValue;
}
const std::shared_ptr<std::string> &SchemaMigrations::getVersion() const noexcept
{
    return _version;
}
void SchemaMigrations::setVersion(const std::string &pVersion) noexcept
{
    _version = std::make_shared<std::string>(pVersion);
    _dirtyFlag[0] = true;
}
void SchemaMigrations::setVersion(std::string &&pVersion) noexcept
{
    _version = std::make_shared<std::string>(std::move(pVersion));
    _dirtyFlag[0] = true;
}

const typename SchemaMigrations::PrimaryKeyType & SchemaMigrations::getPrimaryKey() const
{
    assert(_version);
    return *_version;
}

void SchemaMigrations::updateId(const uint64_t id)
{
}

const std::vector<std::string> &SchemaMigrations::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "version"
    };
    return _inCols;
}

void SchemaMigrations::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getVersion())
    {
        binder << getValueOfVersion();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> SchemaMigrations::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void SchemaMigrations::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[0])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value SchemaMigrations::toJson() const
{
    Json::Value ret;
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    return ret;
}
