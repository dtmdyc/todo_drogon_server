/**
 *
 *  GroupUsers.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "GroupUsers.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string GroupUsers::Cols::_group_id = "group_id";
const std::string GroupUsers::Cols::_user_id = "user_id";
const std::string GroupUsers::primaryKeyName = "";
const bool GroupUsers::hasPrimaryKey = false;
const std::string GroupUsers::tableName = "group_users";

const std::vector<typename GroupUsers::MetaData> GroupUsers::_metaData={
{"group_id","int32_t","integer",4,0,0,1},
{"user_id","int32_t","integer",4,0,0,1}
};
const std::string &GroupUsers::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
GroupUsers::GroupUsers(const Row &r) noexcept
{
        if(!r["group_id"].isNull())
        {
            _groupId=std::make_shared<int32_t>(r["group_id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
}
const int32_t &GroupUsers::getValueOfGroupId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_groupId)
        return *_groupId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &GroupUsers::getGroupId() const noexcept
{
    return _groupId;
}
void GroupUsers::setGroupId(const int32_t &pGroupId) noexcept
{
    _groupId = std::make_shared<int32_t>(pGroupId);
    _dirtyFlag[0] = true;
}


const int32_t &GroupUsers::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &GroupUsers::getUserId() const noexcept
{
    return _userId;
}
void GroupUsers::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[1] = true;
}


void GroupUsers::updateId(const uint64_t id)
{
}

const std::vector<std::string> &GroupUsers::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "group_id",
        "user_id"
    };
    return _inCols;
}

void GroupUsers::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getGroupId())
    {
        binder << getValueOfGroupId();
    }
    else
    {
        binder << nullptr;
    }
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> GroupUsers::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void GroupUsers::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[0])
    {
        if(getGroupId())
        {
            binder << getValueOfGroupId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value GroupUsers::toJson() const
{
    Json::Value ret;
    if(getGroupId())
    {
        ret["group_id"]=getValueOfGroupId();
    }
    else
    {
        ret["group_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    return ret;
}
