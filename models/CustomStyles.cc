/**
 *
 *  CustomStyles.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "CustomStyles.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string CustomStyles::Cols::_id = "id";
const std::string CustomStyles::Cols::_logo = "logo";
const std::string CustomStyles::Cols::_created_at = "created_at";
const std::string CustomStyles::Cols::_updated_at = "updated_at";
const std::string CustomStyles::Cols::_favicon = "favicon";
const std::string CustomStyles::Cols::_touch_icon = "touch_icon";
const std::string CustomStyles::primaryKeyName = "id";
const bool CustomStyles::hasPrimaryKey = true;
const std::string CustomStyles::tableName = "custom_styles";

const std::vector<typename CustomStyles::MetaData> CustomStyles::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"logo","std::string","character varying",0,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"favicon","std::string","character varying",0,0,0,0},
{"touch_icon","std::string","character varying",0,0,0,0}
};
const std::string &CustomStyles::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
CustomStyles::CustomStyles(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["logo"].isNull())
        {
            _logo=std::make_shared<std::string>(r["logo"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["favicon"].isNull())
        {
            _favicon=std::make_shared<std::string>(r["favicon"].as<std::string>());
        }
        if(!r["touch_icon"].isNull())
        {
            _touchIcon=std::make_shared<std::string>(r["touch_icon"].as<std::string>());
        }
}
const int32_t &CustomStyles::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomStyles::getId() const noexcept
{
    return _id;
}
const typename CustomStyles::PrimaryKeyType & CustomStyles::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &CustomStyles::getValueOfLogo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_logo)
        return *_logo;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomStyles::getLogo() const noexcept
{
    return _logo;
}
void CustomStyles::setLogo(const std::string &pLogo) noexcept
{
    _logo = std::make_shared<std::string>(pLogo);
    _dirtyFlag[1] = true;
}
void CustomStyles::setLogo(std::string &&pLogo) noexcept
{
    _logo = std::make_shared<std::string>(std::move(pLogo));
    _dirtyFlag[1] = true;
}


const ::trantor::Date &CustomStyles::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &CustomStyles::getCreatedAt() const noexcept
{
    return _createdAt;
}
void CustomStyles::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[2] = true;
}


const ::trantor::Date &CustomStyles::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &CustomStyles::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void CustomStyles::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[3] = true;
}


const std::string &CustomStyles::getValueOfFavicon() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_favicon)
        return *_favicon;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomStyles::getFavicon() const noexcept
{
    return _favicon;
}
void CustomStyles::setFavicon(const std::string &pFavicon) noexcept
{
    _favicon = std::make_shared<std::string>(pFavicon);
    _dirtyFlag[4] = true;
}
void CustomStyles::setFavicon(std::string &&pFavicon) noexcept
{
    _favicon = std::make_shared<std::string>(std::move(pFavicon));
    _dirtyFlag[4] = true;
}


const std::string &CustomStyles::getValueOfTouchIcon() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_touchIcon)
        return *_touchIcon;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomStyles::getTouchIcon() const noexcept
{
    return _touchIcon;
}
void CustomStyles::setTouchIcon(const std::string &pTouchIcon) noexcept
{
    _touchIcon = std::make_shared<std::string>(pTouchIcon);
    _dirtyFlag[5] = true;
}
void CustomStyles::setTouchIcon(std::string &&pTouchIcon) noexcept
{
    _touchIcon = std::make_shared<std::string>(std::move(pTouchIcon));
    _dirtyFlag[5] = true;
}


void CustomStyles::updateId(const uint64_t id)
{
}

const std::vector<std::string> &CustomStyles::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "logo",
        "created_at",
        "updated_at",
        "favicon",
        "touch_icon"
    };
    return _inCols;
}

void CustomStyles::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getLogo())
    {
        binder << getValueOfLogo();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getFavicon())
    {
        binder << getValueOfFavicon();
    }
    else
    {
        binder << nullptr;
    }
    if(getTouchIcon())
    {
        binder << getValueOfTouchIcon();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> CustomStyles::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void CustomStyles::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getLogo())
        {
            binder << getValueOfLogo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getFavicon())
        {
            binder << getValueOfFavicon();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getTouchIcon())
        {
            binder << getValueOfTouchIcon();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value CustomStyles::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getLogo())
    {
        ret["logo"]=getValueOfLogo();
    }
    else
    {
        ret["logo"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getFavicon())
    {
        ret["favicon"]=getValueOfFavicon();
    }
    else
    {
        ret["favicon"]=Json::Value();
    }
    if(getTouchIcon())
    {
        ret["touch_icon"]=getValueOfTouchIcon();
    }
    else
    {
        ret["touch_icon"]=Json::Value();
    }
    return ret;
}
