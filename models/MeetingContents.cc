/**
 *
 *  MeetingContents.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MeetingContents.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string MeetingContents::Cols::_id = "id";
const std::string MeetingContents::Cols::_type = "type";
const std::string MeetingContents::Cols::_meeting_id = "meeting_id";
const std::string MeetingContents::Cols::_author_id = "author_id";
const std::string MeetingContents::Cols::_text = "text";
const std::string MeetingContents::Cols::_lock_version = "lock_version";
const std::string MeetingContents::Cols::_created_at = "created_at";
const std::string MeetingContents::Cols::_updated_at = "updated_at";
const std::string MeetingContents::Cols::_locked = "locked";
const std::string MeetingContents::primaryKeyName = "id";
const bool MeetingContents::hasPrimaryKey = true;
const std::string MeetingContents::tableName = "meeting_contents";

const std::vector<typename MeetingContents::MetaData> MeetingContents::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"type","std::string","character varying",0,0,0,0},
{"meeting_id","int32_t","integer",4,0,0,0},
{"author_id","int32_t","integer",4,0,0,0},
{"text","std::string","text",0,0,0,0},
{"lock_version","int32_t","integer",4,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"locked","bool","boolean",1,0,0,0}
};
const std::string &MeetingContents::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
MeetingContents::MeetingContents(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["meeting_id"].isNull())
        {
            _meetingId=std::make_shared<int32_t>(r["meeting_id"].as<int32_t>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["text"].isNull())
        {
            _text=std::make_shared<std::string>(r["text"].as<std::string>());
        }
        if(!r["lock_version"].isNull())
        {
            _lockVersion=std::make_shared<int32_t>(r["lock_version"].as<int32_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["locked"].isNull())
        {
            _locked=std::make_shared<bool>(r["locked"].as<bool>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _type=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _meetingId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _authorId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _text=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _lockVersion=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            _locked=std::make_shared<bool>(r[index].as<bool>());
        }
    }

}

MeetingContents::MeetingContents(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _type=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _meetingId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _text=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _lockVersion=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        auto timeStr = pJson[pMasqueradingVector[6]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        auto timeStr = pJson[pMasqueradingVector[7]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _locked=std::make_shared<bool>(pJson[pMasqueradingVector[8]].asBool());
    }
}

MeetingContents::MeetingContents(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("type"))
    {
        _type=std::make_shared<std::string>(pJson["type"].asString());
    }
    if(pJson.isMember("meeting_id"))
    {
        _meetingId=std::make_shared<int32_t>((int32_t)pJson["meeting_id"].asInt64());
    }
    if(pJson.isMember("author_id"))
    {
        _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
    }
    if(pJson.isMember("text"))
    {
        _text=std::make_shared<std::string>(pJson["text"].asString());
    }
    if(pJson.isMember("lock_version"))
    {
        _lockVersion=std::make_shared<int32_t>((int32_t)pJson["lock_version"].asInt64());
    }
    if(pJson.isMember("created_at"))
    {
        auto timeStr = pJson["created_at"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("updated_at"))
    {
        auto timeStr = pJson["updated_at"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("locked"))
    {
        _locked=std::make_shared<bool>(pJson["locked"].asBool());
    }
}

void MeetingContents::updateByMasqueradedJson(const Json::Value &pJson, 
                                                                                                     const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        _type=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        _meetingId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        _text=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        _lockVersion=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        auto timeStr = pJson[pMasqueradingVector[6]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        auto timeStr = pJson[pMasqueradingVector[7]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        _locked=std::make_shared<bool>(pJson[pMasqueradingVector[8]].asBool());
    }
}
                                                                    
void MeetingContents::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("type"))
    {
        _dirtyFlag[1] = true;
        _type=std::make_shared<std::string>(pJson["type"].asString());
    }
    if(pJson.isMember("meeting_id"))
    {
        _dirtyFlag[2] = true;
        _meetingId=std::make_shared<int32_t>((int32_t)pJson["meeting_id"].asInt64());
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[3] = true;
        _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
    }
    if(pJson.isMember("text"))
    {
        _dirtyFlag[4] = true;
        _text=std::make_shared<std::string>(pJson["text"].asString());
    }
    if(pJson.isMember("lock_version"))
    {
        _dirtyFlag[5] = true;
        _lockVersion=std::make_shared<int32_t>((int32_t)pJson["lock_version"].asInt64());
    }
    if(pJson.isMember("created_at"))
    {
        _dirtyFlag[6] = true;
        auto timeStr = pJson["created_at"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("updated_at"))
    {
        _dirtyFlag[7] = true;
        auto timeStr = pJson["updated_at"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("locked"))
    {
        _dirtyFlag[8] = true;
        _locked=std::make_shared<bool>(pJson["locked"].asBool());
    }
}

const int32_t &MeetingContents::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingContents::getId() const noexcept
{
    return _id;
}
const typename MeetingContents::PrimaryKeyType & MeetingContents::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &MeetingContents::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &MeetingContents::getType() const noexcept
{
    return _type;
}
void MeetingContents::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[1] = true;
}
void MeetingContents::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[1] = true;
}


const int32_t &MeetingContents::getValueOfMeetingId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_meetingId)
        return *_meetingId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingContents::getMeetingId() const noexcept
{
    return _meetingId;
}
void MeetingContents::setMeetingId(const int32_t &pMeetingId) noexcept
{
    _meetingId = std::make_shared<int32_t>(pMeetingId);
    _dirtyFlag[2] = true;
}


const int32_t &MeetingContents::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingContents::getAuthorId() const noexcept
{
    return _authorId;
}
void MeetingContents::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[3] = true;
}


const std::string &MeetingContents::getValueOfText() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_text)
        return *_text;
    return defaultValue;
}
const std::shared_ptr<std::string> &MeetingContents::getText() const noexcept
{
    return _text;
}
void MeetingContents::setText(const std::string &pText) noexcept
{
    _text = std::make_shared<std::string>(pText);
    _dirtyFlag[4] = true;
}
void MeetingContents::setText(std::string &&pText) noexcept
{
    _text = std::make_shared<std::string>(std::move(pText));
    _dirtyFlag[4] = true;
}


const int32_t &MeetingContents::getValueOfLockVersion() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_lockVersion)
        return *_lockVersion;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingContents::getLockVersion() const noexcept
{
    return _lockVersion;
}
void MeetingContents::setLockVersion(const int32_t &pLockVersion) noexcept
{
    _lockVersion = std::make_shared<int32_t>(pLockVersion);
    _dirtyFlag[5] = true;
}


const ::trantor::Date &MeetingContents::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MeetingContents::getCreatedAt() const noexcept
{
    return _createdAt;
}
void MeetingContents::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[6] = true;
}


const ::trantor::Date &MeetingContents::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MeetingContents::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void MeetingContents::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[7] = true;
}


const bool &MeetingContents::getValueOfLocked() const noexcept
{
    const static bool defaultValue = bool();
    if(_locked)
        return *_locked;
    return defaultValue;
}
const std::shared_ptr<bool> &MeetingContents::getLocked() const noexcept
{
    return _locked;
}
void MeetingContents::setLocked(const bool &pLocked) noexcept
{
    _locked = std::make_shared<bool>(pLocked);
    _dirtyFlag[8] = true;
}


void MeetingContents::updateId(const uint64_t id)
{
}

const std::vector<std::string> &MeetingContents::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "type",
        "meeting_id",
        "author_id",
        "text",
        "lock_version",
        "created_at",
        "updated_at",
        "locked"
    };
    return _inCols;
}

void MeetingContents::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getType())
    {
        binder << getValueOfType();
    }
    else
    {
        binder << nullptr;
    }
    if(getMeetingId())
    {
        binder << getValueOfMeetingId();
    }
    else
    {
        binder << nullptr;
    }
    if(getAuthorId())
    {
        binder << getValueOfAuthorId();
    }
    else
    {
        binder << nullptr;
    }
    if(getText())
    {
        binder << getValueOfText();
    }
    else
    {
        binder << nullptr;
    }
    if(getLockVersion())
    {
        binder << getValueOfLockVersion();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getLocked())
    {
        binder << getValueOfLocked();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> MeetingContents::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void MeetingContents::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getMeetingId())
        {
            binder << getValueOfMeetingId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getText())
        {
            binder << getValueOfText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getLockVersion())
        {
            binder << getValueOfLockVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getLocked())
        {
            binder << getValueOfLocked();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MeetingContents::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getMeetingId())
    {
        ret["meeting_id"]=getValueOfMeetingId();
    }
    else
    {
        ret["meeting_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getLockVersion())
    {
        ret["lock_version"]=getValueOfLockVersion();
    }
    else
    {
        ret["lock_version"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getLocked())
    {
        ret["locked"]=getValueOfLocked();
    }
    else
    {
        ret["locked"]=Json::Value();
    }
    return ret;
}

Json::Value MeetingContents::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[1]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getMeetingId())
            {
                ret[pMasqueradingVector[2]]=getValueOfMeetingId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getAuthorId())
            {
                ret[pMasqueradingVector[3]]=getValueOfAuthorId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getText())
            {
                ret[pMasqueradingVector[4]]=getValueOfText();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getLockVersion())
            {
                ret[pMasqueradingVector[5]]=getValueOfLockVersion();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[6]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[7]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getLocked())
            {
                ret[pMasqueradingVector[8]]=getValueOfLocked();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getMeetingId())
    {
        ret["meeting_id"]=getValueOfMeetingId();
    }
    else
    {
        ret["meeting_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getLockVersion())
    {
        ret["lock_version"]=getValueOfLockVersion();
    }
    else
    {
        ret["lock_version"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getLocked())
    {
        ret["locked"]=getValueOfLocked();
    }
    else
    {
        ret["locked"]=Json::Value();
    }
    return ret;
}
