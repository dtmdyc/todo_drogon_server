/**
 *
 *  Rates.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Rates.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Rates::Cols::_id = "id";
const std::string Rates::Cols::_valid_from = "valid_from";
const std::string Rates::Cols::_rate = "rate";
const std::string Rates::Cols::_type = "type";
const std::string Rates::Cols::_project_id = "project_id";
const std::string Rates::Cols::_user_id = "user_id";
const std::string Rates::Cols::_cost_type_id = "cost_type_id";
const std::string Rates::primaryKeyName = "id";
const bool Rates::hasPrimaryKey = true;
const std::string Rates::tableName = "rates";

const std::vector<typename Rates::MetaData> Rates::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"valid_from","::trantor::Date","date",0,0,0,1},
{"rate","int64_t","numeric",8,0,0,1},
{"type","std::string","character varying",0,0,0,1},
{"project_id","int32_t","integer",4,0,0,0},
{"user_id","int32_t","integer",4,0,0,0},
{"cost_type_id","int32_t","integer",4,0,0,0}
};
const std::string &Rates::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Rates::Rates(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["valid_from"].isNull())
        {
            auto daysStr = r["valid_from"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _validFrom=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["rate"].isNull())
        {
            _rate=std::make_shared<int64_t>(r["rate"].as<int64_t>());
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["cost_type_id"].isNull())
        {
            _costTypeId=std::make_shared<int32_t>(r["cost_type_id"].as<int32_t>());
        }
}
const int32_t &Rates::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Rates::getId() const noexcept
{
    return _id;
}
const typename Rates::PrimaryKeyType & Rates::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const ::trantor::Date &Rates::getValueOfValidFrom() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_validFrom)
        return *_validFrom;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Rates::getValidFrom() const noexcept
{
    return _validFrom;
}
void Rates::setValidFrom(const ::trantor::Date &pValidFrom) noexcept
{
    _validFrom = std::make_shared<::trantor::Date>(pValidFrom.roundDay());
    _dirtyFlag[1] = true;
}


const int64_t &Rates::getValueOfRate() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_rate)
        return *_rate;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Rates::getRate() const noexcept
{
    return _rate;
}
void Rates::setRate(const int64_t &pRate) noexcept
{
    _rate = std::make_shared<int64_t>(pRate);
    _dirtyFlag[2] = true;
}


const std::string &Rates::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &Rates::getType() const noexcept
{
    return _type;
}
void Rates::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[3] = true;
}
void Rates::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[3] = true;
}


const int32_t &Rates::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Rates::getProjectId() const noexcept
{
    return _projectId;
}
void Rates::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[4] = true;
}


const int32_t &Rates::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Rates::getUserId() const noexcept
{
    return _userId;
}
void Rates::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[5] = true;
}


const int32_t &Rates::getValueOfCostTypeId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_costTypeId)
        return *_costTypeId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Rates::getCostTypeId() const noexcept
{
    return _costTypeId;
}
void Rates::setCostTypeId(const int32_t &pCostTypeId) noexcept
{
    _costTypeId = std::make_shared<int32_t>(pCostTypeId);
    _dirtyFlag[6] = true;
}


void Rates::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Rates::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "valid_from",
        "rate",
        "type",
        "project_id",
        "user_id",
        "cost_type_id"
    };
    return _inCols;
}

void Rates::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getValidFrom())
    {
        binder << getValueOfValidFrom();
    }
    else
    {
        binder << nullptr;
    }
    if(getRate())
    {
        binder << getValueOfRate();
    }
    else
    {
        binder << nullptr;
    }
    if(getType())
    {
        binder << getValueOfType();
    }
    else
    {
        binder << nullptr;
    }
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
    if(getCostTypeId())
    {
        binder << getValueOfCostTypeId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Rates::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Rates::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getValidFrom())
        {
            binder << getValueOfValidFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getRate())
        {
            binder << getValueOfRate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getCostTypeId())
        {
            binder << getValueOfCostTypeId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Rates::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getValidFrom())
    {
        ret["valid_from"]=getValidFrom()->toDbStringLocal();
    }
    else
    {
        ret["valid_from"]=Json::Value();
    }
    if(getRate())
    {
        ret["rate"]=(Json::Int64)getValueOfRate();
    }
    else
    {
        ret["rate"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getCostTypeId())
    {
        ret["cost_type_id"]=getValueOfCostTypeId();
    }
    else
    {
        ret["cost_type_id"]=Json::Value();
    }
    return ret;
}
