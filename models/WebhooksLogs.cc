/**
 *
 *  WebhooksLogs.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "WebhooksLogs.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string WebhooksLogs::Cols::_id = "id";
const std::string WebhooksLogs::Cols::_webhooks_webhook_id = "webhooks_webhook_id";
const std::string WebhooksLogs::Cols::_event_name = "event_name";
const std::string WebhooksLogs::Cols::_url = "url";
const std::string WebhooksLogs::Cols::_request_headers = "request_headers";
const std::string WebhooksLogs::Cols::_request_body = "request_body";
const std::string WebhooksLogs::Cols::_response_code = "response_code";
const std::string WebhooksLogs::Cols::_response_headers = "response_headers";
const std::string WebhooksLogs::Cols::_response_body = "response_body";
const std::string WebhooksLogs::Cols::_created_at = "created_at";
const std::string WebhooksLogs::Cols::_updated_at = "updated_at";
const std::string WebhooksLogs::primaryKeyName = "id";
const bool WebhooksLogs::hasPrimaryKey = true;
const std::string WebhooksLogs::tableName = "webhooks_logs";

const std::vector<typename WebhooksLogs::MetaData> WebhooksLogs::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"webhooks_webhook_id","int32_t","integer",4,0,0,0},
{"event_name","std::string","character varying",0,0,0,0},
{"url","std::string","character varying",0,0,0,0},
{"request_headers","std::string","text",0,0,0,0},
{"request_body","std::string","text",0,0,0,0},
{"response_code","int32_t","integer",4,0,0,0},
{"response_headers","std::string","text",0,0,0,0},
{"response_body","std::string","text",0,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &WebhooksLogs::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
WebhooksLogs::WebhooksLogs(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["webhooks_webhook_id"].isNull())
        {
            _webhooksWebhookId=std::make_shared<int32_t>(r["webhooks_webhook_id"].as<int32_t>());
        }
        if(!r["event_name"].isNull())
        {
            _eventName=std::make_shared<std::string>(r["event_name"].as<std::string>());
        }
        if(!r["url"].isNull())
        {
            _url=std::make_shared<std::string>(r["url"].as<std::string>());
        }
        if(!r["request_headers"].isNull())
        {
            _requestHeaders=std::make_shared<std::string>(r["request_headers"].as<std::string>());
        }
        if(!r["request_body"].isNull())
        {
            _requestBody=std::make_shared<std::string>(r["request_body"].as<std::string>());
        }
        if(!r["response_code"].isNull())
        {
            _responseCode=std::make_shared<int32_t>(r["response_code"].as<int32_t>());
        }
        if(!r["response_headers"].isNull())
        {
            _responseHeaders=std::make_shared<std::string>(r["response_headers"].as<std::string>());
        }
        if(!r["response_body"].isNull())
        {
            _responseBody=std::make_shared<std::string>(r["response_body"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int32_t &WebhooksLogs::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WebhooksLogs::getId() const noexcept
{
    return _id;
}
const typename WebhooksLogs::PrimaryKeyType & WebhooksLogs::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &WebhooksLogs::getValueOfWebhooksWebhookId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_webhooksWebhookId)
        return *_webhooksWebhookId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WebhooksLogs::getWebhooksWebhookId() const noexcept
{
    return _webhooksWebhookId;
}
void WebhooksLogs::setWebhooksWebhookId(const int32_t &pWebhooksWebhookId) noexcept
{
    _webhooksWebhookId = std::make_shared<int32_t>(pWebhooksWebhookId);
    _dirtyFlag[1] = true;
}


const std::string &WebhooksLogs::getValueOfEventName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_eventName)
        return *_eventName;
    return defaultValue;
}
const std::shared_ptr<std::string> &WebhooksLogs::getEventName() const noexcept
{
    return _eventName;
}
void WebhooksLogs::setEventName(const std::string &pEventName) noexcept
{
    _eventName = std::make_shared<std::string>(pEventName);
    _dirtyFlag[2] = true;
}
void WebhooksLogs::setEventName(std::string &&pEventName) noexcept
{
    _eventName = std::make_shared<std::string>(std::move(pEventName));
    _dirtyFlag[2] = true;
}


const std::string &WebhooksLogs::getValueOfUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_url)
        return *_url;
    return defaultValue;
}
const std::shared_ptr<std::string> &WebhooksLogs::getUrl() const noexcept
{
    return _url;
}
void WebhooksLogs::setUrl(const std::string &pUrl) noexcept
{
    _url = std::make_shared<std::string>(pUrl);
    _dirtyFlag[3] = true;
}
void WebhooksLogs::setUrl(std::string &&pUrl) noexcept
{
    _url = std::make_shared<std::string>(std::move(pUrl));
    _dirtyFlag[3] = true;
}


const std::string &WebhooksLogs::getValueOfRequestHeaders() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_requestHeaders)
        return *_requestHeaders;
    return defaultValue;
}
const std::shared_ptr<std::string> &WebhooksLogs::getRequestHeaders() const noexcept
{
    return _requestHeaders;
}
void WebhooksLogs::setRequestHeaders(const std::string &pRequestHeaders) noexcept
{
    _requestHeaders = std::make_shared<std::string>(pRequestHeaders);
    _dirtyFlag[4] = true;
}
void WebhooksLogs::setRequestHeaders(std::string &&pRequestHeaders) noexcept
{
    _requestHeaders = std::make_shared<std::string>(std::move(pRequestHeaders));
    _dirtyFlag[4] = true;
}


const std::string &WebhooksLogs::getValueOfRequestBody() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_requestBody)
        return *_requestBody;
    return defaultValue;
}
const std::shared_ptr<std::string> &WebhooksLogs::getRequestBody() const noexcept
{
    return _requestBody;
}
void WebhooksLogs::setRequestBody(const std::string &pRequestBody) noexcept
{
    _requestBody = std::make_shared<std::string>(pRequestBody);
    _dirtyFlag[5] = true;
}
void WebhooksLogs::setRequestBody(std::string &&pRequestBody) noexcept
{
    _requestBody = std::make_shared<std::string>(std::move(pRequestBody));
    _dirtyFlag[5] = true;
}


const int32_t &WebhooksLogs::getValueOfResponseCode() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_responseCode)
        return *_responseCode;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WebhooksLogs::getResponseCode() const noexcept
{
    return _responseCode;
}
void WebhooksLogs::setResponseCode(const int32_t &pResponseCode) noexcept
{
    _responseCode = std::make_shared<int32_t>(pResponseCode);
    _dirtyFlag[6] = true;
}


const std::string &WebhooksLogs::getValueOfResponseHeaders() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_responseHeaders)
        return *_responseHeaders;
    return defaultValue;
}
const std::shared_ptr<std::string> &WebhooksLogs::getResponseHeaders() const noexcept
{
    return _responseHeaders;
}
void WebhooksLogs::setResponseHeaders(const std::string &pResponseHeaders) noexcept
{
    _responseHeaders = std::make_shared<std::string>(pResponseHeaders);
    _dirtyFlag[7] = true;
}
void WebhooksLogs::setResponseHeaders(std::string &&pResponseHeaders) noexcept
{
    _responseHeaders = std::make_shared<std::string>(std::move(pResponseHeaders));
    _dirtyFlag[7] = true;
}


const std::string &WebhooksLogs::getValueOfResponseBody() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_responseBody)
        return *_responseBody;
    return defaultValue;
}
const std::shared_ptr<std::string> &WebhooksLogs::getResponseBody() const noexcept
{
    return _responseBody;
}
void WebhooksLogs::setResponseBody(const std::string &pResponseBody) noexcept
{
    _responseBody = std::make_shared<std::string>(pResponseBody);
    _dirtyFlag[8] = true;
}
void WebhooksLogs::setResponseBody(std::string &&pResponseBody) noexcept
{
    _responseBody = std::make_shared<std::string>(std::move(pResponseBody));
    _dirtyFlag[8] = true;
}


const ::trantor::Date &WebhooksLogs::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WebhooksLogs::getCreatedAt() const noexcept
{
    return _createdAt;
}
void WebhooksLogs::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[9] = true;
}


const ::trantor::Date &WebhooksLogs::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WebhooksLogs::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void WebhooksLogs::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[10] = true;
}


void WebhooksLogs::updateId(const uint64_t id)
{
}

const std::vector<std::string> &WebhooksLogs::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "webhooks_webhook_id",
        "event_name",
        "url",
        "request_headers",
        "request_body",
        "response_code",
        "response_headers",
        "response_body",
        "created_at",
        "updated_at"
    };
    return _inCols;
}

void WebhooksLogs::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getWebhooksWebhookId())
    {
        binder << getValueOfWebhooksWebhookId();
    }
    else
    {
        binder << nullptr;
    }
    if(getEventName())
    {
        binder << getValueOfEventName();
    }
    else
    {
        binder << nullptr;
    }
    if(getUrl())
    {
        binder << getValueOfUrl();
    }
    else
    {
        binder << nullptr;
    }
    if(getRequestHeaders())
    {
        binder << getValueOfRequestHeaders();
    }
    else
    {
        binder << nullptr;
    }
    if(getRequestBody())
    {
        binder << getValueOfRequestBody();
    }
    else
    {
        binder << nullptr;
    }
    if(getResponseCode())
    {
        binder << getValueOfResponseCode();
    }
    else
    {
        binder << nullptr;
    }
    if(getResponseHeaders())
    {
        binder << getValueOfResponseHeaders();
    }
    else
    {
        binder << nullptr;
    }
    if(getResponseBody())
    {
        binder << getValueOfResponseBody();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> WebhooksLogs::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void WebhooksLogs::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getWebhooksWebhookId())
        {
            binder << getValueOfWebhooksWebhookId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getEventName())
        {
            binder << getValueOfEventName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getUrl())
        {
            binder << getValueOfUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getRequestHeaders())
        {
            binder << getValueOfRequestHeaders();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getRequestBody())
        {
            binder << getValueOfRequestBody();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getResponseCode())
        {
            binder << getValueOfResponseCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getResponseHeaders())
        {
            binder << getValueOfResponseHeaders();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getResponseBody())
        {
            binder << getValueOfResponseBody();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value WebhooksLogs::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getWebhooksWebhookId())
    {
        ret["webhooks_webhook_id"]=getValueOfWebhooksWebhookId();
    }
    else
    {
        ret["webhooks_webhook_id"]=Json::Value();
    }
    if(getEventName())
    {
        ret["event_name"]=getValueOfEventName();
    }
    else
    {
        ret["event_name"]=Json::Value();
    }
    if(getUrl())
    {
        ret["url"]=getValueOfUrl();
    }
    else
    {
        ret["url"]=Json::Value();
    }
    if(getRequestHeaders())
    {
        ret["request_headers"]=getValueOfRequestHeaders();
    }
    else
    {
        ret["request_headers"]=Json::Value();
    }
    if(getRequestBody())
    {
        ret["request_body"]=getValueOfRequestBody();
    }
    else
    {
        ret["request_body"]=Json::Value();
    }
    if(getResponseCode())
    {
        ret["response_code"]=getValueOfResponseCode();
    }
    else
    {
        ret["response_code"]=Json::Value();
    }
    if(getResponseHeaders())
    {
        ret["response_headers"]=getValueOfResponseHeaders();
    }
    else
    {
        ret["response_headers"]=Json::Value();
    }
    if(getResponseBody())
    {
        ret["response_body"]=getValueOfResponseBody();
    }
    else
    {
        ret["response_body"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}
