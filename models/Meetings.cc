/**
 *
 *  Meetings.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Meetings.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Meetings::Cols::_id = "id";
const std::string Meetings::Cols::_title = "title";
const std::string Meetings::Cols::_author_id = "author_id";
const std::string Meetings::Cols::_project_id = "project_id";
const std::string Meetings::Cols::_location = "location";
const std::string Meetings::Cols::_start_time = "start_time";
const std::string Meetings::Cols::_duration = "duration";
const std::string Meetings::Cols::_created_at = "created_at";
const std::string Meetings::Cols::_updated_at = "updated_at";
const std::string Meetings::primaryKeyName = "id";
const bool Meetings::hasPrimaryKey = true;
const std::string Meetings::tableName = "meetings";

const std::vector<typename Meetings::MetaData> Meetings::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"title","std::string","character varying",0,0,0,0},
{"author_id","int32_t","integer",4,0,0,0},
{"project_id","int32_t","integer",4,0,0,0},
{"location","std::string","character varying",0,0,0,0},
{"start_time","::trantor::Date","timestamp without time zone",0,0,0,0},
{"duration","double","double precision",8,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &Meetings::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Meetings::Meetings(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["title"].isNull())
        {
            _title=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["location"].isNull())
        {
            _location=std::make_shared<std::string>(r["location"].as<std::string>());
        }
        if(!r["start_time"].isNull())
        {
            auto timeStr = r["start_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _startTime=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["duration"].isNull())
        {
            _duration=std::make_shared<double>(r["duration"].as<double>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int32_t &Meetings::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Meetings::getId() const noexcept
{
    return _id;
}
const typename Meetings::PrimaryKeyType & Meetings::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &Meetings::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_title)
        return *_title;
    return defaultValue;
}
const std::shared_ptr<std::string> &Meetings::getTitle() const noexcept
{
    return _title;
}
void Meetings::setTitle(const std::string &pTitle) noexcept
{
    _title = std::make_shared<std::string>(pTitle);
    _dirtyFlag[1] = true;
}
void Meetings::setTitle(std::string &&pTitle) noexcept
{
    _title = std::make_shared<std::string>(std::move(pTitle));
    _dirtyFlag[1] = true;
}


const int32_t &Meetings::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Meetings::getAuthorId() const noexcept
{
    return _authorId;
}
void Meetings::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[2] = true;
}


const int32_t &Meetings::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Meetings::getProjectId() const noexcept
{
    return _projectId;
}
void Meetings::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[3] = true;
}


const std::string &Meetings::getValueOfLocation() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_location)
        return *_location;
    return defaultValue;
}
const std::shared_ptr<std::string> &Meetings::getLocation() const noexcept
{
    return _location;
}
void Meetings::setLocation(const std::string &pLocation) noexcept
{
    _location = std::make_shared<std::string>(pLocation);
    _dirtyFlag[4] = true;
}
void Meetings::setLocation(std::string &&pLocation) noexcept
{
    _location = std::make_shared<std::string>(std::move(pLocation));
    _dirtyFlag[4] = true;
}


const ::trantor::Date &Meetings::getValueOfStartTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_startTime)
        return *_startTime;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Meetings::getStartTime() const noexcept
{
    return _startTime;
}
void Meetings::setStartTime(const ::trantor::Date &pStartTime) noexcept
{
    _startTime = std::make_shared<::trantor::Date>(pStartTime);
    _dirtyFlag[5] = true;
}


const double &Meetings::getValueOfDuration() const noexcept
{
    const static double defaultValue = double();
    if(_duration)
        return *_duration;
    return defaultValue;
}
const std::shared_ptr<double> &Meetings::getDuration() const noexcept
{
    return _duration;
}
void Meetings::setDuration(const double &pDuration) noexcept
{
    _duration = std::make_shared<double>(pDuration);
    _dirtyFlag[6] = true;
}


const ::trantor::Date &Meetings::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Meetings::getCreatedAt() const noexcept
{
    return _createdAt;
}
void Meetings::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[7] = true;
}


const ::trantor::Date &Meetings::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Meetings::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void Meetings::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[8] = true;
}


void Meetings::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Meetings::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "title",
        "author_id",
        "project_id",
        "location",
        "start_time",
        "duration",
        "created_at",
        "updated_at"
    };
    return _inCols;
}

void Meetings::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getTitle())
    {
        binder << getValueOfTitle();
    }
    else
    {
        binder << nullptr;
    }
    if(getAuthorId())
    {
        binder << getValueOfAuthorId();
    }
    else
    {
        binder << nullptr;
    }
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getLocation())
    {
        binder << getValueOfLocation();
    }
    else
    {
        binder << nullptr;
    }
    if(getStartTime())
    {
        binder << getValueOfStartTime();
    }
    else
    {
        binder << nullptr;
    }
    if(getDuration())
    {
        binder << getValueOfDuration();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Meetings::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Meetings::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getLocation())
        {
            binder << getValueOfLocation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getStartTime())
        {
            binder << getValueOfStartTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getDuration())
        {
            binder << getValueOfDuration();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Meetings::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getLocation())
    {
        ret["location"]=getValueOfLocation();
    }
    else
    {
        ret["location"]=Json::Value();
    }
    if(getStartTime())
    {
        ret["start_time"]=getStartTime()->toDbStringLocal();
    }
    else
    {
        ret["start_time"]=Json::Value();
    }
    if(getDuration())
    {
        ret["duration"]=getValueOfDuration();
    }
    else
    {
        ret["duration"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}
