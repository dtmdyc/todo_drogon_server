/**
 *
 *  MenuItems.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MenuItems.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string MenuItems::Cols::_id = "id";
const std::string MenuItems::Cols::_name = "name";
const std::string MenuItems::Cols::_title = "title";
const std::string MenuItems::Cols::_parent_id = "parent_id";
const std::string MenuItems::Cols::_options = "options";
const std::string MenuItems::Cols::_navigatable_id = "navigatable_id";
const std::string MenuItems::Cols::_type = "type";
const std::string MenuItems::primaryKeyName = "id";
const bool MenuItems::hasPrimaryKey = true;
const std::string MenuItems::tableName = "menu_items";

const std::vector<typename MenuItems::MetaData> MenuItems::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"name","std::string","character varying",0,0,0,0},
{"title","std::string","character varying",0,0,0,0},
{"parent_id","int32_t","integer",4,0,0,0},
{"options","std::string","text",0,0,0,0},
{"navigatable_id","int32_t","integer",4,0,0,0},
{"type","std::string","character varying",0,0,0,0}
};
const std::string &MenuItems::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
MenuItems::MenuItems(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["title"].isNull())
        {
            _title=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["parent_id"].isNull())
        {
            _parentId=std::make_shared<int32_t>(r["parent_id"].as<int32_t>());
        }
        if(!r["options"].isNull())
        {
            _options=std::make_shared<std::string>(r["options"].as<std::string>());
        }
        if(!r["navigatable_id"].isNull())
        {
            _navigatableId=std::make_shared<int32_t>(r["navigatable_id"].as<int32_t>());
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
}
const int32_t &MenuItems::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MenuItems::getId() const noexcept
{
    return _id;
}
const typename MenuItems::PrimaryKeyType & MenuItems::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &MenuItems::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &MenuItems::getName() const noexcept
{
    return _name;
}
void MenuItems::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[1] = true;
}
void MenuItems::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[1] = true;
}


const std::string &MenuItems::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_title)
        return *_title;
    return defaultValue;
}
const std::shared_ptr<std::string> &MenuItems::getTitle() const noexcept
{
    return _title;
}
void MenuItems::setTitle(const std::string &pTitle) noexcept
{
    _title = std::make_shared<std::string>(pTitle);
    _dirtyFlag[2] = true;
}
void MenuItems::setTitle(std::string &&pTitle) noexcept
{
    _title = std::make_shared<std::string>(std::move(pTitle));
    _dirtyFlag[2] = true;
}


const int32_t &MenuItems::getValueOfParentId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_parentId)
        return *_parentId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MenuItems::getParentId() const noexcept
{
    return _parentId;
}
void MenuItems::setParentId(const int32_t &pParentId) noexcept
{
    _parentId = std::make_shared<int32_t>(pParentId);
    _dirtyFlag[3] = true;
}


const std::string &MenuItems::getValueOfOptions() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_options)
        return *_options;
    return defaultValue;
}
const std::shared_ptr<std::string> &MenuItems::getOptions() const noexcept
{
    return _options;
}
void MenuItems::setOptions(const std::string &pOptions) noexcept
{
    _options = std::make_shared<std::string>(pOptions);
    _dirtyFlag[4] = true;
}
void MenuItems::setOptions(std::string &&pOptions) noexcept
{
    _options = std::make_shared<std::string>(std::move(pOptions));
    _dirtyFlag[4] = true;
}


const int32_t &MenuItems::getValueOfNavigatableId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_navigatableId)
        return *_navigatableId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MenuItems::getNavigatableId() const noexcept
{
    return _navigatableId;
}
void MenuItems::setNavigatableId(const int32_t &pNavigatableId) noexcept
{
    _navigatableId = std::make_shared<int32_t>(pNavigatableId);
    _dirtyFlag[5] = true;
}


const std::string &MenuItems::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &MenuItems::getType() const noexcept
{
    return _type;
}
void MenuItems::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[6] = true;
}
void MenuItems::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[6] = true;
}


void MenuItems::updateId(const uint64_t id)
{
}

const std::vector<std::string> &MenuItems::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "name",
        "title",
        "parent_id",
        "options",
        "navigatable_id",
        "type"
    };
    return _inCols;
}

void MenuItems::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getName())
    {
        binder << getValueOfName();
    }
    else
    {
        binder << nullptr;
    }
    if(getTitle())
    {
        binder << getValueOfTitle();
    }
    else
    {
        binder << nullptr;
    }
    if(getParentId())
    {
        binder << getValueOfParentId();
    }
    else
    {
        binder << nullptr;
    }
    if(getOptions())
    {
        binder << getValueOfOptions();
    }
    else
    {
        binder << nullptr;
    }
    if(getNavigatableId())
    {
        binder << getValueOfNavigatableId();
    }
    else
    {
        binder << nullptr;
    }
    if(getType())
    {
        binder << getValueOfType();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> MenuItems::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void MenuItems::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getOptions())
        {
            binder << getValueOfOptions();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getNavigatableId())
        {
            binder << getValueOfNavigatableId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MenuItems::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getOptions())
    {
        ret["options"]=getValueOfOptions();
    }
    else
    {
        ret["options"]=Json::Value();
    }
    if(getNavigatableId())
    {
        ret["navigatable_id"]=getValueOfNavigatableId();
    }
    else
    {
        ret["navigatable_id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    return ret;
}
