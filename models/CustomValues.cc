/**
 *
 *  CustomValues.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "CustomValues.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string CustomValues::Cols::_id = "id";
const std::string CustomValues::Cols::_customized_type = "customized_type";
const std::string CustomValues::Cols::_customized_id = "customized_id";
const std::string CustomValues::Cols::_custom_field_id = "custom_field_id";
const std::string CustomValues::Cols::_value = "value";
const std::string CustomValues::primaryKeyName = "id";
const bool CustomValues::hasPrimaryKey = true;
const std::string CustomValues::tableName = "custom_values";

const std::vector<typename CustomValues::MetaData> CustomValues::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"customized_type","std::string","character varying",30,0,0,1},
{"customized_id","int32_t","integer",4,0,0,1},
{"custom_field_id","int32_t","integer",4,0,0,1},
{"value","std::string","text",0,0,0,0}
};
const std::string &CustomValues::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
CustomValues::CustomValues(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["customized_type"].isNull())
        {
            _customizedType=std::make_shared<std::string>(r["customized_type"].as<std::string>());
        }
        if(!r["customized_id"].isNull())
        {
            _customizedId=std::make_shared<int32_t>(r["customized_id"].as<int32_t>());
        }
        if(!r["custom_field_id"].isNull())
        {
            _customFieldId=std::make_shared<int32_t>(r["custom_field_id"].as<int32_t>());
        }
        if(!r["value"].isNull())
        {
            _value=std::make_shared<std::string>(r["value"].as<std::string>());
        }
}
const int32_t &CustomValues::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomValues::getId() const noexcept
{
    return _id;
}
const typename CustomValues::PrimaryKeyType & CustomValues::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &CustomValues::getValueOfCustomizedType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_customizedType)
        return *_customizedType;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomValues::getCustomizedType() const noexcept
{
    return _customizedType;
}
void CustomValues::setCustomizedType(const std::string &pCustomizedType) noexcept
{
    _customizedType = std::make_shared<std::string>(pCustomizedType);
    _dirtyFlag[1] = true;
}
void CustomValues::setCustomizedType(std::string &&pCustomizedType) noexcept
{
    _customizedType = std::make_shared<std::string>(std::move(pCustomizedType));
    _dirtyFlag[1] = true;
}


const int32_t &CustomValues::getValueOfCustomizedId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_customizedId)
        return *_customizedId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomValues::getCustomizedId() const noexcept
{
    return _customizedId;
}
void CustomValues::setCustomizedId(const int32_t &pCustomizedId) noexcept
{
    _customizedId = std::make_shared<int32_t>(pCustomizedId);
    _dirtyFlag[2] = true;
}


const int32_t &CustomValues::getValueOfCustomFieldId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_customFieldId)
        return *_customFieldId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomValues::getCustomFieldId() const noexcept
{
    return _customFieldId;
}
void CustomValues::setCustomFieldId(const int32_t &pCustomFieldId) noexcept
{
    _customFieldId = std::make_shared<int32_t>(pCustomFieldId);
    _dirtyFlag[3] = true;
}


const std::string &CustomValues::getValueOfValue() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_value)
        return *_value;
    return defaultValue;
}
const std::shared_ptr<std::string> &CustomValues::getValue() const noexcept
{
    return _value;
}
void CustomValues::setValue(const std::string &pValue) noexcept
{
    _value = std::make_shared<std::string>(pValue);
    _dirtyFlag[4] = true;
}
void CustomValues::setValue(std::string &&pValue) noexcept
{
    _value = std::make_shared<std::string>(std::move(pValue));
    _dirtyFlag[4] = true;
}


void CustomValues::updateId(const uint64_t id)
{
}

const std::vector<std::string> &CustomValues::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "customized_type",
        "customized_id",
        "custom_field_id",
        "value"
    };
    return _inCols;
}

void CustomValues::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getCustomizedType())
    {
        binder << getValueOfCustomizedType();
    }
    else
    {
        binder << nullptr;
    }
    if(getCustomizedId())
    {
        binder << getValueOfCustomizedId();
    }
    else
    {
        binder << nullptr;
    }
    if(getCustomFieldId())
    {
        binder << getValueOfCustomFieldId();
    }
    else
    {
        binder << nullptr;
    }
    if(getValue())
    {
        binder << getValueOfValue();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> CustomValues::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void CustomValues::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getCustomizedType())
        {
            binder << getValueOfCustomizedType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getCustomizedId())
        {
            binder << getValueOfCustomizedId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getCustomFieldId())
        {
            binder << getValueOfCustomFieldId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getValue())
        {
            binder << getValueOfValue();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value CustomValues::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCustomizedType())
    {
        ret["customized_type"]=getValueOfCustomizedType();
    }
    else
    {
        ret["customized_type"]=Json::Value();
    }
    if(getCustomizedId())
    {
        ret["customized_id"]=getValueOfCustomizedId();
    }
    else
    {
        ret["customized_id"]=Json::Value();
    }
    if(getCustomFieldId())
    {
        ret["custom_field_id"]=getValueOfCustomFieldId();
    }
    else
    {
        ret["custom_field_id"]=Json::Value();
    }
    if(getValue())
    {
        ret["value"]=getValueOfValue();
    }
    else
    {
        ret["value"]=Json::Value();
    }
    return ret;
}
