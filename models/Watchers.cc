/**
 *
 *  Watchers.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Watchers.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Watchers::Cols::_id = "id";
const std::string Watchers::Cols::_watchable_type = "watchable_type";
const std::string Watchers::Cols::_watchable_id = "watchable_id";
const std::string Watchers::Cols::_user_id = "user_id";
const std::string Watchers::primaryKeyName = "id";
const bool Watchers::hasPrimaryKey = true;
const std::string Watchers::tableName = "watchers";

const std::vector<typename Watchers::MetaData> Watchers::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"watchable_type","std::string","character varying",0,0,0,1},
{"watchable_id","int32_t","integer",4,0,0,1},
{"user_id","int32_t","integer",4,0,0,0}
};
const std::string &Watchers::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Watchers::Watchers(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["watchable_type"].isNull())
        {
            _watchableType=std::make_shared<std::string>(r["watchable_type"].as<std::string>());
        }
        if(!r["watchable_id"].isNull())
        {
            _watchableId=std::make_shared<int32_t>(r["watchable_id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
}
const int32_t &Watchers::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Watchers::getId() const noexcept
{
    return _id;
}
const typename Watchers::PrimaryKeyType & Watchers::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &Watchers::getValueOfWatchableType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_watchableType)
        return *_watchableType;
    return defaultValue;
}
const std::shared_ptr<std::string> &Watchers::getWatchableType() const noexcept
{
    return _watchableType;
}
void Watchers::setWatchableType(const std::string &pWatchableType) noexcept
{
    _watchableType = std::make_shared<std::string>(pWatchableType);
    _dirtyFlag[1] = true;
}
void Watchers::setWatchableType(std::string &&pWatchableType) noexcept
{
    _watchableType = std::make_shared<std::string>(std::move(pWatchableType));
    _dirtyFlag[1] = true;
}


const int32_t &Watchers::getValueOfWatchableId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_watchableId)
        return *_watchableId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Watchers::getWatchableId() const noexcept
{
    return _watchableId;
}
void Watchers::setWatchableId(const int32_t &pWatchableId) noexcept
{
    _watchableId = std::make_shared<int32_t>(pWatchableId);
    _dirtyFlag[2] = true;
}


const int32_t &Watchers::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Watchers::getUserId() const noexcept
{
    return _userId;
}
void Watchers::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[3] = true;
}


void Watchers::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Watchers::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "watchable_type",
        "watchable_id",
        "user_id"
    };
    return _inCols;
}

void Watchers::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getWatchableType())
    {
        binder << getValueOfWatchableType();
    }
    else
    {
        binder << nullptr;
    }
    if(getWatchableId())
    {
        binder << getValueOfWatchableId();
    }
    else
    {
        binder << nullptr;
    }
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Watchers::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Watchers::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getWatchableType())
        {
            binder << getValueOfWatchableType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getWatchableId())
        {
            binder << getValueOfWatchableId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Watchers::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getWatchableType())
    {
        ret["watchable_type"]=getValueOfWatchableType();
    }
    else
    {
        ret["watchable_type"]=Json::Value();
    }
    if(getWatchableId())
    {
        ret["watchable_id"]=getValueOfWatchableId();
    }
    else
    {
        ret["watchable_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    return ret;
}
