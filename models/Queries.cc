/**
 *
 *  Queries.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Queries.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Queries::Cols::_id = "id";
const std::string Queries::Cols::_project_id = "project_id";
const std::string Queries::Cols::_name = "name";
const std::string Queries::Cols::_filters = "filters";
const std::string Queries::Cols::_user_id = "user_id";
const std::string Queries::Cols::_is_public = "is_public";
const std::string Queries::Cols::_column_names = "column_names";
const std::string Queries::Cols::_sort_criteria = "sort_criteria";
const std::string Queries::Cols::_group_by = "group_by";
const std::string Queries::Cols::_display_sums = "display_sums";
const std::string Queries::Cols::_timeline_visible = "timeline_visible";
const std::string Queries::Cols::_show_hierarchies = "show_hierarchies";
const std::string Queries::Cols::_timeline_zoom_level = "timeline_zoom_level";
const std::string Queries::Cols::_timeline_labels = "timeline_labels";
const std::string Queries::Cols::_highlighting_mode = "highlighting_mode";
const std::string Queries::Cols::_highlighted_attributes = "highlighted_attributes";
const std::string Queries::Cols::_hidden = "hidden";
const std::string Queries::Cols::_created_at = "created_at";
const std::string Queries::Cols::_updated_at = "updated_at";
const std::string Queries::Cols::_display_representation = "display_representation";
const std::string Queries::primaryKeyName = "id";
const bool Queries::hasPrimaryKey = true;
const std::string Queries::tableName = "queries";

const std::vector<typename Queries::MetaData> Queries::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"project_id","int32_t","integer",4,0,0,0},
{"name","std::string","character varying",0,0,0,1},
{"filters","std::string","text",0,0,0,0},
{"user_id","int32_t","integer",4,0,0,1},
{"is_public","bool","boolean",1,0,0,1},
{"column_names","std::string","text",0,0,0,0},
{"sort_criteria","std::string","text",0,0,0,0},
{"group_by","std::string","character varying",0,0,0,0},
{"display_sums","bool","boolean",1,0,0,1},
{"timeline_visible","bool","boolean",1,0,0,0},
{"show_hierarchies","bool","boolean",1,0,0,0},
{"timeline_zoom_level","int32_t","integer",4,0,0,0},
{"timeline_labels","std::string","text",0,0,0,0},
{"highlighting_mode","std::string","text",0,0,0,0},
{"highlighted_attributes","std::string","text",0,0,0,0},
{"hidden","bool","boolean",1,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"display_representation","std::string","text",0,0,0,0}
};
const std::string &Queries::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Queries::Queries(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["filters"].isNull())
        {
            _filters=std::make_shared<std::string>(r["filters"].as<std::string>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["is_public"].isNull())
        {
            _isPublic=std::make_shared<bool>(r["is_public"].as<bool>());
        }
        if(!r["column_names"].isNull())
        {
            _columnNames=std::make_shared<std::string>(r["column_names"].as<std::string>());
        }
        if(!r["sort_criteria"].isNull())
        {
            _sortCriteria=std::make_shared<std::string>(r["sort_criteria"].as<std::string>());
        }
        if(!r["group_by"].isNull())
        {
            _groupBy=std::make_shared<std::string>(r["group_by"].as<std::string>());
        }
        if(!r["display_sums"].isNull())
        {
            _displaySums=std::make_shared<bool>(r["display_sums"].as<bool>());
        }
        if(!r["timeline_visible"].isNull())
        {
            _timelineVisible=std::make_shared<bool>(r["timeline_visible"].as<bool>());
        }
        if(!r["show_hierarchies"].isNull())
        {
            _showHierarchies=std::make_shared<bool>(r["show_hierarchies"].as<bool>());
        }
        if(!r["timeline_zoom_level"].isNull())
        {
            _timelineZoomLevel=std::make_shared<int32_t>(r["timeline_zoom_level"].as<int32_t>());
        }
        if(!r["timeline_labels"].isNull())
        {
            _timelineLabels=std::make_shared<std::string>(r["timeline_labels"].as<std::string>());
        }
        if(!r["highlighting_mode"].isNull())
        {
            _highlightingMode=std::make_shared<std::string>(r["highlighting_mode"].as<std::string>());
        }
        if(!r["highlighted_attributes"].isNull())
        {
            _highlightedAttributes=std::make_shared<std::string>(r["highlighted_attributes"].as<std::string>());
        }
        if(!r["hidden"].isNull())
        {
            _hidden=std::make_shared<bool>(r["hidden"].as<bool>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["display_representation"].isNull())
        {
            _displayRepresentation=std::make_shared<std::string>(r["display_representation"].as<std::string>());
        }
}
const int32_t &Queries::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Queries::getId() const noexcept
{
    return _id;
}
const typename Queries::PrimaryKeyType & Queries::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &Queries::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Queries::getProjectId() const noexcept
{
    return _projectId;
}
void Queries::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[1] = true;
}


const std::string &Queries::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &Queries::getName() const noexcept
{
    return _name;
}
void Queries::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[2] = true;
}
void Queries::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[2] = true;
}


const std::string &Queries::getValueOfFilters() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_filters)
        return *_filters;
    return defaultValue;
}
const std::shared_ptr<std::string> &Queries::getFilters() const noexcept
{
    return _filters;
}
void Queries::setFilters(const std::string &pFilters) noexcept
{
    _filters = std::make_shared<std::string>(pFilters);
    _dirtyFlag[3] = true;
}
void Queries::setFilters(std::string &&pFilters) noexcept
{
    _filters = std::make_shared<std::string>(std::move(pFilters));
    _dirtyFlag[3] = true;
}


const int32_t &Queries::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Queries::getUserId() const noexcept
{
    return _userId;
}
void Queries::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[4] = true;
}


const bool &Queries::getValueOfIsPublic() const noexcept
{
    const static bool defaultValue = bool();
    if(_isPublic)
        return *_isPublic;
    return defaultValue;
}
const std::shared_ptr<bool> &Queries::getIsPublic() const noexcept
{
    return _isPublic;
}
void Queries::setIsPublic(const bool &pIsPublic) noexcept
{
    _isPublic = std::make_shared<bool>(pIsPublic);
    _dirtyFlag[5] = true;
}


const std::string &Queries::getValueOfColumnNames() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_columnNames)
        return *_columnNames;
    return defaultValue;
}
const std::shared_ptr<std::string> &Queries::getColumnNames() const noexcept
{
    return _columnNames;
}
void Queries::setColumnNames(const std::string &pColumnNames) noexcept
{
    _columnNames = std::make_shared<std::string>(pColumnNames);
    _dirtyFlag[6] = true;
}
void Queries::setColumnNames(std::string &&pColumnNames) noexcept
{
    _columnNames = std::make_shared<std::string>(std::move(pColumnNames));
    _dirtyFlag[6] = true;
}


const std::string &Queries::getValueOfSortCriteria() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_sortCriteria)
        return *_sortCriteria;
    return defaultValue;
}
const std::shared_ptr<std::string> &Queries::getSortCriteria() const noexcept
{
    return _sortCriteria;
}
void Queries::setSortCriteria(const std::string &pSortCriteria) noexcept
{
    _sortCriteria = std::make_shared<std::string>(pSortCriteria);
    _dirtyFlag[7] = true;
}
void Queries::setSortCriteria(std::string &&pSortCriteria) noexcept
{
    _sortCriteria = std::make_shared<std::string>(std::move(pSortCriteria));
    _dirtyFlag[7] = true;
}


const std::string &Queries::getValueOfGroupBy() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_groupBy)
        return *_groupBy;
    return defaultValue;
}
const std::shared_ptr<std::string> &Queries::getGroupBy() const noexcept
{
    return _groupBy;
}
void Queries::setGroupBy(const std::string &pGroupBy) noexcept
{
    _groupBy = std::make_shared<std::string>(pGroupBy);
    _dirtyFlag[8] = true;
}
void Queries::setGroupBy(std::string &&pGroupBy) noexcept
{
    _groupBy = std::make_shared<std::string>(std::move(pGroupBy));
    _dirtyFlag[8] = true;
}


const bool &Queries::getValueOfDisplaySums() const noexcept
{
    const static bool defaultValue = bool();
    if(_displaySums)
        return *_displaySums;
    return defaultValue;
}
const std::shared_ptr<bool> &Queries::getDisplaySums() const noexcept
{
    return _displaySums;
}
void Queries::setDisplaySums(const bool &pDisplaySums) noexcept
{
    _displaySums = std::make_shared<bool>(pDisplaySums);
    _dirtyFlag[9] = true;
}


const bool &Queries::getValueOfTimelineVisible() const noexcept
{
    const static bool defaultValue = bool();
    if(_timelineVisible)
        return *_timelineVisible;
    return defaultValue;
}
const std::shared_ptr<bool> &Queries::getTimelineVisible() const noexcept
{
    return _timelineVisible;
}
void Queries::setTimelineVisible(const bool &pTimelineVisible) noexcept
{
    _timelineVisible = std::make_shared<bool>(pTimelineVisible);
    _dirtyFlag[10] = true;
}


const bool &Queries::getValueOfShowHierarchies() const noexcept
{
    const static bool defaultValue = bool();
    if(_showHierarchies)
        return *_showHierarchies;
    return defaultValue;
}
const std::shared_ptr<bool> &Queries::getShowHierarchies() const noexcept
{
    return _showHierarchies;
}
void Queries::setShowHierarchies(const bool &pShowHierarchies) noexcept
{
    _showHierarchies = std::make_shared<bool>(pShowHierarchies);
    _dirtyFlag[11] = true;
}


const int32_t &Queries::getValueOfTimelineZoomLevel() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_timelineZoomLevel)
        return *_timelineZoomLevel;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Queries::getTimelineZoomLevel() const noexcept
{
    return _timelineZoomLevel;
}
void Queries::setTimelineZoomLevel(const int32_t &pTimelineZoomLevel) noexcept
{
    _timelineZoomLevel = std::make_shared<int32_t>(pTimelineZoomLevel);
    _dirtyFlag[12] = true;
}


const std::string &Queries::getValueOfTimelineLabels() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_timelineLabels)
        return *_timelineLabels;
    return defaultValue;
}
const std::shared_ptr<std::string> &Queries::getTimelineLabels() const noexcept
{
    return _timelineLabels;
}
void Queries::setTimelineLabels(const std::string &pTimelineLabels) noexcept
{
    _timelineLabels = std::make_shared<std::string>(pTimelineLabels);
    _dirtyFlag[13] = true;
}
void Queries::setTimelineLabels(std::string &&pTimelineLabels) noexcept
{
    _timelineLabels = std::make_shared<std::string>(std::move(pTimelineLabels));
    _dirtyFlag[13] = true;
}


const std::string &Queries::getValueOfHighlightingMode() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_highlightingMode)
        return *_highlightingMode;
    return defaultValue;
}
const std::shared_ptr<std::string> &Queries::getHighlightingMode() const noexcept
{
    return _highlightingMode;
}
void Queries::setHighlightingMode(const std::string &pHighlightingMode) noexcept
{
    _highlightingMode = std::make_shared<std::string>(pHighlightingMode);
    _dirtyFlag[14] = true;
}
void Queries::setHighlightingMode(std::string &&pHighlightingMode) noexcept
{
    _highlightingMode = std::make_shared<std::string>(std::move(pHighlightingMode));
    _dirtyFlag[14] = true;
}


const std::string &Queries::getValueOfHighlightedAttributes() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_highlightedAttributes)
        return *_highlightedAttributes;
    return defaultValue;
}
const std::shared_ptr<std::string> &Queries::getHighlightedAttributes() const noexcept
{
    return _highlightedAttributes;
}
void Queries::setHighlightedAttributes(const std::string &pHighlightedAttributes) noexcept
{
    _highlightedAttributes = std::make_shared<std::string>(pHighlightedAttributes);
    _dirtyFlag[15] = true;
}
void Queries::setHighlightedAttributes(std::string &&pHighlightedAttributes) noexcept
{
    _highlightedAttributes = std::make_shared<std::string>(std::move(pHighlightedAttributes));
    _dirtyFlag[15] = true;
}


const bool &Queries::getValueOfHidden() const noexcept
{
    const static bool defaultValue = bool();
    if(_hidden)
        return *_hidden;
    return defaultValue;
}
const std::shared_ptr<bool> &Queries::getHidden() const noexcept
{
    return _hidden;
}
void Queries::setHidden(const bool &pHidden) noexcept
{
    _hidden = std::make_shared<bool>(pHidden);
    _dirtyFlag[16] = true;
}


const ::trantor::Date &Queries::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Queries::getCreatedAt() const noexcept
{
    return _createdAt;
}
void Queries::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[17] = true;
}


const ::trantor::Date &Queries::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Queries::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void Queries::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[18] = true;
}


const std::string &Queries::getValueOfDisplayRepresentation() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_displayRepresentation)
        return *_displayRepresentation;
    return defaultValue;
}
const std::shared_ptr<std::string> &Queries::getDisplayRepresentation() const noexcept
{
    return _displayRepresentation;
}
void Queries::setDisplayRepresentation(const std::string &pDisplayRepresentation) noexcept
{
    _displayRepresentation = std::make_shared<std::string>(pDisplayRepresentation);
    _dirtyFlag[19] = true;
}
void Queries::setDisplayRepresentation(std::string &&pDisplayRepresentation) noexcept
{
    _displayRepresentation = std::make_shared<std::string>(std::move(pDisplayRepresentation));
    _dirtyFlag[19] = true;
}


void Queries::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Queries::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "project_id",
        "name",
        "filters",
        "user_id",
        "is_public",
        "column_names",
        "sort_criteria",
        "group_by",
        "display_sums",
        "timeline_visible",
        "show_hierarchies",
        "timeline_zoom_level",
        "timeline_labels",
        "highlighting_mode",
        "highlighted_attributes",
        "hidden",
        "created_at",
        "updated_at",
        "display_representation"
    };
    return _inCols;
}

void Queries::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getName())
    {
        binder << getValueOfName();
    }
    else
    {
        binder << nullptr;
    }
    if(getFilters())
    {
        binder << getValueOfFilters();
    }
    else
    {
        binder << nullptr;
    }
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
    if(getIsPublic())
    {
        binder << getValueOfIsPublic();
    }
    else
    {
        binder << nullptr;
    }
    if(getColumnNames())
    {
        binder << getValueOfColumnNames();
    }
    else
    {
        binder << nullptr;
    }
    if(getSortCriteria())
    {
        binder << getValueOfSortCriteria();
    }
    else
    {
        binder << nullptr;
    }
    if(getGroupBy())
    {
        binder << getValueOfGroupBy();
    }
    else
    {
        binder << nullptr;
    }
    if(getDisplaySums())
    {
        binder << getValueOfDisplaySums();
    }
    else
    {
        binder << nullptr;
    }
    if(getTimelineVisible())
    {
        binder << getValueOfTimelineVisible();
    }
    else
    {
        binder << nullptr;
    }
    if(getShowHierarchies())
    {
        binder << getValueOfShowHierarchies();
    }
    else
    {
        binder << nullptr;
    }
    if(getTimelineZoomLevel())
    {
        binder << getValueOfTimelineZoomLevel();
    }
    else
    {
        binder << nullptr;
    }
    if(getTimelineLabels())
    {
        binder << getValueOfTimelineLabels();
    }
    else
    {
        binder << nullptr;
    }
    if(getHighlightingMode())
    {
        binder << getValueOfHighlightingMode();
    }
    else
    {
        binder << nullptr;
    }
    if(getHighlightedAttributes())
    {
        binder << getValueOfHighlightedAttributes();
    }
    else
    {
        binder << nullptr;
    }
    if(getHidden())
    {
        binder << getValueOfHidden();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getDisplayRepresentation())
    {
        binder << getValueOfDisplayRepresentation();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Queries::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Queries::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getFilters())
        {
            binder << getValueOfFilters();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getIsPublic())
        {
            binder << getValueOfIsPublic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getColumnNames())
        {
            binder << getValueOfColumnNames();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getSortCriteria())
        {
            binder << getValueOfSortCriteria();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getGroupBy())
        {
            binder << getValueOfGroupBy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getDisplaySums())
        {
            binder << getValueOfDisplaySums();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getTimelineVisible())
        {
            binder << getValueOfTimelineVisible();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getShowHierarchies())
        {
            binder << getValueOfShowHierarchies();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getTimelineZoomLevel())
        {
            binder << getValueOfTimelineZoomLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getTimelineLabels())
        {
            binder << getValueOfTimelineLabels();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getHighlightingMode())
        {
            binder << getValueOfHighlightingMode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getHighlightedAttributes())
        {
            binder << getValueOfHighlightedAttributes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[16])
    {
        if(getHidden())
        {
            binder << getValueOfHidden();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[17])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[18])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[19])
    {
        if(getDisplayRepresentation())
        {
            binder << getValueOfDisplayRepresentation();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Queries::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getFilters())
    {
        ret["filters"]=getValueOfFilters();
    }
    else
    {
        ret["filters"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getIsPublic())
    {
        ret["is_public"]=getValueOfIsPublic();
    }
    else
    {
        ret["is_public"]=Json::Value();
    }
    if(getColumnNames())
    {
        ret["column_names"]=getValueOfColumnNames();
    }
    else
    {
        ret["column_names"]=Json::Value();
    }
    if(getSortCriteria())
    {
        ret["sort_criteria"]=getValueOfSortCriteria();
    }
    else
    {
        ret["sort_criteria"]=Json::Value();
    }
    if(getGroupBy())
    {
        ret["group_by"]=getValueOfGroupBy();
    }
    else
    {
        ret["group_by"]=Json::Value();
    }
    if(getDisplaySums())
    {
        ret["display_sums"]=getValueOfDisplaySums();
    }
    else
    {
        ret["display_sums"]=Json::Value();
    }
    if(getTimelineVisible())
    {
        ret["timeline_visible"]=getValueOfTimelineVisible();
    }
    else
    {
        ret["timeline_visible"]=Json::Value();
    }
    if(getShowHierarchies())
    {
        ret["show_hierarchies"]=getValueOfShowHierarchies();
    }
    else
    {
        ret["show_hierarchies"]=Json::Value();
    }
    if(getTimelineZoomLevel())
    {
        ret["timeline_zoom_level"]=getValueOfTimelineZoomLevel();
    }
    else
    {
        ret["timeline_zoom_level"]=Json::Value();
    }
    if(getTimelineLabels())
    {
        ret["timeline_labels"]=getValueOfTimelineLabels();
    }
    else
    {
        ret["timeline_labels"]=Json::Value();
    }
    if(getHighlightingMode())
    {
        ret["highlighting_mode"]=getValueOfHighlightingMode();
    }
    else
    {
        ret["highlighting_mode"]=Json::Value();
    }
    if(getHighlightedAttributes())
    {
        ret["highlighted_attributes"]=getValueOfHighlightedAttributes();
    }
    else
    {
        ret["highlighted_attributes"]=Json::Value();
    }
    if(getHidden())
    {
        ret["hidden"]=getValueOfHidden();
    }
    else
    {
        ret["hidden"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getDisplayRepresentation())
    {
        ret["display_representation"]=getValueOfDisplayRepresentation();
    }
    else
    {
        ret["display_representation"]=Json::Value();
    }
    return ret;
}
