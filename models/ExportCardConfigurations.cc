/**
 *
 *  ExportCardConfigurations.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ExportCardConfigurations.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string ExportCardConfigurations::Cols::_id = "id";
const std::string ExportCardConfigurations::Cols::_name = "name";
const std::string ExportCardConfigurations::Cols::_per_page = "per_page";
const std::string ExportCardConfigurations::Cols::_page_size = "page_size";
const std::string ExportCardConfigurations::Cols::_orientation = "orientation";
const std::string ExportCardConfigurations::Cols::_rows = "rows";
const std::string ExportCardConfigurations::Cols::_active = "active";
const std::string ExportCardConfigurations::Cols::_description = "description";
const std::string ExportCardConfigurations::primaryKeyName = "id";
const bool ExportCardConfigurations::hasPrimaryKey = true;
const std::string ExportCardConfigurations::tableName = "export_card_configurations";

const std::vector<typename ExportCardConfigurations::MetaData> ExportCardConfigurations::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"name","std::string","character varying",0,0,0,0},
{"per_page","int32_t","integer",4,0,0,0},
{"page_size","std::string","character varying",0,0,0,0},
{"orientation","std::string","character varying",0,0,0,0},
{"rows","std::string","text",0,0,0,0},
{"active","bool","boolean",1,0,0,0},
{"description","std::string","text",0,0,0,0}
};
const std::string &ExportCardConfigurations::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
ExportCardConfigurations::ExportCardConfigurations(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["per_page"].isNull())
        {
            _perPage=std::make_shared<int32_t>(r["per_page"].as<int32_t>());
        }
        if(!r["page_size"].isNull())
        {
            _pageSize=std::make_shared<std::string>(r["page_size"].as<std::string>());
        }
        if(!r["orientation"].isNull())
        {
            _orientation=std::make_shared<std::string>(r["orientation"].as<std::string>());
        }
        if(!r["rows"].isNull())
        {
            _rows=std::make_shared<std::string>(r["rows"].as<std::string>());
        }
        if(!r["active"].isNull())
        {
            _active=std::make_shared<bool>(r["active"].as<bool>());
        }
        if(!r["description"].isNull())
        {
            _description=std::make_shared<std::string>(r["description"].as<std::string>());
        }
}
const int32_t &ExportCardConfigurations::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ExportCardConfigurations::getId() const noexcept
{
    return _id;
}
const typename ExportCardConfigurations::PrimaryKeyType & ExportCardConfigurations::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &ExportCardConfigurations::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &ExportCardConfigurations::getName() const noexcept
{
    return _name;
}
void ExportCardConfigurations::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[1] = true;
}
void ExportCardConfigurations::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[1] = true;
}


const int32_t &ExportCardConfigurations::getValueOfPerPage() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_perPage)
        return *_perPage;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ExportCardConfigurations::getPerPage() const noexcept
{
    return _perPage;
}
void ExportCardConfigurations::setPerPage(const int32_t &pPerPage) noexcept
{
    _perPage = std::make_shared<int32_t>(pPerPage);
    _dirtyFlag[2] = true;
}


const std::string &ExportCardConfigurations::getValueOfPageSize() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_pageSize)
        return *_pageSize;
    return defaultValue;
}
const std::shared_ptr<std::string> &ExportCardConfigurations::getPageSize() const noexcept
{
    return _pageSize;
}
void ExportCardConfigurations::setPageSize(const std::string &pPageSize) noexcept
{
    _pageSize = std::make_shared<std::string>(pPageSize);
    _dirtyFlag[3] = true;
}
void ExportCardConfigurations::setPageSize(std::string &&pPageSize) noexcept
{
    _pageSize = std::make_shared<std::string>(std::move(pPageSize));
    _dirtyFlag[3] = true;
}


const std::string &ExportCardConfigurations::getValueOfOrientation() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_orientation)
        return *_orientation;
    return defaultValue;
}
const std::shared_ptr<std::string> &ExportCardConfigurations::getOrientation() const noexcept
{
    return _orientation;
}
void ExportCardConfigurations::setOrientation(const std::string &pOrientation) noexcept
{
    _orientation = std::make_shared<std::string>(pOrientation);
    _dirtyFlag[4] = true;
}
void ExportCardConfigurations::setOrientation(std::string &&pOrientation) noexcept
{
    _orientation = std::make_shared<std::string>(std::move(pOrientation));
    _dirtyFlag[4] = true;
}


const std::string &ExportCardConfigurations::getValueOfRows() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_rows)
        return *_rows;
    return defaultValue;
}
const std::shared_ptr<std::string> &ExportCardConfigurations::getRows() const noexcept
{
    return _rows;
}
void ExportCardConfigurations::setRows(const std::string &pRows) noexcept
{
    _rows = std::make_shared<std::string>(pRows);
    _dirtyFlag[5] = true;
}
void ExportCardConfigurations::setRows(std::string &&pRows) noexcept
{
    _rows = std::make_shared<std::string>(std::move(pRows));
    _dirtyFlag[5] = true;
}


const bool &ExportCardConfigurations::getValueOfActive() const noexcept
{
    const static bool defaultValue = bool();
    if(_active)
        return *_active;
    return defaultValue;
}
const std::shared_ptr<bool> &ExportCardConfigurations::getActive() const noexcept
{
    return _active;
}
void ExportCardConfigurations::setActive(const bool &pActive) noexcept
{
    _active = std::make_shared<bool>(pActive);
    _dirtyFlag[6] = true;
}


const std::string &ExportCardConfigurations::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_description)
        return *_description;
    return defaultValue;
}
const std::shared_ptr<std::string> &ExportCardConfigurations::getDescription() const noexcept
{
    return _description;
}
void ExportCardConfigurations::setDescription(const std::string &pDescription) noexcept
{
    _description = std::make_shared<std::string>(pDescription);
    _dirtyFlag[7] = true;
}
void ExportCardConfigurations::setDescription(std::string &&pDescription) noexcept
{
    _description = std::make_shared<std::string>(std::move(pDescription));
    _dirtyFlag[7] = true;
}


void ExportCardConfigurations::updateId(const uint64_t id)
{
}

const std::vector<std::string> &ExportCardConfigurations::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "name",
        "per_page",
        "page_size",
        "orientation",
        "rows",
        "active",
        "description"
    };
    return _inCols;
}

void ExportCardConfigurations::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getName())
    {
        binder << getValueOfName();
    }
    else
    {
        binder << nullptr;
    }
    if(getPerPage())
    {
        binder << getValueOfPerPage();
    }
    else
    {
        binder << nullptr;
    }
    if(getPageSize())
    {
        binder << getValueOfPageSize();
    }
    else
    {
        binder << nullptr;
    }
    if(getOrientation())
    {
        binder << getValueOfOrientation();
    }
    else
    {
        binder << nullptr;
    }
    if(getRows())
    {
        binder << getValueOfRows();
    }
    else
    {
        binder << nullptr;
    }
    if(getActive())
    {
        binder << getValueOfActive();
    }
    else
    {
        binder << nullptr;
    }
    if(getDescription())
    {
        binder << getValueOfDescription();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> ExportCardConfigurations::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void ExportCardConfigurations::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getPerPage())
        {
            binder << getValueOfPerPage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getPageSize())
        {
            binder << getValueOfPageSize();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getOrientation())
        {
            binder << getValueOfOrientation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getRows())
        {
            binder << getValueOfRows();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getActive())
        {
            binder << getValueOfActive();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ExportCardConfigurations::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getPerPage())
    {
        ret["per_page"]=getValueOfPerPage();
    }
    else
    {
        ret["per_page"]=Json::Value();
    }
    if(getPageSize())
    {
        ret["page_size"]=getValueOfPageSize();
    }
    else
    {
        ret["page_size"]=Json::Value();
    }
    if(getOrientation())
    {
        ret["orientation"]=getValueOfOrientation();
    }
    else
    {
        ret["orientation"]=Json::Value();
    }
    if(getRows())
    {
        ret["rows"]=getValueOfRows();
    }
    else
    {
        ret["rows"]=Json::Value();
    }
    if(getActive())
    {
        ret["active"]=getValueOfActive();
    }
    else
    {
        ret["active"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    return ret;
}
