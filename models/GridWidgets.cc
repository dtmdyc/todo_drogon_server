/**
 *
 *  GridWidgets.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "GridWidgets.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string GridWidgets::Cols::_id = "id";
const std::string GridWidgets::Cols::_start_row = "start_row";
const std::string GridWidgets::Cols::_end_row = "end_row";
const std::string GridWidgets::Cols::_start_column = "start_column";
const std::string GridWidgets::Cols::_end_column = "end_column";
const std::string GridWidgets::Cols::_identifier = "identifier";
const std::string GridWidgets::Cols::_options = "options";
const std::string GridWidgets::Cols::_grid_id = "grid_id";
const std::string GridWidgets::primaryKeyName = "id";
const bool GridWidgets::hasPrimaryKey = true;
const std::string GridWidgets::tableName = "grid_widgets";

const std::vector<typename GridWidgets::MetaData> GridWidgets::_metaData={
{"id","int64_t","bigint",8,1,1,1},
{"start_row","int32_t","integer",4,0,0,1},
{"end_row","int32_t","integer",4,0,0,1},
{"start_column","int32_t","integer",4,0,0,1},
{"end_column","int32_t","integer",4,0,0,1},
{"identifier","std::string","character varying",0,0,0,0},
{"options","std::string","text",0,0,0,0},
{"grid_id","int64_t","bigint",8,0,0,0}
};
const std::string &GridWidgets::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
GridWidgets::GridWidgets(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["start_row"].isNull())
        {
            _startRow=std::make_shared<int32_t>(r["start_row"].as<int32_t>());
        }
        if(!r["end_row"].isNull())
        {
            _endRow=std::make_shared<int32_t>(r["end_row"].as<int32_t>());
        }
        if(!r["start_column"].isNull())
        {
            _startColumn=std::make_shared<int32_t>(r["start_column"].as<int32_t>());
        }
        if(!r["end_column"].isNull())
        {
            _endColumn=std::make_shared<int32_t>(r["end_column"].as<int32_t>());
        }
        if(!r["identifier"].isNull())
        {
            _identifier=std::make_shared<std::string>(r["identifier"].as<std::string>());
        }
        if(!r["options"].isNull())
        {
            _options=std::make_shared<std::string>(r["options"].as<std::string>());
        }
        if(!r["grid_id"].isNull())
        {
            _gridId=std::make_shared<int64_t>(r["grid_id"].as<int64_t>());
        }
}
const int64_t &GridWidgets::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int64_t> &GridWidgets::getId() const noexcept
{
    return _id;
}
const typename GridWidgets::PrimaryKeyType & GridWidgets::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &GridWidgets::getValueOfStartRow() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_startRow)
        return *_startRow;
    return defaultValue;
}
const std::shared_ptr<int32_t> &GridWidgets::getStartRow() const noexcept
{
    return _startRow;
}
void GridWidgets::setStartRow(const int32_t &pStartRow) noexcept
{
    _startRow = std::make_shared<int32_t>(pStartRow);
    _dirtyFlag[1] = true;
}


const int32_t &GridWidgets::getValueOfEndRow() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_endRow)
        return *_endRow;
    return defaultValue;
}
const std::shared_ptr<int32_t> &GridWidgets::getEndRow() const noexcept
{
    return _endRow;
}
void GridWidgets::setEndRow(const int32_t &pEndRow) noexcept
{
    _endRow = std::make_shared<int32_t>(pEndRow);
    _dirtyFlag[2] = true;
}


const int32_t &GridWidgets::getValueOfStartColumn() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_startColumn)
        return *_startColumn;
    return defaultValue;
}
const std::shared_ptr<int32_t> &GridWidgets::getStartColumn() const noexcept
{
    return _startColumn;
}
void GridWidgets::setStartColumn(const int32_t &pStartColumn) noexcept
{
    _startColumn = std::make_shared<int32_t>(pStartColumn);
    _dirtyFlag[3] = true;
}


const int32_t &GridWidgets::getValueOfEndColumn() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_endColumn)
        return *_endColumn;
    return defaultValue;
}
const std::shared_ptr<int32_t> &GridWidgets::getEndColumn() const noexcept
{
    return _endColumn;
}
void GridWidgets::setEndColumn(const int32_t &pEndColumn) noexcept
{
    _endColumn = std::make_shared<int32_t>(pEndColumn);
    _dirtyFlag[4] = true;
}


const std::string &GridWidgets::getValueOfIdentifier() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_identifier)
        return *_identifier;
    return defaultValue;
}
const std::shared_ptr<std::string> &GridWidgets::getIdentifier() const noexcept
{
    return _identifier;
}
void GridWidgets::setIdentifier(const std::string &pIdentifier) noexcept
{
    _identifier = std::make_shared<std::string>(pIdentifier);
    _dirtyFlag[5] = true;
}
void GridWidgets::setIdentifier(std::string &&pIdentifier) noexcept
{
    _identifier = std::make_shared<std::string>(std::move(pIdentifier));
    _dirtyFlag[5] = true;
}


const std::string &GridWidgets::getValueOfOptions() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_options)
        return *_options;
    return defaultValue;
}
const std::shared_ptr<std::string> &GridWidgets::getOptions() const noexcept
{
    return _options;
}
void GridWidgets::setOptions(const std::string &pOptions) noexcept
{
    _options = std::make_shared<std::string>(pOptions);
    _dirtyFlag[6] = true;
}
void GridWidgets::setOptions(std::string &&pOptions) noexcept
{
    _options = std::make_shared<std::string>(std::move(pOptions));
    _dirtyFlag[6] = true;
}


const int64_t &GridWidgets::getValueOfGridId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_gridId)
        return *_gridId;
    return defaultValue;
}
const std::shared_ptr<int64_t> &GridWidgets::getGridId() const noexcept
{
    return _gridId;
}
void GridWidgets::setGridId(const int64_t &pGridId) noexcept
{
    _gridId = std::make_shared<int64_t>(pGridId);
    _dirtyFlag[7] = true;
}


void GridWidgets::updateId(const uint64_t id)
{
}

const std::vector<std::string> &GridWidgets::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "start_row",
        "end_row",
        "start_column",
        "end_column",
        "identifier",
        "options",
        "grid_id"
    };
    return _inCols;
}

void GridWidgets::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getStartRow())
    {
        binder << getValueOfStartRow();
    }
    else
    {
        binder << nullptr;
    }
    if(getEndRow())
    {
        binder << getValueOfEndRow();
    }
    else
    {
        binder << nullptr;
    }
    if(getStartColumn())
    {
        binder << getValueOfStartColumn();
    }
    else
    {
        binder << nullptr;
    }
    if(getEndColumn())
    {
        binder << getValueOfEndColumn();
    }
    else
    {
        binder << nullptr;
    }
    if(getIdentifier())
    {
        binder << getValueOfIdentifier();
    }
    else
    {
        binder << nullptr;
    }
    if(getOptions())
    {
        binder << getValueOfOptions();
    }
    else
    {
        binder << nullptr;
    }
    if(getGridId())
    {
        binder << getValueOfGridId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> GridWidgets::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void GridWidgets::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getStartRow())
        {
            binder << getValueOfStartRow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getEndRow())
        {
            binder << getValueOfEndRow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getStartColumn())
        {
            binder << getValueOfStartColumn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getEndColumn())
        {
            binder << getValueOfEndColumn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getIdentifier())
        {
            binder << getValueOfIdentifier();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getOptions())
        {
            binder << getValueOfOptions();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getGridId())
        {
            binder << getValueOfGridId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value GridWidgets::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getStartRow())
    {
        ret["start_row"]=getValueOfStartRow();
    }
    else
    {
        ret["start_row"]=Json::Value();
    }
    if(getEndRow())
    {
        ret["end_row"]=getValueOfEndRow();
    }
    else
    {
        ret["end_row"]=Json::Value();
    }
    if(getStartColumn())
    {
        ret["start_column"]=getValueOfStartColumn();
    }
    else
    {
        ret["start_column"]=Json::Value();
    }
    if(getEndColumn())
    {
        ret["end_column"]=getValueOfEndColumn();
    }
    else
    {
        ret["end_column"]=Json::Value();
    }
    if(getIdentifier())
    {
        ret["identifier"]=getValueOfIdentifier();
    }
    else
    {
        ret["identifier"]=Json::Value();
    }
    if(getOptions())
    {
        ret["options"]=getValueOfOptions();
    }
    else
    {
        ret["options"]=Json::Value();
    }
    if(getGridId())
    {
        ret["grid_id"]=(Json::Int64)getValueOfGridId();
    }
    else
    {
        ret["grid_id"]=Json::Value();
    }
    return ret;
}
