/**
 *
 *  UserPreferences.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "UserPreferences.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject6;

const std::string UserPreferences::Cols::_id = "id";
const std::string UserPreferences::Cols::_user_id = "user_id";
const std::string UserPreferences::Cols::_others = "others";
const std::string UserPreferences::Cols::_hide_mail = "hide_mail";
const std::string UserPreferences::Cols::_time_zone = "time_zone";
const std::string UserPreferences::primaryKeyName = "id";
const bool UserPreferences::hasPrimaryKey = true;
const std::string UserPreferences::tableName = "user_preferences";

const std::vector<typename UserPreferences::MetaData> UserPreferences::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"user_id","int32_t","integer",4,0,0,1},
{"others","std::string","text",0,0,0,0},
{"hide_mail","bool","boolean",1,0,0,0},
{"time_zone","std::string","character varying",0,0,0,0}
};
const std::string &UserPreferences::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
UserPreferences::UserPreferences(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["others"].isNull())
        {
            _others=std::make_shared<std::string>(r["others"].as<std::string>());
        }
        if(!r["hide_mail"].isNull())
        {
            _hideMail=std::make_shared<bool>(r["hide_mail"].as<bool>());
        }
        if(!r["time_zone"].isNull())
        {
            _timeZone=std::make_shared<std::string>(r["time_zone"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _userId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _others=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _hideMail=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _timeZone=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

UserPreferences::UserPreferences(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _dirtyFlag[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _userId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _others=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _hideMail=std::make_shared<bool>(pJson[pMasqueradingVector[3]].asBool());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _timeZone=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

UserPreferences::UserPreferences(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _dirtyFlag[0]=true;
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        _dirtyFlag[1]=true;
        if(!pJson["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("others"))
    {
        _dirtyFlag[2]=true;
        if(!pJson["others"].isNull())
        {
            _others=std::make_shared<std::string>(pJson["others"].asString());
        }
    }
    if(pJson.isMember("hide_mail"))
    {
        _dirtyFlag[3]=true;
        if(!pJson["hide_mail"].isNull())
        {
            _hideMail=std::make_shared<bool>(pJson["hide_mail"].asBool());
        }
    }
    if(pJson.isMember("time_zone"))
    {
        _dirtyFlag[4]=true;
        if(!pJson["time_zone"].isNull())
        {
            _timeZone=std::make_shared<std::string>(pJson["time_zone"].asString());
        }
    }
}

void UserPreferences::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _userId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _others=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _hideMail=std::make_shared<bool>(pJson[pMasqueradingVector[3]].asBool());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _timeZone=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}
                                                                    
void UserPreferences::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        _dirtyFlag[1] = true;
        if(!pJson["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("others"))
    {
        _dirtyFlag[2] = true;
        if(!pJson["others"].isNull())
        {
            _others=std::make_shared<std::string>(pJson["others"].asString());
        }
    }
    if(pJson.isMember("hide_mail"))
    {
        _dirtyFlag[3] = true;
        if(!pJson["hide_mail"].isNull())
        {
            _hideMail=std::make_shared<bool>(pJson["hide_mail"].asBool());
        }
    }
    if(pJson.isMember("time_zone"))
    {
        _dirtyFlag[4] = true;
        if(!pJson["time_zone"].isNull())
        {
            _timeZone=std::make_shared<std::string>(pJson["time_zone"].asString());
        }
    }
}

const int32_t &UserPreferences::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserPreferences::getId() const noexcept
{
    return _id;
}
const typename UserPreferences::PrimaryKeyType & UserPreferences::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &UserPreferences::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserPreferences::getUserId() const noexcept
{
    return _userId;
}
void UserPreferences::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[1] = true;
}


const std::string &UserPreferences::getValueOfOthers() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_others)
        return *_others;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserPreferences::getOthers() const noexcept
{
    return _others;
}
void UserPreferences::setOthers(const std::string &pOthers) noexcept
{
    _others = std::make_shared<std::string>(pOthers);
    _dirtyFlag[2] = true;
}
void UserPreferences::setOthers(std::string &&pOthers) noexcept
{
    _others = std::make_shared<std::string>(std::move(pOthers));
    _dirtyFlag[2] = true;
}


const bool &UserPreferences::getValueOfHideMail() const noexcept
{
    const static bool defaultValue = bool();
    if(_hideMail)
        return *_hideMail;
    return defaultValue;
}
const std::shared_ptr<bool> &UserPreferences::getHideMail() const noexcept
{
    return _hideMail;
}
void UserPreferences::setHideMail(const bool &pHideMail) noexcept
{
    _hideMail = std::make_shared<bool>(pHideMail);
    _dirtyFlag[3] = true;
}


const std::string &UserPreferences::getValueOfTimeZone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_timeZone)
        return *_timeZone;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserPreferences::getTimeZone() const noexcept
{
    return _timeZone;
}
void UserPreferences::setTimeZone(const std::string &pTimeZone) noexcept
{
    _timeZone = std::make_shared<std::string>(pTimeZone);
    _dirtyFlag[4] = true;
}
void UserPreferences::setTimeZone(std::string &&pTimeZone) noexcept
{
    _timeZone = std::make_shared<std::string>(std::move(pTimeZone));
    _dirtyFlag[4] = true;
}


void UserPreferences::updateId(const uint64_t id)
{
}

const std::vector<std::string> &UserPreferences::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "user_id",
        "others",
        "hide_mail",
        "time_zone"
    };
    return _inCols;
}

void UserPreferences::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getOthers())
        {
            binder << getValueOfOthers();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getHideMail())
        {
            binder << getValueOfHideMail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getTimeZone())
        {
            binder << getValueOfTimeZone();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> UserPreferences::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void UserPreferences::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getOthers())
        {
            binder << getValueOfOthers();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getHideMail())
        {
            binder << getValueOfHideMail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getTimeZone())
        {
            binder << getValueOfTimeZone();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value UserPreferences::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getOthers())
    {
        ret["others"]=getValueOfOthers();
    }
    else
    {
        ret["others"]=Json::Value();
    }
    if(getHideMail())
    {
        ret["hide_mail"]=getValueOfHideMail();
    }
    else
    {
        ret["hide_mail"]=Json::Value();
    }
    if(getTimeZone())
    {
        ret["time_zone"]=getValueOfTimeZone();
    }
    else
    {
        ret["time_zone"]=Json::Value();
    }
    return ret;
}

Json::Value UserPreferences::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[1]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getOthers())
            {
                ret[pMasqueradingVector[2]]=getValueOfOthers();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getHideMail())
            {
                ret[pMasqueradingVector[3]]=getValueOfHideMail();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getTimeZone())
            {
                ret[pMasqueradingVector[4]]=getValueOfTimeZone();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getOthers())
    {
        ret["others"]=getValueOfOthers();
    }
    else
    {
        ret["others"]=Json::Value();
    }
    if(getHideMail())
    {
        ret["hide_mail"]=getValueOfHideMail();
    }
    else
    {
        ret["hide_mail"]=Json::Value();
    }
    if(getTimeZone())
    {
        ret["time_zone"]=getValueOfTimeZone();
    }
    else
    {
        ret["time_zone"]=Json::Value();
    }
    return ret;
}

bool UserPreferences::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("others"))
    {
        if(!validJsonOfField(2, "others", pJson["others"], err, true))
            return false;
    }
    if(pJson.isMember("hide_mail"))
    {
        if(!validJsonOfField(3, "hide_mail", pJson["hide_mail"], err, true))
            return false;
    }
    if(pJson.isMember("time_zone"))
    {
        if(!validJsonOfField(4, "time_zone", pJson["time_zone"], err, true))
            return false;
    }
    return true;
}
bool UserPreferences::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    return true;
}
bool UserPreferences::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("others"))
    {
        if(!validJsonOfField(2, "others", pJson["others"], err, false))
            return false;
    }
    if(pJson.isMember("hide_mail"))
    {
        if(!validJsonOfField(3, "hide_mail", pJson["hide_mail"], err, false))
            return false;
    }
    if(pJson.isMember("time_zone"))
    {
        if(!validJsonOfField(4, "time_zone", pJson["time_zone"], err, false))
            return false;
    }
    return true;
}
bool UserPreferences::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    return true;
}
bool UserPreferences::validJsonOfField(size_t index,
                                       const std::string &fieldName,
                                       const Json::Value &pJson, 
                                       std::string &err, 
                                       bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 2:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 3:
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 4:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
