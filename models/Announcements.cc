/**
 *
 *  Announcements.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Announcements.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Announcements::Cols::_id = "id";
const std::string Announcements::Cols::_text = "text";
const std::string Announcements::Cols::_show_until = "show_until";
const std::string Announcements::Cols::_active = "active";
const std::string Announcements::Cols::_created_at = "created_at";
const std::string Announcements::Cols::_updated_at = "updated_at";
const std::string Announcements::primaryKeyName = "id";
const bool Announcements::hasPrimaryKey = true;
const std::string Announcements::tableName = "announcements";

const std::vector<typename Announcements::MetaData> Announcements::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"text","std::string","text",0,0,0,0},
{"show_until","::trantor::Date","date",0,0,0,0},
{"active","bool","boolean",1,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &Announcements::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Announcements::Announcements(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["text"].isNull())
        {
            _text=std::make_shared<std::string>(r["text"].as<std::string>());
        }
        if(!r["show_until"].isNull())
        {
            auto daysStr = r["show_until"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _showUntil=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["active"].isNull())
        {
            _active=std::make_shared<bool>(r["active"].as<bool>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int32_t &Announcements::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Announcements::getId() const noexcept
{
    return _id;
}
const typename Announcements::PrimaryKeyType & Announcements::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &Announcements::getValueOfText() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_text)
        return *_text;
    return defaultValue;
}
const std::shared_ptr<std::string> &Announcements::getText() const noexcept
{
    return _text;
}
void Announcements::setText(const std::string &pText) noexcept
{
    _text = std::make_shared<std::string>(pText);
    _dirtyFlag[1] = true;
}
void Announcements::setText(std::string &&pText) noexcept
{
    _text = std::make_shared<std::string>(std::move(pText));
    _dirtyFlag[1] = true;
}


const ::trantor::Date &Announcements::getValueOfShowUntil() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_showUntil)
        return *_showUntil;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Announcements::getShowUntil() const noexcept
{
    return _showUntil;
}
void Announcements::setShowUntil(const ::trantor::Date &pShowUntil) noexcept
{
    _showUntil = std::make_shared<::trantor::Date>(pShowUntil.roundDay());
    _dirtyFlag[2] = true;
}


const bool &Announcements::getValueOfActive() const noexcept
{
    const static bool defaultValue = bool();
    if(_active)
        return *_active;
    return defaultValue;
}
const std::shared_ptr<bool> &Announcements::getActive() const noexcept
{
    return _active;
}
void Announcements::setActive(const bool &pActive) noexcept
{
    _active = std::make_shared<bool>(pActive);
    _dirtyFlag[3] = true;
}


const ::trantor::Date &Announcements::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Announcements::getCreatedAt() const noexcept
{
    return _createdAt;
}
void Announcements::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[4] = true;
}


const ::trantor::Date &Announcements::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Announcements::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void Announcements::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[5] = true;
}


void Announcements::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Announcements::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "text",
        "show_until",
        "active",
        "created_at",
        "updated_at"
    };
    return _inCols;
}

void Announcements::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getText())
    {
        binder << getValueOfText();
    }
    else
    {
        binder << nullptr;
    }
    if(getShowUntil())
    {
        binder << getValueOfShowUntil();
    }
    else
    {
        binder << nullptr;
    }
    if(getActive())
    {
        binder << getValueOfActive();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Announcements::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Announcements::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getText())
        {
            binder << getValueOfText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getShowUntil())
        {
            binder << getValueOfShowUntil();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getActive())
        {
            binder << getValueOfActive();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Announcements::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getShowUntil())
    {
        ret["show_until"]=getShowUntil()->toDbStringLocal();
    }
    else
    {
        ret["show_until"]=Json::Value();
    }
    if(getActive())
    {
        ret["active"]=getValueOfActive();
    }
    else
    {
        ret["active"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}
