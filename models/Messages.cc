/**
 *
 *  Messages.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Messages.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Messages::Cols::_id = "id";
const std::string Messages::Cols::_forum_id = "forum_id";
const std::string Messages::Cols::_parent_id = "parent_id";
const std::string Messages::Cols::_subject = "subject";
const std::string Messages::Cols::_content = "content";
const std::string Messages::Cols::_author_id = "author_id";
const std::string Messages::Cols::_replies_count = "replies_count";
const std::string Messages::Cols::_last_reply_id = "last_reply_id";
const std::string Messages::Cols::_created_on = "created_on";
const std::string Messages::Cols::_updated_on = "updated_on";
const std::string Messages::Cols::_locked = "locked";
const std::string Messages::Cols::_sticky = "sticky";
const std::string Messages::Cols::_sticked_on = "sticked_on";
const std::string Messages::primaryKeyName = "id";
const bool Messages::hasPrimaryKey = true;
const std::string Messages::tableName = "messages";

const std::vector<typename Messages::MetaData> Messages::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"forum_id","int32_t","integer",4,0,0,1},
{"parent_id","int32_t","integer",4,0,0,0},
{"subject","std::string","character varying",0,0,0,1},
{"content","std::string","text",0,0,0,0},
{"author_id","int32_t","integer",4,0,0,0},
{"replies_count","int32_t","integer",4,0,0,1},
{"last_reply_id","int32_t","integer",4,0,0,0},
{"created_on","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_on","::trantor::Date","timestamp without time zone",0,0,0,1},
{"locked","bool","boolean",1,0,0,0},
{"sticky","int32_t","integer",4,0,0,0},
{"sticked_on","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &Messages::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Messages::Messages(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["forum_id"].isNull())
        {
            _forumId=std::make_shared<int32_t>(r["forum_id"].as<int32_t>());
        }
        if(!r["parent_id"].isNull())
        {
            _parentId=std::make_shared<int32_t>(r["parent_id"].as<int32_t>());
        }
        if(!r["subject"].isNull())
        {
            _subject=std::make_shared<std::string>(r["subject"].as<std::string>());
        }
        if(!r["content"].isNull())
        {
            _content=std::make_shared<std::string>(r["content"].as<std::string>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["replies_count"].isNull())
        {
            _repliesCount=std::make_shared<int32_t>(r["replies_count"].as<int32_t>());
        }
        if(!r["last_reply_id"].isNull())
        {
            _lastReplyId=std::make_shared<int32_t>(r["last_reply_id"].as<int32_t>());
        }
        if(!r["created_on"].isNull())
        {
            auto timeStr = r["created_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_on"].isNull())
        {
            auto timeStr = r["updated_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["locked"].isNull())
        {
            _locked=std::make_shared<bool>(r["locked"].as<bool>());
        }
        if(!r["sticky"].isNull())
        {
            _sticky=std::make_shared<int32_t>(r["sticky"].as<int32_t>());
        }
        if(!r["sticked_on"].isNull())
        {
            auto timeStr = r["sticked_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _stickedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 13 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _forumId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _parentId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _subject=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _content=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _authorId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            _repliesCount=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            _lastReplyId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            _locked=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            _sticky=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _stickedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }

}

Messages::Messages(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _forumId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _parentId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _subject=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _content=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _repliesCount=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _lastReplyId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        auto timeStr = pJson[pMasqueradingVector[8]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        auto timeStr = pJson[pMasqueradingVector[9]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _locked=std::make_shared<bool>(pJson[pMasqueradingVector[10]].asBool());
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        _sticky=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[11]].asInt64());
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        auto timeStr = pJson[pMasqueradingVector[12]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _stickedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}

Messages::Messages(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("forum_id"))
    {
        _forumId=std::make_shared<int32_t>((int32_t)pJson["forum_id"].asInt64());
    }
    if(pJson.isMember("parent_id"))
    {
        _parentId=std::make_shared<int32_t>((int32_t)pJson["parent_id"].asInt64());
    }
    if(pJson.isMember("subject"))
    {
        _subject=std::make_shared<std::string>(pJson["subject"].asString());
    }
    if(pJson.isMember("content"))
    {
        _content=std::make_shared<std::string>(pJson["content"].asString());
    }
    if(pJson.isMember("author_id"))
    {
        _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
    }
    if(pJson.isMember("replies_count"))
    {
        _repliesCount=std::make_shared<int32_t>((int32_t)pJson["replies_count"].asInt64());
    }
    if(pJson.isMember("last_reply_id"))
    {
        _lastReplyId=std::make_shared<int32_t>((int32_t)pJson["last_reply_id"].asInt64());
    }
    if(pJson.isMember("created_on"))
    {
        auto timeStr = pJson["created_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("updated_on"))
    {
        auto timeStr = pJson["updated_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("locked"))
    {
        _locked=std::make_shared<bool>(pJson["locked"].asBool());
    }
    if(pJson.isMember("sticky"))
    {
        _sticky=std::make_shared<int32_t>((int32_t)pJson["sticky"].asInt64());
    }
    if(pJson.isMember("sticked_on"))
    {
        auto timeStr = pJson["sticked_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _stickedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}

void Messages::updateByMasqueradedJson(const Json::Value &pJson, 
                                                                                                     const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        _forumId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        _parentId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        _subject=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        _content=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        _repliesCount=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        _lastReplyId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        auto timeStr = pJson[pMasqueradingVector[8]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        auto timeStr = pJson[pMasqueradingVector[9]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        _locked=std::make_shared<bool>(pJson[pMasqueradingVector[10]].asBool());
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        _dirtyFlag[11] = true;
        _sticky=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[11]].asInt64());
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        _dirtyFlag[12] = true;
        auto timeStr = pJson[pMasqueradingVector[12]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _stickedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}
                                                                    
void Messages::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("forum_id"))
    {
        _dirtyFlag[1] = true;
        _forumId=std::make_shared<int32_t>((int32_t)pJson["forum_id"].asInt64());
    }
    if(pJson.isMember("parent_id"))
    {
        _dirtyFlag[2] = true;
        _parentId=std::make_shared<int32_t>((int32_t)pJson["parent_id"].asInt64());
    }
    if(pJson.isMember("subject"))
    {
        _dirtyFlag[3] = true;
        _subject=std::make_shared<std::string>(pJson["subject"].asString());
    }
    if(pJson.isMember("content"))
    {
        _dirtyFlag[4] = true;
        _content=std::make_shared<std::string>(pJson["content"].asString());
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[5] = true;
        _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
    }
    if(pJson.isMember("replies_count"))
    {
        _dirtyFlag[6] = true;
        _repliesCount=std::make_shared<int32_t>((int32_t)pJson["replies_count"].asInt64());
    }
    if(pJson.isMember("last_reply_id"))
    {
        _dirtyFlag[7] = true;
        _lastReplyId=std::make_shared<int32_t>((int32_t)pJson["last_reply_id"].asInt64());
    }
    if(pJson.isMember("created_on"))
    {
        _dirtyFlag[8] = true;
        auto timeStr = pJson["created_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("updated_on"))
    {
        _dirtyFlag[9] = true;
        auto timeStr = pJson["updated_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("locked"))
    {
        _dirtyFlag[10] = true;
        _locked=std::make_shared<bool>(pJson["locked"].asBool());
    }
    if(pJson.isMember("sticky"))
    {
        _dirtyFlag[11] = true;
        _sticky=std::make_shared<int32_t>((int32_t)pJson["sticky"].asInt64());
    }
    if(pJson.isMember("sticked_on"))
    {
        _dirtyFlag[12] = true;
        auto timeStr = pJson["sticked_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _stickedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}

const int32_t &Messages::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Messages::getId() const noexcept
{
    return _id;
}
const typename Messages::PrimaryKeyType & Messages::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &Messages::getValueOfForumId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_forumId)
        return *_forumId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Messages::getForumId() const noexcept
{
    return _forumId;
}
void Messages::setForumId(const int32_t &pForumId) noexcept
{
    _forumId = std::make_shared<int32_t>(pForumId);
    _dirtyFlag[1] = true;
}


const int32_t &Messages::getValueOfParentId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_parentId)
        return *_parentId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Messages::getParentId() const noexcept
{
    return _parentId;
}
void Messages::setParentId(const int32_t &pParentId) noexcept
{
    _parentId = std::make_shared<int32_t>(pParentId);
    _dirtyFlag[2] = true;
}


const std::string &Messages::getValueOfSubject() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_subject)
        return *_subject;
    return defaultValue;
}
const std::shared_ptr<std::string> &Messages::getSubject() const noexcept
{
    return _subject;
}
void Messages::setSubject(const std::string &pSubject) noexcept
{
    _subject = std::make_shared<std::string>(pSubject);
    _dirtyFlag[3] = true;
}
void Messages::setSubject(std::string &&pSubject) noexcept
{
    _subject = std::make_shared<std::string>(std::move(pSubject));
    _dirtyFlag[3] = true;
}


const std::string &Messages::getValueOfContent() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_content)
        return *_content;
    return defaultValue;
}
const std::shared_ptr<std::string> &Messages::getContent() const noexcept
{
    return _content;
}
void Messages::setContent(const std::string &pContent) noexcept
{
    _content = std::make_shared<std::string>(pContent);
    _dirtyFlag[4] = true;
}
void Messages::setContent(std::string &&pContent) noexcept
{
    _content = std::make_shared<std::string>(std::move(pContent));
    _dirtyFlag[4] = true;
}


const int32_t &Messages::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Messages::getAuthorId() const noexcept
{
    return _authorId;
}
void Messages::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[5] = true;
}


const int32_t &Messages::getValueOfRepliesCount() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_repliesCount)
        return *_repliesCount;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Messages::getRepliesCount() const noexcept
{
    return _repliesCount;
}
void Messages::setRepliesCount(const int32_t &pRepliesCount) noexcept
{
    _repliesCount = std::make_shared<int32_t>(pRepliesCount);
    _dirtyFlag[6] = true;
}


const int32_t &Messages::getValueOfLastReplyId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_lastReplyId)
        return *_lastReplyId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Messages::getLastReplyId() const noexcept
{
    return _lastReplyId;
}
void Messages::setLastReplyId(const int32_t &pLastReplyId) noexcept
{
    _lastReplyId = std::make_shared<int32_t>(pLastReplyId);
    _dirtyFlag[7] = true;
}


const ::trantor::Date &Messages::getValueOfCreatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdOn)
        return *_createdOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Messages::getCreatedOn() const noexcept
{
    return _createdOn;
}
void Messages::setCreatedOn(const ::trantor::Date &pCreatedOn) noexcept
{
    _createdOn = std::make_shared<::trantor::Date>(pCreatedOn);
    _dirtyFlag[8] = true;
}


const ::trantor::Date &Messages::getValueOfUpdatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedOn)
        return *_updatedOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Messages::getUpdatedOn() const noexcept
{
    return _updatedOn;
}
void Messages::setUpdatedOn(const ::trantor::Date &pUpdatedOn) noexcept
{
    _updatedOn = std::make_shared<::trantor::Date>(pUpdatedOn);
    _dirtyFlag[9] = true;
}


const bool &Messages::getValueOfLocked() const noexcept
{
    const static bool defaultValue = bool();
    if(_locked)
        return *_locked;
    return defaultValue;
}
const std::shared_ptr<bool> &Messages::getLocked() const noexcept
{
    return _locked;
}
void Messages::setLocked(const bool &pLocked) noexcept
{
    _locked = std::make_shared<bool>(pLocked);
    _dirtyFlag[10] = true;
}


const int32_t &Messages::getValueOfSticky() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_sticky)
        return *_sticky;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Messages::getSticky() const noexcept
{
    return _sticky;
}
void Messages::setSticky(const int32_t &pSticky) noexcept
{
    _sticky = std::make_shared<int32_t>(pSticky);
    _dirtyFlag[11] = true;
}


const ::trantor::Date &Messages::getValueOfStickedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_stickedOn)
        return *_stickedOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Messages::getStickedOn() const noexcept
{
    return _stickedOn;
}
void Messages::setStickedOn(const ::trantor::Date &pStickedOn) noexcept
{
    _stickedOn = std::make_shared<::trantor::Date>(pStickedOn);
    _dirtyFlag[12] = true;
}


void Messages::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Messages::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "forum_id",
        "parent_id",
        "subject",
        "content",
        "author_id",
        "replies_count",
        "last_reply_id",
        "created_on",
        "updated_on",
        "locked",
        "sticky",
        "sticked_on"
    };
    return _inCols;
}

void Messages::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getForumId())
    {
        binder << getValueOfForumId();
    }
    else
    {
        binder << nullptr;
    }
    if(getParentId())
    {
        binder << getValueOfParentId();
    }
    else
    {
        binder << nullptr;
    }
    if(getSubject())
    {
        binder << getValueOfSubject();
    }
    else
    {
        binder << nullptr;
    }
    if(getContent())
    {
        binder << getValueOfContent();
    }
    else
    {
        binder << nullptr;
    }
    if(getAuthorId())
    {
        binder << getValueOfAuthorId();
    }
    else
    {
        binder << nullptr;
    }
    if(getRepliesCount())
    {
        binder << getValueOfRepliesCount();
    }
    else
    {
        binder << nullptr;
    }
    if(getLastReplyId())
    {
        binder << getValueOfLastReplyId();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedOn())
    {
        binder << getValueOfCreatedOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedOn())
    {
        binder << getValueOfUpdatedOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getLocked())
    {
        binder << getValueOfLocked();
    }
    else
    {
        binder << nullptr;
    }
    if(getSticky())
    {
        binder << getValueOfSticky();
    }
    else
    {
        binder << nullptr;
    }
    if(getStickedOn())
    {
        binder << getValueOfStickedOn();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Messages::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Messages::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getForumId())
        {
            binder << getValueOfForumId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getParentId())
        {
            binder << getValueOfParentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getSubject())
        {
            binder << getValueOfSubject();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getRepliesCount())
        {
            binder << getValueOfRepliesCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getLastReplyId())
        {
            binder << getValueOfLastReplyId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getCreatedOn())
        {
            binder << getValueOfCreatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getUpdatedOn())
        {
            binder << getValueOfUpdatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getLocked())
        {
            binder << getValueOfLocked();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getSticky())
        {
            binder << getValueOfSticky();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getStickedOn())
        {
            binder << getValueOfStickedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Messages::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getForumId())
    {
        ret["forum_id"]=getValueOfForumId();
    }
    else
    {
        ret["forum_id"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getRepliesCount())
    {
        ret["replies_count"]=getValueOfRepliesCount();
    }
    else
    {
        ret["replies_count"]=Json::Value();
    }
    if(getLastReplyId())
    {
        ret["last_reply_id"]=getValueOfLastReplyId();
    }
    else
    {
        ret["last_reply_id"]=Json::Value();
    }
    if(getCreatedOn())
    {
        ret["created_on"]=getCreatedOn()->toDbStringLocal();
    }
    else
    {
        ret["created_on"]=Json::Value();
    }
    if(getUpdatedOn())
    {
        ret["updated_on"]=getUpdatedOn()->toDbStringLocal();
    }
    else
    {
        ret["updated_on"]=Json::Value();
    }
    if(getLocked())
    {
        ret["locked"]=getValueOfLocked();
    }
    else
    {
        ret["locked"]=Json::Value();
    }
    if(getSticky())
    {
        ret["sticky"]=getValueOfSticky();
    }
    else
    {
        ret["sticky"]=Json::Value();
    }
    if(getStickedOn())
    {
        ret["sticked_on"]=getStickedOn()->toDbStringLocal();
    }
    else
    {
        ret["sticked_on"]=Json::Value();
    }
    return ret;
}

Json::Value Messages::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 13)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getForumId())
            {
                ret[pMasqueradingVector[1]]=getValueOfForumId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getParentId())
            {
                ret[pMasqueradingVector[2]]=getValueOfParentId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSubject())
            {
                ret[pMasqueradingVector[3]]=getValueOfSubject();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[4]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAuthorId())
            {
                ret[pMasqueradingVector[5]]=getValueOfAuthorId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getRepliesCount())
            {
                ret[pMasqueradingVector[6]]=getValueOfRepliesCount();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getLastReplyId())
            {
                ret[pMasqueradingVector[7]]=getValueOfLastReplyId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCreatedOn())
            {
                ret[pMasqueradingVector[8]]=getCreatedOn()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getUpdatedOn())
            {
                ret[pMasqueradingVector[9]]=getUpdatedOn()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getLocked())
            {
                ret[pMasqueradingVector[10]]=getValueOfLocked();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getSticky())
            {
                ret[pMasqueradingVector[11]]=getValueOfSticky();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getStickedOn())
            {
                ret[pMasqueradingVector[12]]=getStickedOn()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getForumId())
    {
        ret["forum_id"]=getValueOfForumId();
    }
    else
    {
        ret["forum_id"]=Json::Value();
    }
    if(getParentId())
    {
        ret["parent_id"]=getValueOfParentId();
    }
    else
    {
        ret["parent_id"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getRepliesCount())
    {
        ret["replies_count"]=getValueOfRepliesCount();
    }
    else
    {
        ret["replies_count"]=Json::Value();
    }
    if(getLastReplyId())
    {
        ret["last_reply_id"]=getValueOfLastReplyId();
    }
    else
    {
        ret["last_reply_id"]=Json::Value();
    }
    if(getCreatedOn())
    {
        ret["created_on"]=getCreatedOn()->toDbStringLocal();
    }
    else
    {
        ret["created_on"]=Json::Value();
    }
    if(getUpdatedOn())
    {
        ret["updated_on"]=getUpdatedOn()->toDbStringLocal();
    }
    else
    {
        ret["updated_on"]=Json::Value();
    }
    if(getLocked())
    {
        ret["locked"]=getValueOfLocked();
    }
    else
    {
        ret["locked"]=Json::Value();
    }
    if(getSticky())
    {
        ret["sticky"]=getValueOfSticky();
    }
    else
    {
        ret["sticky"]=Json::Value();
    }
    if(getStickedOn())
    {
        ret["sticked_on"]=getStickedOn()->toDbStringLocal();
    }
    else
    {
        ret["sticked_on"]=Json::Value();
    }
    return ret;
}
