/**
 *
 *  OauthApplications.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "OauthApplications.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string OauthApplications::Cols::_id = "id";
const std::string OauthApplications::Cols::_name = "name";
const std::string OauthApplications::Cols::_uid = "uid";
const std::string OauthApplications::Cols::_secret = "secret";
const std::string OauthApplications::Cols::_owner_type = "owner_type";
const std::string OauthApplications::Cols::_owner_id = "owner_id";
const std::string OauthApplications::Cols::_client_credentials_user_id = "client_credentials_user_id";
const std::string OauthApplications::Cols::_redirect_uri = "redirect_uri";
const std::string OauthApplications::Cols::_scopes = "scopes";
const std::string OauthApplications::Cols::_confidential = "confidential";
const std::string OauthApplications::Cols::_created_at = "created_at";
const std::string OauthApplications::Cols::_updated_at = "updated_at";
const std::string OauthApplications::primaryKeyName = "id";
const bool OauthApplications::hasPrimaryKey = true;
const std::string OauthApplications::tableName = "oauth_applications";

const std::vector<typename OauthApplications::MetaData> OauthApplications::_metaData={
{"id","int64_t","bigint",8,1,1,1},
{"name","std::string","character varying",0,0,0,1},
{"uid","std::string","character varying",0,0,0,1},
{"secret","std::string","character varying",0,0,0,1},
{"owner_type","std::string","character varying",0,0,0,0},
{"owner_id","int32_t","integer",4,0,0,0},
{"client_credentials_user_id","int32_t","integer",4,0,0,0},
{"redirect_uri","std::string","text",0,0,0,1},
{"scopes","std::string","character varying",0,0,0,1},
{"confidential","bool","boolean",1,0,0,1},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &OauthApplications::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
OauthApplications::OauthApplications(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["uid"].isNull())
        {
            _uid=std::make_shared<std::string>(r["uid"].as<std::string>());
        }
        if(!r["secret"].isNull())
        {
            _secret=std::make_shared<std::string>(r["secret"].as<std::string>());
        }
        if(!r["owner_type"].isNull())
        {
            _ownerType=std::make_shared<std::string>(r["owner_type"].as<std::string>());
        }
        if(!r["owner_id"].isNull())
        {
            _ownerId=std::make_shared<int32_t>(r["owner_id"].as<int32_t>());
        }
        if(!r["client_credentials_user_id"].isNull())
        {
            _clientCredentialsUserId=std::make_shared<int32_t>(r["client_credentials_user_id"].as<int32_t>());
        }
        if(!r["redirect_uri"].isNull())
        {
            _redirectUri=std::make_shared<std::string>(r["redirect_uri"].as<std::string>());
        }
        if(!r["scopes"].isNull())
        {
            _scopes=std::make_shared<std::string>(r["scopes"].as<std::string>());
        }
        if(!r["confidential"].isNull())
        {
            _confidential=std::make_shared<bool>(r["confidential"].as<bool>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int64_t &OauthApplications::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int64_t> &OauthApplications::getId() const noexcept
{
    return _id;
}
const typename OauthApplications::PrimaryKeyType & OauthApplications::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &OauthApplications::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthApplications::getName() const noexcept
{
    return _name;
}
void OauthApplications::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[1] = true;
}
void OauthApplications::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[1] = true;
}


const std::string &OauthApplications::getValueOfUid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_uid)
        return *_uid;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthApplications::getUid() const noexcept
{
    return _uid;
}
void OauthApplications::setUid(const std::string &pUid) noexcept
{
    _uid = std::make_shared<std::string>(pUid);
    _dirtyFlag[2] = true;
}
void OauthApplications::setUid(std::string &&pUid) noexcept
{
    _uid = std::make_shared<std::string>(std::move(pUid));
    _dirtyFlag[2] = true;
}


const std::string &OauthApplications::getValueOfSecret() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_secret)
        return *_secret;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthApplications::getSecret() const noexcept
{
    return _secret;
}
void OauthApplications::setSecret(const std::string &pSecret) noexcept
{
    _secret = std::make_shared<std::string>(pSecret);
    _dirtyFlag[3] = true;
}
void OauthApplications::setSecret(std::string &&pSecret) noexcept
{
    _secret = std::make_shared<std::string>(std::move(pSecret));
    _dirtyFlag[3] = true;
}


const std::string &OauthApplications::getValueOfOwnerType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_ownerType)
        return *_ownerType;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthApplications::getOwnerType() const noexcept
{
    return _ownerType;
}
void OauthApplications::setOwnerType(const std::string &pOwnerType) noexcept
{
    _ownerType = std::make_shared<std::string>(pOwnerType);
    _dirtyFlag[4] = true;
}
void OauthApplications::setOwnerType(std::string &&pOwnerType) noexcept
{
    _ownerType = std::make_shared<std::string>(std::move(pOwnerType));
    _dirtyFlag[4] = true;
}


const int32_t &OauthApplications::getValueOfOwnerId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_ownerId)
        return *_ownerId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OauthApplications::getOwnerId() const noexcept
{
    return _ownerId;
}
void OauthApplications::setOwnerId(const int32_t &pOwnerId) noexcept
{
    _ownerId = std::make_shared<int32_t>(pOwnerId);
    _dirtyFlag[5] = true;
}


const int32_t &OauthApplications::getValueOfClientCredentialsUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_clientCredentialsUserId)
        return *_clientCredentialsUserId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OauthApplications::getClientCredentialsUserId() const noexcept
{
    return _clientCredentialsUserId;
}
void OauthApplications::setClientCredentialsUserId(const int32_t &pClientCredentialsUserId) noexcept
{
    _clientCredentialsUserId = std::make_shared<int32_t>(pClientCredentialsUserId);
    _dirtyFlag[6] = true;
}


const std::string &OauthApplications::getValueOfRedirectUri() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_redirectUri)
        return *_redirectUri;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthApplications::getRedirectUri() const noexcept
{
    return _redirectUri;
}
void OauthApplications::setRedirectUri(const std::string &pRedirectUri) noexcept
{
    _redirectUri = std::make_shared<std::string>(pRedirectUri);
    _dirtyFlag[7] = true;
}
void OauthApplications::setRedirectUri(std::string &&pRedirectUri) noexcept
{
    _redirectUri = std::make_shared<std::string>(std::move(pRedirectUri));
    _dirtyFlag[7] = true;
}


const std::string &OauthApplications::getValueOfScopes() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_scopes)
        return *_scopes;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthApplications::getScopes() const noexcept
{
    return _scopes;
}
void OauthApplications::setScopes(const std::string &pScopes) noexcept
{
    _scopes = std::make_shared<std::string>(pScopes);
    _dirtyFlag[8] = true;
}
void OauthApplications::setScopes(std::string &&pScopes) noexcept
{
    _scopes = std::make_shared<std::string>(std::move(pScopes));
    _dirtyFlag[8] = true;
}


const bool &OauthApplications::getValueOfConfidential() const noexcept
{
    const static bool defaultValue = bool();
    if(_confidential)
        return *_confidential;
    return defaultValue;
}
const std::shared_ptr<bool> &OauthApplications::getConfidential() const noexcept
{
    return _confidential;
}
void OauthApplications::setConfidential(const bool &pConfidential) noexcept
{
    _confidential = std::make_shared<bool>(pConfidential);
    _dirtyFlag[9] = true;
}


const ::trantor::Date &OauthApplications::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OauthApplications::getCreatedAt() const noexcept
{
    return _createdAt;
}
void OauthApplications::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[10] = true;
}


const ::trantor::Date &OauthApplications::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OauthApplications::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void OauthApplications::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[11] = true;
}


void OauthApplications::updateId(const uint64_t id)
{
}

const std::vector<std::string> &OauthApplications::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "name",
        "uid",
        "secret",
        "owner_type",
        "owner_id",
        "client_credentials_user_id",
        "redirect_uri",
        "scopes",
        "confidential",
        "created_at",
        "updated_at"
    };
    return _inCols;
}

void OauthApplications::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getName())
    {
        binder << getValueOfName();
    }
    else
    {
        binder << nullptr;
    }
    if(getUid())
    {
        binder << getValueOfUid();
    }
    else
    {
        binder << nullptr;
    }
    if(getSecret())
    {
        binder << getValueOfSecret();
    }
    else
    {
        binder << nullptr;
    }
    if(getOwnerType())
    {
        binder << getValueOfOwnerType();
    }
    else
    {
        binder << nullptr;
    }
    if(getOwnerId())
    {
        binder << getValueOfOwnerId();
    }
    else
    {
        binder << nullptr;
    }
    if(getClientCredentialsUserId())
    {
        binder << getValueOfClientCredentialsUserId();
    }
    else
    {
        binder << nullptr;
    }
    if(getRedirectUri())
    {
        binder << getValueOfRedirectUri();
    }
    else
    {
        binder << nullptr;
    }
    if(getScopes())
    {
        binder << getValueOfScopes();
    }
    else
    {
        binder << nullptr;
    }
    if(getConfidential())
    {
        binder << getValueOfConfidential();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> OauthApplications::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void OauthApplications::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getUid())
        {
            binder << getValueOfUid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getSecret())
        {
            binder << getValueOfSecret();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getOwnerType())
        {
            binder << getValueOfOwnerType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getOwnerId())
        {
            binder << getValueOfOwnerId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getClientCredentialsUserId())
        {
            binder << getValueOfClientCredentialsUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getRedirectUri())
        {
            binder << getValueOfRedirectUri();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getScopes())
        {
            binder << getValueOfScopes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getConfidential())
        {
            binder << getValueOfConfidential();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value OauthApplications::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getUid())
    {
        ret["uid"]=getValueOfUid();
    }
    else
    {
        ret["uid"]=Json::Value();
    }
    if(getSecret())
    {
        ret["secret"]=getValueOfSecret();
    }
    else
    {
        ret["secret"]=Json::Value();
    }
    if(getOwnerType())
    {
        ret["owner_type"]=getValueOfOwnerType();
    }
    else
    {
        ret["owner_type"]=Json::Value();
    }
    if(getOwnerId())
    {
        ret["owner_id"]=getValueOfOwnerId();
    }
    else
    {
        ret["owner_id"]=Json::Value();
    }
    if(getClientCredentialsUserId())
    {
        ret["client_credentials_user_id"]=getValueOfClientCredentialsUserId();
    }
    else
    {
        ret["client_credentials_user_id"]=Json::Value();
    }
    if(getRedirectUri())
    {
        ret["redirect_uri"]=getValueOfRedirectUri();
    }
    else
    {
        ret["redirect_uri"]=Json::Value();
    }
    if(getScopes())
    {
        ret["scopes"]=getValueOfScopes();
    }
    else
    {
        ret["scopes"]=Json::Value();
    }
    if(getConfidential())
    {
        ret["confidential"]=getValueOfConfidential();
    }
    else
    {
        ret["confidential"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}
