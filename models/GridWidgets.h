/**
 *
 *  GridWidgets.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject4 
{
class GridWidgets
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _start_row;
        static const std::string _end_row;
        static const std::string _start_column;
        static const std::string _end_column;
        static const std::string _identifier;
        static const std::string _options;
        static const std::string _grid_id;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int64_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;
    explicit GridWidgets(const Row &r) noexcept;
    GridWidgets() = default;
    
    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getId() const noexcept;

    /**  For column start_row  */
    ///Get the value of the column start_row, returns the default value if the column is null
    const int32_t &getValueOfStartRow() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getStartRow() const noexcept;
    ///Set the value of the column start_row
    void setStartRow(const int32_t &pStartRow) noexcept;

    /**  For column end_row  */
    ///Get the value of the column end_row, returns the default value if the column is null
    const int32_t &getValueOfEndRow() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getEndRow() const noexcept;
    ///Set the value of the column end_row
    void setEndRow(const int32_t &pEndRow) noexcept;

    /**  For column start_column  */
    ///Get the value of the column start_column, returns the default value if the column is null
    const int32_t &getValueOfStartColumn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getStartColumn() const noexcept;
    ///Set the value of the column start_column
    void setStartColumn(const int32_t &pStartColumn) noexcept;

    /**  For column end_column  */
    ///Get the value of the column end_column, returns the default value if the column is null
    const int32_t &getValueOfEndColumn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getEndColumn() const noexcept;
    ///Set the value of the column end_column
    void setEndColumn(const int32_t &pEndColumn) noexcept;

    /**  For column identifier  */
    ///Get the value of the column identifier, returns the default value if the column is null
    const std::string &getValueOfIdentifier() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIdentifier() const noexcept;
    ///Set the value of the column identifier
    void setIdentifier(const std::string &pIdentifier) noexcept;
    void setIdentifier(std::string &&pIdentifier) noexcept;

    /**  For column options  */
    ///Get the value of the column options, returns the default value if the column is null
    const std::string &getValueOfOptions() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getOptions() const noexcept;
    ///Set the value of the column options
    void setOptions(const std::string &pOptions) noexcept;
    void setOptions(std::string &&pOptions) noexcept;

    /**  For column grid_id  */
    ///Get the value of the column grid_id, returns the default value if the column is null
    const int64_t &getValueOfGridId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getGridId() const noexcept;
    ///Set the value of the column grid_id
    void setGridId(const int64_t &pGridId) noexcept;


    static size_t getColumnNumber() noexcept {  return 8;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;

  private:
    friend Mapper<GridWidgets>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> _id;
    std::shared_ptr<int32_t> _startRow;
    std::shared_ptr<int32_t> _endRow;
    std::shared_ptr<int32_t> _startColumn;
    std::shared_ptr<int32_t> _endColumn;
    std::shared_ptr<std::string> _identifier;
    std::shared_ptr<std::string> _options;
    std::shared_ptr<int64_t> _gridId;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[8]={ false };
};
} // namespace openproject4
} // namespace drogon_model
