/**
 *
 *  OauthAccessGrants.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "OauthAccessGrants.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string OauthAccessGrants::Cols::_id = "id";
const std::string OauthAccessGrants::Cols::_resource_owner_id = "resource_owner_id";
const std::string OauthAccessGrants::Cols::_application_id = "application_id";
const std::string OauthAccessGrants::Cols::_token = "token";
const std::string OauthAccessGrants::Cols::_expires_in = "expires_in";
const std::string OauthAccessGrants::Cols::_redirect_uri = "redirect_uri";
const std::string OauthAccessGrants::Cols::_created_at = "created_at";
const std::string OauthAccessGrants::Cols::_revoked_at = "revoked_at";
const std::string OauthAccessGrants::Cols::_scopes = "scopes";
const std::string OauthAccessGrants::Cols::_code_challenge = "code_challenge";
const std::string OauthAccessGrants::Cols::_code_challenge_method = "code_challenge_method";
const std::string OauthAccessGrants::primaryKeyName = "id";
const bool OauthAccessGrants::hasPrimaryKey = true;
const std::string OauthAccessGrants::tableName = "oauth_access_grants";

const std::vector<typename OauthAccessGrants::MetaData> OauthAccessGrants::_metaData={
{"id","int64_t","bigint",8,1,1,1},
{"resource_owner_id","int64_t","bigint",8,0,0,1},
{"application_id","int64_t","bigint",8,0,0,1},
{"token","std::string","character varying",0,0,0,1},
{"expires_in","int32_t","integer",4,0,0,1},
{"redirect_uri","std::string","text",0,0,0,1},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"revoked_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"scopes","std::string","character varying",0,0,0,0},
{"code_challenge","std::string","character varying",0,0,0,0},
{"code_challenge_method","std::string","character varying",0,0,0,0}
};
const std::string &OauthAccessGrants::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
OauthAccessGrants::OauthAccessGrants(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["resource_owner_id"].isNull())
        {
            _resourceOwnerId=std::make_shared<int64_t>(r["resource_owner_id"].as<int64_t>());
        }
        if(!r["application_id"].isNull())
        {
            _applicationId=std::make_shared<int64_t>(r["application_id"].as<int64_t>());
        }
        if(!r["token"].isNull())
        {
            _token=std::make_shared<std::string>(r["token"].as<std::string>());
        }
        if(!r["expires_in"].isNull())
        {
            _expiresIn=std::make_shared<int32_t>(r["expires_in"].as<int32_t>());
        }
        if(!r["redirect_uri"].isNull())
        {
            _redirectUri=std::make_shared<std::string>(r["redirect_uri"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["revoked_at"].isNull())
        {
            auto timeStr = r["revoked_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _revokedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["scopes"].isNull())
        {
            _scopes=std::make_shared<std::string>(r["scopes"].as<std::string>());
        }
        if(!r["code_challenge"].isNull())
        {
            _codeChallenge=std::make_shared<std::string>(r["code_challenge"].as<std::string>());
        }
        if(!r["code_challenge_method"].isNull())
        {
            _codeChallengeMethod=std::make_shared<std::string>(r["code_challenge_method"].as<std::string>());
        }
}
const int64_t &OauthAccessGrants::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int64_t> &OauthAccessGrants::getId() const noexcept
{
    return _id;
}
const typename OauthAccessGrants::PrimaryKeyType & OauthAccessGrants::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int64_t &OauthAccessGrants::getValueOfResourceOwnerId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_resourceOwnerId)
        return *_resourceOwnerId;
    return defaultValue;
}
const std::shared_ptr<int64_t> &OauthAccessGrants::getResourceOwnerId() const noexcept
{
    return _resourceOwnerId;
}
void OauthAccessGrants::setResourceOwnerId(const int64_t &pResourceOwnerId) noexcept
{
    _resourceOwnerId = std::make_shared<int64_t>(pResourceOwnerId);
    _dirtyFlag[1] = true;
}


const int64_t &OauthAccessGrants::getValueOfApplicationId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_applicationId)
        return *_applicationId;
    return defaultValue;
}
const std::shared_ptr<int64_t> &OauthAccessGrants::getApplicationId() const noexcept
{
    return _applicationId;
}
void OauthAccessGrants::setApplicationId(const int64_t &pApplicationId) noexcept
{
    _applicationId = std::make_shared<int64_t>(pApplicationId);
    _dirtyFlag[2] = true;
}


const std::string &OauthAccessGrants::getValueOfToken() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_token)
        return *_token;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthAccessGrants::getToken() const noexcept
{
    return _token;
}
void OauthAccessGrants::setToken(const std::string &pToken) noexcept
{
    _token = std::make_shared<std::string>(pToken);
    _dirtyFlag[3] = true;
}
void OauthAccessGrants::setToken(std::string &&pToken) noexcept
{
    _token = std::make_shared<std::string>(std::move(pToken));
    _dirtyFlag[3] = true;
}


const int32_t &OauthAccessGrants::getValueOfExpiresIn() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_expiresIn)
        return *_expiresIn;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OauthAccessGrants::getExpiresIn() const noexcept
{
    return _expiresIn;
}
void OauthAccessGrants::setExpiresIn(const int32_t &pExpiresIn) noexcept
{
    _expiresIn = std::make_shared<int32_t>(pExpiresIn);
    _dirtyFlag[4] = true;
}


const std::string &OauthAccessGrants::getValueOfRedirectUri() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_redirectUri)
        return *_redirectUri;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthAccessGrants::getRedirectUri() const noexcept
{
    return _redirectUri;
}
void OauthAccessGrants::setRedirectUri(const std::string &pRedirectUri) noexcept
{
    _redirectUri = std::make_shared<std::string>(pRedirectUri);
    _dirtyFlag[5] = true;
}
void OauthAccessGrants::setRedirectUri(std::string &&pRedirectUri) noexcept
{
    _redirectUri = std::make_shared<std::string>(std::move(pRedirectUri));
    _dirtyFlag[5] = true;
}


const ::trantor::Date &OauthAccessGrants::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OauthAccessGrants::getCreatedAt() const noexcept
{
    return _createdAt;
}
void OauthAccessGrants::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[6] = true;
}


const ::trantor::Date &OauthAccessGrants::getValueOfRevokedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_revokedAt)
        return *_revokedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OauthAccessGrants::getRevokedAt() const noexcept
{
    return _revokedAt;
}
void OauthAccessGrants::setRevokedAt(const ::trantor::Date &pRevokedAt) noexcept
{
    _revokedAt = std::make_shared<::trantor::Date>(pRevokedAt);
    _dirtyFlag[7] = true;
}


const std::string &OauthAccessGrants::getValueOfScopes() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_scopes)
        return *_scopes;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthAccessGrants::getScopes() const noexcept
{
    return _scopes;
}
void OauthAccessGrants::setScopes(const std::string &pScopes) noexcept
{
    _scopes = std::make_shared<std::string>(pScopes);
    _dirtyFlag[8] = true;
}
void OauthAccessGrants::setScopes(std::string &&pScopes) noexcept
{
    _scopes = std::make_shared<std::string>(std::move(pScopes));
    _dirtyFlag[8] = true;
}


const std::string &OauthAccessGrants::getValueOfCodeChallenge() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_codeChallenge)
        return *_codeChallenge;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthAccessGrants::getCodeChallenge() const noexcept
{
    return _codeChallenge;
}
void OauthAccessGrants::setCodeChallenge(const std::string &pCodeChallenge) noexcept
{
    _codeChallenge = std::make_shared<std::string>(pCodeChallenge);
    _dirtyFlag[9] = true;
}
void OauthAccessGrants::setCodeChallenge(std::string &&pCodeChallenge) noexcept
{
    _codeChallenge = std::make_shared<std::string>(std::move(pCodeChallenge));
    _dirtyFlag[9] = true;
}


const std::string &OauthAccessGrants::getValueOfCodeChallengeMethod() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_codeChallengeMethod)
        return *_codeChallengeMethod;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthAccessGrants::getCodeChallengeMethod() const noexcept
{
    return _codeChallengeMethod;
}
void OauthAccessGrants::setCodeChallengeMethod(const std::string &pCodeChallengeMethod) noexcept
{
    _codeChallengeMethod = std::make_shared<std::string>(pCodeChallengeMethod);
    _dirtyFlag[10] = true;
}
void OauthAccessGrants::setCodeChallengeMethod(std::string &&pCodeChallengeMethod) noexcept
{
    _codeChallengeMethod = std::make_shared<std::string>(std::move(pCodeChallengeMethod));
    _dirtyFlag[10] = true;
}


void OauthAccessGrants::updateId(const uint64_t id)
{
}

const std::vector<std::string> &OauthAccessGrants::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "resource_owner_id",
        "application_id",
        "token",
        "expires_in",
        "redirect_uri",
        "created_at",
        "revoked_at",
        "scopes",
        "code_challenge",
        "code_challenge_method"
    };
    return _inCols;
}

void OauthAccessGrants::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getResourceOwnerId())
    {
        binder << getValueOfResourceOwnerId();
    }
    else
    {
        binder << nullptr;
    }
    if(getApplicationId())
    {
        binder << getValueOfApplicationId();
    }
    else
    {
        binder << nullptr;
    }
    if(getToken())
    {
        binder << getValueOfToken();
    }
    else
    {
        binder << nullptr;
    }
    if(getExpiresIn())
    {
        binder << getValueOfExpiresIn();
    }
    else
    {
        binder << nullptr;
    }
    if(getRedirectUri())
    {
        binder << getValueOfRedirectUri();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getRevokedAt())
    {
        binder << getValueOfRevokedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getScopes())
    {
        binder << getValueOfScopes();
    }
    else
    {
        binder << nullptr;
    }
    if(getCodeChallenge())
    {
        binder << getValueOfCodeChallenge();
    }
    else
    {
        binder << nullptr;
    }
    if(getCodeChallengeMethod())
    {
        binder << getValueOfCodeChallengeMethod();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> OauthAccessGrants::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void OauthAccessGrants::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getResourceOwnerId())
        {
            binder << getValueOfResourceOwnerId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getApplicationId())
        {
            binder << getValueOfApplicationId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getToken())
        {
            binder << getValueOfToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getExpiresIn())
        {
            binder << getValueOfExpiresIn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getRedirectUri())
        {
            binder << getValueOfRedirectUri();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getRevokedAt())
        {
            binder << getValueOfRevokedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getScopes())
        {
            binder << getValueOfScopes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getCodeChallenge())
        {
            binder << getValueOfCodeChallenge();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getCodeChallengeMethod())
        {
            binder << getValueOfCodeChallengeMethod();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value OauthAccessGrants::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getResourceOwnerId())
    {
        ret["resource_owner_id"]=(Json::Int64)getValueOfResourceOwnerId();
    }
    else
    {
        ret["resource_owner_id"]=Json::Value();
    }
    if(getApplicationId())
    {
        ret["application_id"]=(Json::Int64)getValueOfApplicationId();
    }
    else
    {
        ret["application_id"]=Json::Value();
    }
    if(getToken())
    {
        ret["token"]=getValueOfToken();
    }
    else
    {
        ret["token"]=Json::Value();
    }
    if(getExpiresIn())
    {
        ret["expires_in"]=getValueOfExpiresIn();
    }
    else
    {
        ret["expires_in"]=Json::Value();
    }
    if(getRedirectUri())
    {
        ret["redirect_uri"]=getValueOfRedirectUri();
    }
    else
    {
        ret["redirect_uri"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getRevokedAt())
    {
        ret["revoked_at"]=getRevokedAt()->toDbStringLocal();
    }
    else
    {
        ret["revoked_at"]=Json::Value();
    }
    if(getScopes())
    {
        ret["scopes"]=getValueOfScopes();
    }
    else
    {
        ret["scopes"]=Json::Value();
    }
    if(getCodeChallenge())
    {
        ret["code_challenge"]=getValueOfCodeChallenge();
    }
    else
    {
        ret["code_challenge"]=Json::Value();
    }
    if(getCodeChallengeMethod())
    {
        ret["code_challenge_method"]=getValueOfCodeChallengeMethod();
    }
    else
    {
        ret["code_challenge_method"]=Json::Value();
    }
    return ret;
}
