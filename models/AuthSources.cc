/**
 *
 *  AuthSources.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "AuthSources.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject6;

const std::string AuthSources::Cols::_id = "id";
const std::string AuthSources::Cols::_type = "type";
const std::string AuthSources::Cols::_name = "name";
const std::string AuthSources::Cols::_host = "host";
const std::string AuthSources::Cols::_port = "port";
const std::string AuthSources::Cols::_account = "account";
const std::string AuthSources::Cols::_account_password = "account_password";
const std::string AuthSources::Cols::_base_dn = "base_dn";
const std::string AuthSources::Cols::_attr_login = "attr_login";
const std::string AuthSources::Cols::_attr_firstname = "attr_firstname";
const std::string AuthSources::Cols::_attr_lastname = "attr_lastname";
const std::string AuthSources::Cols::_attr_mail = "attr_mail";
const std::string AuthSources::Cols::_onthefly_register = "onthefly_register";
const std::string AuthSources::Cols::_attr_admin = "attr_admin";
const std::string AuthSources::Cols::_created_at = "created_at";
const std::string AuthSources::Cols::_updated_at = "updated_at";
const std::string AuthSources::Cols::_tls_mode = "tls_mode";
const std::string AuthSources::primaryKeyName = "id";
const bool AuthSources::hasPrimaryKey = true;
const std::string AuthSources::tableName = "auth_sources";

const std::vector<typename AuthSources::MetaData> AuthSources::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"type","std::string","character varying",30,0,0,1},
{"name","std::string","character varying",60,0,0,1},
{"host","std::string","character varying",60,0,0,0},
{"port","int32_t","integer",4,0,0,0},
{"account","std::string","character varying",0,0,0,0},
{"account_password","std::string","character varying",0,0,0,0},
{"base_dn","std::string","character varying",0,0,0,0},
{"attr_login","std::string","character varying",30,0,0,0},
{"attr_firstname","std::string","character varying",30,0,0,0},
{"attr_lastname","std::string","character varying",30,0,0,0},
{"attr_mail","std::string","character varying",30,0,0,0},
{"onthefly_register","bool","boolean",1,0,0,1},
{"attr_admin","std::string","character varying",0,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"tls_mode","int32_t","integer",4,0,0,1}
};
const std::string &AuthSources::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
AuthSources::AuthSources(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["host"].isNull())
        {
            _host=std::make_shared<std::string>(r["host"].as<std::string>());
        }
        if(!r["port"].isNull())
        {
            _port=std::make_shared<int32_t>(r["port"].as<int32_t>());
        }
        if(!r["account"].isNull())
        {
            _account=std::make_shared<std::string>(r["account"].as<std::string>());
        }
        if(!r["account_password"].isNull())
        {
            _accountPassword=std::make_shared<std::string>(r["account_password"].as<std::string>());
        }
        if(!r["base_dn"].isNull())
        {
            _baseDn=std::make_shared<std::string>(r["base_dn"].as<std::string>());
        }
        if(!r["attr_login"].isNull())
        {
            _attrLogin=std::make_shared<std::string>(r["attr_login"].as<std::string>());
        }
        if(!r["attr_firstname"].isNull())
        {
            _attrFirstname=std::make_shared<std::string>(r["attr_firstname"].as<std::string>());
        }
        if(!r["attr_lastname"].isNull())
        {
            _attrLastname=std::make_shared<std::string>(r["attr_lastname"].as<std::string>());
        }
        if(!r["attr_mail"].isNull())
        {
            _attrMail=std::make_shared<std::string>(r["attr_mail"].as<std::string>());
        }
        if(!r["onthefly_register"].isNull())
        {
            _ontheflyRegister=std::make_shared<bool>(r["onthefly_register"].as<bool>());
        }
        if(!r["attr_admin"].isNull())
        {
            _attrAdmin=std::make_shared<std::string>(r["attr_admin"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["tls_mode"].isNull())
        {
            _tlsMode=std::make_shared<int32_t>(r["tls_mode"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 17 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _type=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _name=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _host=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _port=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _account=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            _accountPassword=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            _baseDn=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            _attrLogin=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            _attrFirstname=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            _attrLastname=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            _attrMail=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            _ontheflyRegister=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            _attrAdmin=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            _tlsMode=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

AuthSources::AuthSources(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _dirtyFlag[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _type=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _name=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _host=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _port=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _account=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            _accountPassword=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _baseDn=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            _attrLogin=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            _attrFirstname=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            _attrLastname=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        _dirtyFlag[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            _attrMail=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        _dirtyFlag[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            _ontheflyRegister=std::make_shared<bool>(pJson[pMasqueradingVector[12]].asBool());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        _dirtyFlag[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            _attrAdmin=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        _dirtyFlag[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        _dirtyFlag[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        _dirtyFlag[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            _tlsMode=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
}

AuthSources::AuthSources(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _dirtyFlag[0]=true;
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        _dirtyFlag[1]=true;
        if(!pJson["type"].isNull())
        {
            _type=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        _dirtyFlag[2]=true;
        if(!pJson["name"].isNull())
        {
            _name=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("host"))
    {
        _dirtyFlag[3]=true;
        if(!pJson["host"].isNull())
        {
            _host=std::make_shared<std::string>(pJson["host"].asString());
        }
    }
    if(pJson.isMember("port"))
    {
        _dirtyFlag[4]=true;
        if(!pJson["port"].isNull())
        {
            _port=std::make_shared<int32_t>((int32_t)pJson["port"].asInt64());
        }
    }
    if(pJson.isMember("account"))
    {
        _dirtyFlag[5]=true;
        if(!pJson["account"].isNull())
        {
            _account=std::make_shared<std::string>(pJson["account"].asString());
        }
    }
    if(pJson.isMember("account_password"))
    {
        _dirtyFlag[6]=true;
        if(!pJson["account_password"].isNull())
        {
            _accountPassword=std::make_shared<std::string>(pJson["account_password"].asString());
        }
    }
    if(pJson.isMember("base_dn"))
    {
        _dirtyFlag[7]=true;
        if(!pJson["base_dn"].isNull())
        {
            _baseDn=std::make_shared<std::string>(pJson["base_dn"].asString());
        }
    }
    if(pJson.isMember("attr_login"))
    {
        _dirtyFlag[8]=true;
        if(!pJson["attr_login"].isNull())
        {
            _attrLogin=std::make_shared<std::string>(pJson["attr_login"].asString());
        }
    }
    if(pJson.isMember("attr_firstname"))
    {
        _dirtyFlag[9]=true;
        if(!pJson["attr_firstname"].isNull())
        {
            _attrFirstname=std::make_shared<std::string>(pJson["attr_firstname"].asString());
        }
    }
    if(pJson.isMember("attr_lastname"))
    {
        _dirtyFlag[10]=true;
        if(!pJson["attr_lastname"].isNull())
        {
            _attrLastname=std::make_shared<std::string>(pJson["attr_lastname"].asString());
        }
    }
    if(pJson.isMember("attr_mail"))
    {
        _dirtyFlag[11]=true;
        if(!pJson["attr_mail"].isNull())
        {
            _attrMail=std::make_shared<std::string>(pJson["attr_mail"].asString());
        }
    }
    if(pJson.isMember("onthefly_register"))
    {
        _dirtyFlag[12]=true;
        if(!pJson["onthefly_register"].isNull())
        {
            _ontheflyRegister=std::make_shared<bool>(pJson["onthefly_register"].asBool());
        }
    }
    if(pJson.isMember("attr_admin"))
    {
        _dirtyFlag[13]=true;
        if(!pJson["attr_admin"].isNull())
        {
            _attrAdmin=std::make_shared<std::string>(pJson["attr_admin"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        _dirtyFlag[14]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("updated_at"))
    {
        _dirtyFlag[15]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("tls_mode"))
    {
        _dirtyFlag[16]=true;
        if(!pJson["tls_mode"].isNull())
        {
            _tlsMode=std::make_shared<int32_t>((int32_t)pJson["tls_mode"].asInt64());
        }
    }
}

void AuthSources::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _type=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _name=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _host=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _port=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _account=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            _accountPassword=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _baseDn=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            _attrLogin=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            _attrFirstname=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        _dirtyFlag[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            _attrLastname=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        _dirtyFlag[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            _attrMail=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        _dirtyFlag[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            _ontheflyRegister=std::make_shared<bool>(pJson[pMasqueradingVector[12]].asBool());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        _dirtyFlag[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            _attrAdmin=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        _dirtyFlag[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        _dirtyFlag[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        _dirtyFlag[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            _tlsMode=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[16]].asInt64());
        }
    }
}
                                                                    
void AuthSources::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        _dirtyFlag[1] = true;
        if(!pJson["type"].isNull())
        {
            _type=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        _dirtyFlag[2] = true;
        if(!pJson["name"].isNull())
        {
            _name=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("host"))
    {
        _dirtyFlag[3] = true;
        if(!pJson["host"].isNull())
        {
            _host=std::make_shared<std::string>(pJson["host"].asString());
        }
    }
    if(pJson.isMember("port"))
    {
        _dirtyFlag[4] = true;
        if(!pJson["port"].isNull())
        {
            _port=std::make_shared<int32_t>((int32_t)pJson["port"].asInt64());
        }
    }
    if(pJson.isMember("account"))
    {
        _dirtyFlag[5] = true;
        if(!pJson["account"].isNull())
        {
            _account=std::make_shared<std::string>(pJson["account"].asString());
        }
    }
    if(pJson.isMember("account_password"))
    {
        _dirtyFlag[6] = true;
        if(!pJson["account_password"].isNull())
        {
            _accountPassword=std::make_shared<std::string>(pJson["account_password"].asString());
        }
    }
    if(pJson.isMember("base_dn"))
    {
        _dirtyFlag[7] = true;
        if(!pJson["base_dn"].isNull())
        {
            _baseDn=std::make_shared<std::string>(pJson["base_dn"].asString());
        }
    }
    if(pJson.isMember("attr_login"))
    {
        _dirtyFlag[8] = true;
        if(!pJson["attr_login"].isNull())
        {
            _attrLogin=std::make_shared<std::string>(pJson["attr_login"].asString());
        }
    }
    if(pJson.isMember("attr_firstname"))
    {
        _dirtyFlag[9] = true;
        if(!pJson["attr_firstname"].isNull())
        {
            _attrFirstname=std::make_shared<std::string>(pJson["attr_firstname"].asString());
        }
    }
    if(pJson.isMember("attr_lastname"))
    {
        _dirtyFlag[10] = true;
        if(!pJson["attr_lastname"].isNull())
        {
            _attrLastname=std::make_shared<std::string>(pJson["attr_lastname"].asString());
        }
    }
    if(pJson.isMember("attr_mail"))
    {
        _dirtyFlag[11] = true;
        if(!pJson["attr_mail"].isNull())
        {
            _attrMail=std::make_shared<std::string>(pJson["attr_mail"].asString());
        }
    }
    if(pJson.isMember("onthefly_register"))
    {
        _dirtyFlag[12] = true;
        if(!pJson["onthefly_register"].isNull())
        {
            _ontheflyRegister=std::make_shared<bool>(pJson["onthefly_register"].asBool());
        }
    }
    if(pJson.isMember("attr_admin"))
    {
        _dirtyFlag[13] = true;
        if(!pJson["attr_admin"].isNull())
        {
            _attrAdmin=std::make_shared<std::string>(pJson["attr_admin"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        _dirtyFlag[14] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("updated_at"))
    {
        _dirtyFlag[15] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("tls_mode"))
    {
        _dirtyFlag[16] = true;
        if(!pJson["tls_mode"].isNull())
        {
            _tlsMode=std::make_shared<int32_t>((int32_t)pJson["tls_mode"].asInt64());
        }
    }
}

const int32_t &AuthSources::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AuthSources::getId() const noexcept
{
    return _id;
}
const typename AuthSources::PrimaryKeyType & AuthSources::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &AuthSources::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getType() const noexcept
{
    return _type;
}
void AuthSources::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[1] = true;
}
void AuthSources::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[1] = true;
}


const std::string &AuthSources::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getName() const noexcept
{
    return _name;
}
void AuthSources::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[2] = true;
}
void AuthSources::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[2] = true;
}


const std::string &AuthSources::getValueOfHost() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_host)
        return *_host;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getHost() const noexcept
{
    return _host;
}
void AuthSources::setHost(const std::string &pHost) noexcept
{
    _host = std::make_shared<std::string>(pHost);
    _dirtyFlag[3] = true;
}
void AuthSources::setHost(std::string &&pHost) noexcept
{
    _host = std::make_shared<std::string>(std::move(pHost));
    _dirtyFlag[3] = true;
}


const int32_t &AuthSources::getValueOfPort() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_port)
        return *_port;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AuthSources::getPort() const noexcept
{
    return _port;
}
void AuthSources::setPort(const int32_t &pPort) noexcept
{
    _port = std::make_shared<int32_t>(pPort);
    _dirtyFlag[4] = true;
}


const std::string &AuthSources::getValueOfAccount() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_account)
        return *_account;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAccount() const noexcept
{
    return _account;
}
void AuthSources::setAccount(const std::string &pAccount) noexcept
{
    _account = std::make_shared<std::string>(pAccount);
    _dirtyFlag[5] = true;
}
void AuthSources::setAccount(std::string &&pAccount) noexcept
{
    _account = std::make_shared<std::string>(std::move(pAccount));
    _dirtyFlag[5] = true;
}


const std::string &AuthSources::getValueOfAccountPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_accountPassword)
        return *_accountPassword;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAccountPassword() const noexcept
{
    return _accountPassword;
}
void AuthSources::setAccountPassword(const std::string &pAccountPassword) noexcept
{
    _accountPassword = std::make_shared<std::string>(pAccountPassword);
    _dirtyFlag[6] = true;
}
void AuthSources::setAccountPassword(std::string &&pAccountPassword) noexcept
{
    _accountPassword = std::make_shared<std::string>(std::move(pAccountPassword));
    _dirtyFlag[6] = true;
}


const std::string &AuthSources::getValueOfBaseDn() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_baseDn)
        return *_baseDn;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getBaseDn() const noexcept
{
    return _baseDn;
}
void AuthSources::setBaseDn(const std::string &pBaseDn) noexcept
{
    _baseDn = std::make_shared<std::string>(pBaseDn);
    _dirtyFlag[7] = true;
}
void AuthSources::setBaseDn(std::string &&pBaseDn) noexcept
{
    _baseDn = std::make_shared<std::string>(std::move(pBaseDn));
    _dirtyFlag[7] = true;
}


const std::string &AuthSources::getValueOfAttrLogin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attrLogin)
        return *_attrLogin;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAttrLogin() const noexcept
{
    return _attrLogin;
}
void AuthSources::setAttrLogin(const std::string &pAttrLogin) noexcept
{
    _attrLogin = std::make_shared<std::string>(pAttrLogin);
    _dirtyFlag[8] = true;
}
void AuthSources::setAttrLogin(std::string &&pAttrLogin) noexcept
{
    _attrLogin = std::make_shared<std::string>(std::move(pAttrLogin));
    _dirtyFlag[8] = true;
}


const std::string &AuthSources::getValueOfAttrFirstname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attrFirstname)
        return *_attrFirstname;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAttrFirstname() const noexcept
{
    return _attrFirstname;
}
void AuthSources::setAttrFirstname(const std::string &pAttrFirstname) noexcept
{
    _attrFirstname = std::make_shared<std::string>(pAttrFirstname);
    _dirtyFlag[9] = true;
}
void AuthSources::setAttrFirstname(std::string &&pAttrFirstname) noexcept
{
    _attrFirstname = std::make_shared<std::string>(std::move(pAttrFirstname));
    _dirtyFlag[9] = true;
}


const std::string &AuthSources::getValueOfAttrLastname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attrLastname)
        return *_attrLastname;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAttrLastname() const noexcept
{
    return _attrLastname;
}
void AuthSources::setAttrLastname(const std::string &pAttrLastname) noexcept
{
    _attrLastname = std::make_shared<std::string>(pAttrLastname);
    _dirtyFlag[10] = true;
}
void AuthSources::setAttrLastname(std::string &&pAttrLastname) noexcept
{
    _attrLastname = std::make_shared<std::string>(std::move(pAttrLastname));
    _dirtyFlag[10] = true;
}


const std::string &AuthSources::getValueOfAttrMail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attrMail)
        return *_attrMail;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAttrMail() const noexcept
{
    return _attrMail;
}
void AuthSources::setAttrMail(const std::string &pAttrMail) noexcept
{
    _attrMail = std::make_shared<std::string>(pAttrMail);
    _dirtyFlag[11] = true;
}
void AuthSources::setAttrMail(std::string &&pAttrMail) noexcept
{
    _attrMail = std::make_shared<std::string>(std::move(pAttrMail));
    _dirtyFlag[11] = true;
}


const bool &AuthSources::getValueOfOntheflyRegister() const noexcept
{
    const static bool defaultValue = bool();
    if(_ontheflyRegister)
        return *_ontheflyRegister;
    return defaultValue;
}
const std::shared_ptr<bool> &AuthSources::getOntheflyRegister() const noexcept
{
    return _ontheflyRegister;
}
void AuthSources::setOntheflyRegister(const bool &pOntheflyRegister) noexcept
{
    _ontheflyRegister = std::make_shared<bool>(pOntheflyRegister);
    _dirtyFlag[12] = true;
}


const std::string &AuthSources::getValueOfAttrAdmin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_attrAdmin)
        return *_attrAdmin;
    return defaultValue;
}
const std::shared_ptr<std::string> &AuthSources::getAttrAdmin() const noexcept
{
    return _attrAdmin;
}
void AuthSources::setAttrAdmin(const std::string &pAttrAdmin) noexcept
{
    _attrAdmin = std::make_shared<std::string>(pAttrAdmin);
    _dirtyFlag[13] = true;
}
void AuthSources::setAttrAdmin(std::string &&pAttrAdmin) noexcept
{
    _attrAdmin = std::make_shared<std::string>(std::move(pAttrAdmin));
    _dirtyFlag[13] = true;
}


const ::trantor::Date &AuthSources::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &AuthSources::getCreatedAt() const noexcept
{
    return _createdAt;
}
void AuthSources::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[14] = true;
}


const ::trantor::Date &AuthSources::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &AuthSources::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void AuthSources::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[15] = true;
}


const int32_t &AuthSources::getValueOfTlsMode() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_tlsMode)
        return *_tlsMode;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AuthSources::getTlsMode() const noexcept
{
    return _tlsMode;
}
void AuthSources::setTlsMode(const int32_t &pTlsMode) noexcept
{
    _tlsMode = std::make_shared<int32_t>(pTlsMode);
    _dirtyFlag[16] = true;
}


void AuthSources::updateId(const uint64_t id)
{
}

const std::vector<std::string> &AuthSources::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "type",
        "name",
        "host",
        "port",
        "account",
        "account_password",
        "base_dn",
        "attr_login",
        "attr_firstname",
        "attr_lastname",
        "attr_mail",
        "onthefly_register",
        "attr_admin",
        "created_at",
        "updated_at",
        "tls_mode"
    };
    return _inCols;
}

void AuthSources::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getHost())
        {
            binder << getValueOfHost();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getPort())
        {
            binder << getValueOfPort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getAccount())
        {
            binder << getValueOfAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getAccountPassword())
        {
            binder << getValueOfAccountPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getBaseDn())
        {
            binder << getValueOfBaseDn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getAttrLogin())
        {
            binder << getValueOfAttrLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getAttrFirstname())
        {
            binder << getValueOfAttrFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getAttrLastname())
        {
            binder << getValueOfAttrLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getAttrMail())
        {
            binder << getValueOfAttrMail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getOntheflyRegister())
        {
            binder << getValueOfOntheflyRegister();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getAttrAdmin())
        {
            binder << getValueOfAttrAdmin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[16])
    {
        if(getTlsMode())
        {
            binder << getValueOfTlsMode();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> AuthSources::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void AuthSources::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getHost())
        {
            binder << getValueOfHost();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getPort())
        {
            binder << getValueOfPort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getAccount())
        {
            binder << getValueOfAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getAccountPassword())
        {
            binder << getValueOfAccountPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getBaseDn())
        {
            binder << getValueOfBaseDn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getAttrLogin())
        {
            binder << getValueOfAttrLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getAttrFirstname())
        {
            binder << getValueOfAttrFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getAttrLastname())
        {
            binder << getValueOfAttrLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getAttrMail())
        {
            binder << getValueOfAttrMail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getOntheflyRegister())
        {
            binder << getValueOfOntheflyRegister();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getAttrAdmin())
        {
            binder << getValueOfAttrAdmin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[16])
    {
        if(getTlsMode())
        {
            binder << getValueOfTlsMode();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value AuthSources::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getHost())
    {
        ret["host"]=getValueOfHost();
    }
    else
    {
        ret["host"]=Json::Value();
    }
    if(getPort())
    {
        ret["port"]=getValueOfPort();
    }
    else
    {
        ret["port"]=Json::Value();
    }
    if(getAccount())
    {
        ret["account"]=getValueOfAccount();
    }
    else
    {
        ret["account"]=Json::Value();
    }
    if(getAccountPassword())
    {
        ret["account_password"]=getValueOfAccountPassword();
    }
    else
    {
        ret["account_password"]=Json::Value();
    }
    if(getBaseDn())
    {
        ret["base_dn"]=getValueOfBaseDn();
    }
    else
    {
        ret["base_dn"]=Json::Value();
    }
    if(getAttrLogin())
    {
        ret["attr_login"]=getValueOfAttrLogin();
    }
    else
    {
        ret["attr_login"]=Json::Value();
    }
    if(getAttrFirstname())
    {
        ret["attr_firstname"]=getValueOfAttrFirstname();
    }
    else
    {
        ret["attr_firstname"]=Json::Value();
    }
    if(getAttrLastname())
    {
        ret["attr_lastname"]=getValueOfAttrLastname();
    }
    else
    {
        ret["attr_lastname"]=Json::Value();
    }
    if(getAttrMail())
    {
        ret["attr_mail"]=getValueOfAttrMail();
    }
    else
    {
        ret["attr_mail"]=Json::Value();
    }
    if(getOntheflyRegister())
    {
        ret["onthefly_register"]=getValueOfOntheflyRegister();
    }
    else
    {
        ret["onthefly_register"]=Json::Value();
    }
    if(getAttrAdmin())
    {
        ret["attr_admin"]=getValueOfAttrAdmin();
    }
    else
    {
        ret["attr_admin"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getTlsMode())
    {
        ret["tls_mode"]=getValueOfTlsMode();
    }
    else
    {
        ret["tls_mode"]=Json::Value();
    }
    return ret;
}

Json::Value AuthSources::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 17)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[1]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[2]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getHost())
            {
                ret[pMasqueradingVector[3]]=getValueOfHost();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPort())
            {
                ret[pMasqueradingVector[4]]=getValueOfPort();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAccount())
            {
                ret[pMasqueradingVector[5]]=getValueOfAccount();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAccountPassword())
            {
                ret[pMasqueradingVector[6]]=getValueOfAccountPassword();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getBaseDn())
            {
                ret[pMasqueradingVector[7]]=getValueOfBaseDn();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getAttrLogin())
            {
                ret[pMasqueradingVector[8]]=getValueOfAttrLogin();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getAttrFirstname())
            {
                ret[pMasqueradingVector[9]]=getValueOfAttrFirstname();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getAttrLastname())
            {
                ret[pMasqueradingVector[10]]=getValueOfAttrLastname();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getAttrMail())
            {
                ret[pMasqueradingVector[11]]=getValueOfAttrMail();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getOntheflyRegister())
            {
                ret[pMasqueradingVector[12]]=getValueOfOntheflyRegister();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getAttrAdmin())
            {
                ret[pMasqueradingVector[13]]=getValueOfAttrAdmin();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[14]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[15]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getTlsMode())
            {
                ret[pMasqueradingVector[16]]=getValueOfTlsMode();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getHost())
    {
        ret["host"]=getValueOfHost();
    }
    else
    {
        ret["host"]=Json::Value();
    }
    if(getPort())
    {
        ret["port"]=getValueOfPort();
    }
    else
    {
        ret["port"]=Json::Value();
    }
    if(getAccount())
    {
        ret["account"]=getValueOfAccount();
    }
    else
    {
        ret["account"]=Json::Value();
    }
    if(getAccountPassword())
    {
        ret["account_password"]=getValueOfAccountPassword();
    }
    else
    {
        ret["account_password"]=Json::Value();
    }
    if(getBaseDn())
    {
        ret["base_dn"]=getValueOfBaseDn();
    }
    else
    {
        ret["base_dn"]=Json::Value();
    }
    if(getAttrLogin())
    {
        ret["attr_login"]=getValueOfAttrLogin();
    }
    else
    {
        ret["attr_login"]=Json::Value();
    }
    if(getAttrFirstname())
    {
        ret["attr_firstname"]=getValueOfAttrFirstname();
    }
    else
    {
        ret["attr_firstname"]=Json::Value();
    }
    if(getAttrLastname())
    {
        ret["attr_lastname"]=getValueOfAttrLastname();
    }
    else
    {
        ret["attr_lastname"]=Json::Value();
    }
    if(getAttrMail())
    {
        ret["attr_mail"]=getValueOfAttrMail();
    }
    else
    {
        ret["attr_mail"]=Json::Value();
    }
    if(getOntheflyRegister())
    {
        ret["onthefly_register"]=getValueOfOntheflyRegister();
    }
    else
    {
        ret["onthefly_register"]=Json::Value();
    }
    if(getAttrAdmin())
    {
        ret["attr_admin"]=getValueOfAttrAdmin();
    }
    else
    {
        ret["attr_admin"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getTlsMode())
    {
        ret["tls_mode"]=getValueOfTlsMode();
    }
    else
    {
        ret["tls_mode"]=Json::Value();
    }
    return ret;
}

bool AuthSources::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(2, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("host"))
    {
        if(!validJsonOfField(3, "host", pJson["host"], err, true))
            return false;
    }
    if(pJson.isMember("port"))
    {
        if(!validJsonOfField(4, "port", pJson["port"], err, true))
            return false;
    }
    if(pJson.isMember("account"))
    {
        if(!validJsonOfField(5, "account", pJson["account"], err, true))
            return false;
    }
    if(pJson.isMember("account_password"))
    {
        if(!validJsonOfField(6, "account_password", pJson["account_password"], err, true))
            return false;
    }
    if(pJson.isMember("base_dn"))
    {
        if(!validJsonOfField(7, "base_dn", pJson["base_dn"], err, true))
            return false;
    }
    if(pJson.isMember("attr_login"))
    {
        if(!validJsonOfField(8, "attr_login", pJson["attr_login"], err, true))
            return false;
    }
    if(pJson.isMember("attr_firstname"))
    {
        if(!validJsonOfField(9, "attr_firstname", pJson["attr_firstname"], err, true))
            return false;
    }
    if(pJson.isMember("attr_lastname"))
    {
        if(!validJsonOfField(10, "attr_lastname", pJson["attr_lastname"], err, true))
            return false;
    }
    if(pJson.isMember("attr_mail"))
    {
        if(!validJsonOfField(11, "attr_mail", pJson["attr_mail"], err, true))
            return false;
    }
    if(pJson.isMember("onthefly_register"))
    {
        if(!validJsonOfField(12, "onthefly_register", pJson["onthefly_register"], err, true))
            return false;
    }
    if(pJson.isMember("attr_admin"))
    {
        if(!validJsonOfField(13, "attr_admin", pJson["attr_admin"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(14, "created_at", pJson["created_at"], err, true))
            return false;
    }
    else
    {
        err="The created_at column cannot be null";
        return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(15, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    else
    {
        err="The updated_at column cannot be null";
        return false;
    }
    if(pJson.isMember("tls_mode"))
    {
        if(!validJsonOfField(16, "tls_mode", pJson["tls_mode"], err, true))
            return false;
    }
    return true;
}
bool AuthSources::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[14] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[15] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
    }
    return true;
}
bool AuthSources::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(2, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("host"))
    {
        if(!validJsonOfField(3, "host", pJson["host"], err, false))
            return false;
    }
    if(pJson.isMember("port"))
    {
        if(!validJsonOfField(4, "port", pJson["port"], err, false))
            return false;
    }
    if(pJson.isMember("account"))
    {
        if(!validJsonOfField(5, "account", pJson["account"], err, false))
            return false;
    }
    if(pJson.isMember("account_password"))
    {
        if(!validJsonOfField(6, "account_password", pJson["account_password"], err, false))
            return false;
    }
    if(pJson.isMember("base_dn"))
    {
        if(!validJsonOfField(7, "base_dn", pJson["base_dn"], err, false))
            return false;
    }
    if(pJson.isMember("attr_login"))
    {
        if(!validJsonOfField(8, "attr_login", pJson["attr_login"], err, false))
            return false;
    }
    if(pJson.isMember("attr_firstname"))
    {
        if(!validJsonOfField(9, "attr_firstname", pJson["attr_firstname"], err, false))
            return false;
    }
    if(pJson.isMember("attr_lastname"))
    {
        if(!validJsonOfField(10, "attr_lastname", pJson["attr_lastname"], err, false))
            return false;
    }
    if(pJson.isMember("attr_mail"))
    {
        if(!validJsonOfField(11, "attr_mail", pJson["attr_mail"], err, false))
            return false;
    }
    if(pJson.isMember("onthefly_register"))
    {
        if(!validJsonOfField(12, "onthefly_register", pJson["onthefly_register"], err, false))
            return false;
    }
    if(pJson.isMember("attr_admin"))
    {
        if(!validJsonOfField(13, "attr_admin", pJson["attr_admin"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(14, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(15, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    if(pJson.isMember("tls_mode"))
    {
        if(!validJsonOfField(16, "tls_mode", pJson["tls_mode"], err, false))
            return false;
    }
    return true;
}
bool AuthSources::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    return true;
}
bool AuthSources::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson, 
                                   std::string &err, 
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 30 )";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 60 )";
                return false;               
            }

            break;
        case 3:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 60 )";
                return false;               
            }

            break;
        case 4:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 5:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 6:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 7:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 8:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 30 )";
                return false;               
            }

            break;
        case 9:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 30 )";
                return false;               
            }

            break;
        case 10:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 30 )";
                return false;               
            }

            break;
        case 11:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 30 )";
                return false;               
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 13:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
