/**
 *
 *  WikiContents.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "WikiContents.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string WikiContents::Cols::_id = "id";
const std::string WikiContents::Cols::_page_id = "page_id";
const std::string WikiContents::Cols::_author_id = "author_id";
const std::string WikiContents::Cols::_text = "text";
const std::string WikiContents::Cols::_updated_on = "updated_on";
const std::string WikiContents::Cols::_lock_version = "lock_version";
const std::string WikiContents::primaryKeyName = "id";
const bool WikiContents::hasPrimaryKey = true;
const std::string WikiContents::tableName = "wiki_contents";

const std::vector<typename WikiContents::MetaData> WikiContents::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"page_id","int32_t","integer",4,0,0,1},
{"author_id","int32_t","integer",4,0,0,0},
{"text","std::string","text",0,0,0,0},
{"updated_on","::trantor::Date","timestamp without time zone",0,0,0,1},
{"lock_version","int32_t","integer",4,0,0,1}
};
const std::string &WikiContents::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
WikiContents::WikiContents(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["page_id"].isNull())
        {
            _pageId=std::make_shared<int32_t>(r["page_id"].as<int32_t>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["text"].isNull())
        {
            _text=std::make_shared<std::string>(r["text"].as<std::string>());
        }
        if(!r["updated_on"].isNull())
        {
            auto timeStr = r["updated_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["lock_version"].isNull())
        {
            _lockVersion=std::make_shared<int32_t>(r["lock_version"].as<int32_t>());
        }
}
const int32_t &WikiContents::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WikiContents::getId() const noexcept
{
    return _id;
}
const typename WikiContents::PrimaryKeyType & WikiContents::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &WikiContents::getValueOfPageId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_pageId)
        return *_pageId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WikiContents::getPageId() const noexcept
{
    return _pageId;
}
void WikiContents::setPageId(const int32_t &pPageId) noexcept
{
    _pageId = std::make_shared<int32_t>(pPageId);
    _dirtyFlag[1] = true;
}


const int32_t &WikiContents::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WikiContents::getAuthorId() const noexcept
{
    return _authorId;
}
void WikiContents::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[2] = true;
}


const std::string &WikiContents::getValueOfText() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_text)
        return *_text;
    return defaultValue;
}
const std::shared_ptr<std::string> &WikiContents::getText() const noexcept
{
    return _text;
}
void WikiContents::setText(const std::string &pText) noexcept
{
    _text = std::make_shared<std::string>(pText);
    _dirtyFlag[3] = true;
}
void WikiContents::setText(std::string &&pText) noexcept
{
    _text = std::make_shared<std::string>(std::move(pText));
    _dirtyFlag[3] = true;
}


const ::trantor::Date &WikiContents::getValueOfUpdatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedOn)
        return *_updatedOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WikiContents::getUpdatedOn() const noexcept
{
    return _updatedOn;
}
void WikiContents::setUpdatedOn(const ::trantor::Date &pUpdatedOn) noexcept
{
    _updatedOn = std::make_shared<::trantor::Date>(pUpdatedOn);
    _dirtyFlag[4] = true;
}


const int32_t &WikiContents::getValueOfLockVersion() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_lockVersion)
        return *_lockVersion;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WikiContents::getLockVersion() const noexcept
{
    return _lockVersion;
}
void WikiContents::setLockVersion(const int32_t &pLockVersion) noexcept
{
    _lockVersion = std::make_shared<int32_t>(pLockVersion);
    _dirtyFlag[5] = true;
}


void WikiContents::updateId(const uint64_t id)
{
}

const std::vector<std::string> &WikiContents::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "page_id",
        "author_id",
        "text",
        "updated_on",
        "lock_version"
    };
    return _inCols;
}

void WikiContents::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getPageId())
    {
        binder << getValueOfPageId();
    }
    else
    {
        binder << nullptr;
    }
    if(getAuthorId())
    {
        binder << getValueOfAuthorId();
    }
    else
    {
        binder << nullptr;
    }
    if(getText())
    {
        binder << getValueOfText();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedOn())
    {
        binder << getValueOfUpdatedOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getLockVersion())
    {
        binder << getValueOfLockVersion();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> WikiContents::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void WikiContents::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getPageId())
        {
            binder << getValueOfPageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getText())
        {
            binder << getValueOfText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getUpdatedOn())
        {
            binder << getValueOfUpdatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getLockVersion())
        {
            binder << getValueOfLockVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value WikiContents::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPageId())
    {
        ret["page_id"]=getValueOfPageId();
    }
    else
    {
        ret["page_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getUpdatedOn())
    {
        ret["updated_on"]=getUpdatedOn()->toDbStringLocal();
    }
    else
    {
        ret["updated_on"]=Json::Value();
    }
    if(getLockVersion())
    {
        ret["lock_version"]=getValueOfLockVersion();
    }
    else
    {
        ret["lock_version"]=Json::Value();
    }
    return ret;
}
