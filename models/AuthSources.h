/**
 *
 *  AuthSources.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject4 
{
class AuthSources
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _type;
        static const std::string _name;
        static const std::string _host;
        static const std::string _port;
        static const std::string _account;
        static const std::string _account_password;
        static const std::string _base_dn;
        static const std::string _attr_login;
        static const std::string _attr_firstname;
        static const std::string _attr_lastname;
        static const std::string _attr_mail;
        static const std::string _onthefly_register;
        static const std::string _attr_admin;
        static const std::string _created_at;
        static const std::string _updated_at;
        static const std::string _tls_mode;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int32_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;
    explicit AuthSources(const Row &r) noexcept;
    AuthSources() = default;
    
    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;

    /**  For column type  */
    ///Get the value of the column type, returns the default value if the column is null
    const std::string &getValueOfType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getType() const noexcept;
    ///Set the value of the column type
    void setType(const std::string &pType) noexcept;
    void setType(std::string &&pType) noexcept;

    /**  For column name  */
    ///Get the value of the column name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;
    ///Set the value of the column name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;

    /**  For column host  */
    ///Get the value of the column host, returns the default value if the column is null
    const std::string &getValueOfHost() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getHost() const noexcept;
    ///Set the value of the column host
    void setHost(const std::string &pHost) noexcept;
    void setHost(std::string &&pHost) noexcept;

    /**  For column port  */
    ///Get the value of the column port, returns the default value if the column is null
    const int32_t &getValueOfPort() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getPort() const noexcept;
    ///Set the value of the column port
    void setPort(const int32_t &pPort) noexcept;

    /**  For column account  */
    ///Get the value of the column account, returns the default value if the column is null
    const std::string &getValueOfAccount() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAccount() const noexcept;
    ///Set the value of the column account
    void setAccount(const std::string &pAccount) noexcept;
    void setAccount(std::string &&pAccount) noexcept;

    /**  For column account_password  */
    ///Get the value of the column account_password, returns the default value if the column is null
    const std::string &getValueOfAccountPassword() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAccountPassword() const noexcept;
    ///Set the value of the column account_password
    void setAccountPassword(const std::string &pAccountPassword) noexcept;
    void setAccountPassword(std::string &&pAccountPassword) noexcept;

    /**  For column base_dn  */
    ///Get the value of the column base_dn, returns the default value if the column is null
    const std::string &getValueOfBaseDn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBaseDn() const noexcept;
    ///Set the value of the column base_dn
    void setBaseDn(const std::string &pBaseDn) noexcept;
    void setBaseDn(std::string &&pBaseDn) noexcept;

    /**  For column attr_login  */
    ///Get the value of the column attr_login, returns the default value if the column is null
    const std::string &getValueOfAttrLogin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAttrLogin() const noexcept;
    ///Set the value of the column attr_login
    void setAttrLogin(const std::string &pAttrLogin) noexcept;
    void setAttrLogin(std::string &&pAttrLogin) noexcept;

    /**  For column attr_firstname  */
    ///Get the value of the column attr_firstname, returns the default value if the column is null
    const std::string &getValueOfAttrFirstname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAttrFirstname() const noexcept;
    ///Set the value of the column attr_firstname
    void setAttrFirstname(const std::string &pAttrFirstname) noexcept;
    void setAttrFirstname(std::string &&pAttrFirstname) noexcept;

    /**  For column attr_lastname  */
    ///Get the value of the column attr_lastname, returns the default value if the column is null
    const std::string &getValueOfAttrLastname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAttrLastname() const noexcept;
    ///Set the value of the column attr_lastname
    void setAttrLastname(const std::string &pAttrLastname) noexcept;
    void setAttrLastname(std::string &&pAttrLastname) noexcept;

    /**  For column attr_mail  */
    ///Get the value of the column attr_mail, returns the default value if the column is null
    const std::string &getValueOfAttrMail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAttrMail() const noexcept;
    ///Set the value of the column attr_mail
    void setAttrMail(const std::string &pAttrMail) noexcept;
    void setAttrMail(std::string &&pAttrMail) noexcept;

    /**  For column onthefly_register  */
    ///Get the value of the column onthefly_register, returns the default value if the column is null
    const bool &getValueOfOntheflyRegister() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getOntheflyRegister() const noexcept;
    ///Set the value of the column onthefly_register
    void setOntheflyRegister(const bool &pOntheflyRegister) noexcept;

    /**  For column attr_admin  */
    ///Get the value of the column attr_admin, returns the default value if the column is null
    const std::string &getValueOfAttrAdmin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAttrAdmin() const noexcept;
    ///Set the value of the column attr_admin
    void setAttrAdmin(const std::string &pAttrAdmin) noexcept;
    void setAttrAdmin(std::string &&pAttrAdmin) noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;

    /**  For column tls_mode  */
    ///Get the value of the column tls_mode, returns the default value if the column is null
    const int32_t &getValueOfTlsMode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getTlsMode() const noexcept;
    ///Set the value of the column tls_mode
    void setTlsMode(const int32_t &pTlsMode) noexcept;


    static size_t getColumnNumber() noexcept {  return 17;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;

  private:
    friend Mapper<AuthSources>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> _id;
    std::shared_ptr<std::string> _type;
    std::shared_ptr<std::string> _name;
    std::shared_ptr<std::string> _host;
    std::shared_ptr<int32_t> _port;
    std::shared_ptr<std::string> _account;
    std::shared_ptr<std::string> _accountPassword;
    std::shared_ptr<std::string> _baseDn;
    std::shared_ptr<std::string> _attrLogin;
    std::shared_ptr<std::string> _attrFirstname;
    std::shared_ptr<std::string> _attrLastname;
    std::shared_ptr<std::string> _attrMail;
    std::shared_ptr<bool> _ontheflyRegister;
    std::shared_ptr<std::string> _attrAdmin;
    std::shared_ptr<::trantor::Date> _createdAt;
    std::shared_ptr<::trantor::Date> _updatedAt;
    std::shared_ptr<int32_t> _tlsMode;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[17]={ false };
};
} // namespace openproject4
} // namespace drogon_model
