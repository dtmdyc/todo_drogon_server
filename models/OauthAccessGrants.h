/**
 *
 *  OauthAccessGrants.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject6 
{
class OauthAccessGrants
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _resource_owner_id;
        static const std::string _application_id;
        static const std::string _token;
        static const std::string _expires_in;
        static const std::string _redirect_uri;
        static const std::string _created_at;
        static const std::string _revoked_at;
        static const std::string _scopes;
        static const std::string _code_challenge;
        static const std::string _code_challenge_method;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int64_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit OauthAccessGrants(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit OauthAccessGrants(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    OauthAccessGrants(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    OauthAccessGrants() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    bool validateMasqueradedJsonForCreation(const Json::Value &,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err);
    bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getId() const noexcept;

    /**  For column resource_owner_id  */
    ///Get the value of the column resource_owner_id, returns the default value if the column is null
    const int64_t &getValueOfResourceOwnerId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getResourceOwnerId() const noexcept;
    ///Set the value of the column resource_owner_id
    void setResourceOwnerId(const int64_t &pResourceOwnerId) noexcept;

    /**  For column application_id  */
    ///Get the value of the column application_id, returns the default value if the column is null
    const int64_t &getValueOfApplicationId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getApplicationId() const noexcept;
    ///Set the value of the column application_id
    void setApplicationId(const int64_t &pApplicationId) noexcept;

    /**  For column token  */
    ///Get the value of the column token, returns the default value if the column is null
    const std::string &getValueOfToken() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getToken() const noexcept;
    ///Set the value of the column token
    void setToken(const std::string &pToken) noexcept;
    void setToken(std::string &&pToken) noexcept;

    /**  For column expires_in  */
    ///Get the value of the column expires_in, returns the default value if the column is null
    const int32_t &getValueOfExpiresIn() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getExpiresIn() const noexcept;
    ///Set the value of the column expires_in
    void setExpiresIn(const int32_t &pExpiresIn) noexcept;

    /**  For column redirect_uri  */
    ///Get the value of the column redirect_uri, returns the default value if the column is null
    const std::string &getValueOfRedirectUri() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRedirectUri() const noexcept;
    ///Set the value of the column redirect_uri
    void setRedirectUri(const std::string &pRedirectUri) noexcept;
    void setRedirectUri(std::string &&pRedirectUri) noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;

    /**  For column revoked_at  */
    ///Get the value of the column revoked_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfRevokedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getRevokedAt() const noexcept;
    ///Set the value of the column revoked_at
    void setRevokedAt(const ::trantor::Date &pRevokedAt) noexcept;

    /**  For column scopes  */
    ///Get the value of the column scopes, returns the default value if the column is null
    const std::string &getValueOfScopes() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getScopes() const noexcept;
    ///Set the value of the column scopes
    void setScopes(const std::string &pScopes) noexcept;
    void setScopes(std::string &&pScopes) noexcept;

    /**  For column code_challenge  */
    ///Get the value of the column code_challenge, returns the default value if the column is null
    const std::string &getValueOfCodeChallenge() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCodeChallenge() const noexcept;
    ///Set the value of the column code_challenge
    void setCodeChallenge(const std::string &pCodeChallenge) noexcept;
    void setCodeChallenge(std::string &&pCodeChallenge) noexcept;

    /**  For column code_challenge_method  */
    ///Get the value of the column code_challenge_method, returns the default value if the column is null
    const std::string &getValueOfCodeChallengeMethod() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCodeChallengeMethod() const noexcept;
    ///Set the value of the column code_challenge_method
    void setCodeChallengeMethod(const std::string &pCodeChallengeMethod) noexcept;
    void setCodeChallengeMethod(std::string &&pCodeChallengeMethod) noexcept;


    static size_t getColumnNumber() noexcept {  return 11;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;

  private:
    friend Mapper<OauthAccessGrants>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> _id;
    std::shared_ptr<int64_t> _resourceOwnerId;
    std::shared_ptr<int64_t> _applicationId;
    std::shared_ptr<std::string> _token;
    std::shared_ptr<int32_t> _expiresIn;
    std::shared_ptr<std::string> _redirectUri;
    std::shared_ptr<::trantor::Date> _createdAt;
    std::shared_ptr<::trantor::Date> _revokedAt;
    std::shared_ptr<std::string> _scopes;
    std::shared_ptr<std::string> _codeChallenge;
    std::shared_ptr<std::string> _codeChallengeMethod;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[11]={ false };

  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = $1";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = $1";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(_dirtyFlag[1])
        {
            sql += "resource_owner_id,";
            ++parametersCount;
        }
        if(_dirtyFlag[2])
        {
            sql += "application_id,";
            ++parametersCount;
        }
        if(_dirtyFlag[3])
        {
            sql += "token,";
            ++parametersCount;
        }
        if(_dirtyFlag[4])
        {
            sql += "expires_in,";
            ++parametersCount;
        }
        if(_dirtyFlag[5])
        {
            sql += "redirect_uri,";
            ++parametersCount;
        }
        if(_dirtyFlag[6])
        {
            sql += "created_at,";
            ++parametersCount;
        }
        if(_dirtyFlag[7])
        {
            sql += "revoked_at,";
            ++parametersCount;
        }
        if(_dirtyFlag[8])
        {
            sql += "scopes,";
            ++parametersCount;
        }
        if(_dirtyFlag[9])
        {
            sql += "code_challenge,";
            ++parametersCount;
        }
        if(_dirtyFlag[10])
        {
            sql += "code_challenge_method,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        sql +="default,";
        if(_dirtyFlag[1])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[2])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[3])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[4])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[5])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[6])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[7])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[8])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[9])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(_dirtyFlag[10])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        } 
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace openproject6
} // namespace drogon_model
