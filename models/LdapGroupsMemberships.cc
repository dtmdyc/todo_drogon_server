/**
 *
 *  LdapGroupsMemberships.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "LdapGroupsMemberships.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string LdapGroupsMemberships::Cols::_id = "id";
const std::string LdapGroupsMemberships::Cols::_user_id = "user_id";
const std::string LdapGroupsMemberships::Cols::_group_id = "group_id";
const std::string LdapGroupsMemberships::Cols::_created_at = "created_at";
const std::string LdapGroupsMemberships::Cols::_updated_at = "updated_at";
const std::string LdapGroupsMemberships::primaryKeyName = "id";
const bool LdapGroupsMemberships::hasPrimaryKey = true;
const std::string LdapGroupsMemberships::tableName = "ldap_groups_memberships";

const std::vector<typename LdapGroupsMemberships::MetaData> LdapGroupsMemberships::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"user_id","int32_t","integer",4,0,0,0},
{"group_id","int32_t","integer",4,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &LdapGroupsMemberships::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
LdapGroupsMemberships::LdapGroupsMemberships(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["group_id"].isNull())
        {
            _groupId=std::make_shared<int32_t>(r["group_id"].as<int32_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int32_t &LdapGroupsMemberships::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &LdapGroupsMemberships::getId() const noexcept
{
    return _id;
}
const typename LdapGroupsMemberships::PrimaryKeyType & LdapGroupsMemberships::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &LdapGroupsMemberships::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &LdapGroupsMemberships::getUserId() const noexcept
{
    return _userId;
}
void LdapGroupsMemberships::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[1] = true;
}


const int32_t &LdapGroupsMemberships::getValueOfGroupId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_groupId)
        return *_groupId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &LdapGroupsMemberships::getGroupId() const noexcept
{
    return _groupId;
}
void LdapGroupsMemberships::setGroupId(const int32_t &pGroupId) noexcept
{
    _groupId = std::make_shared<int32_t>(pGroupId);
    _dirtyFlag[2] = true;
}


const ::trantor::Date &LdapGroupsMemberships::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &LdapGroupsMemberships::getCreatedAt() const noexcept
{
    return _createdAt;
}
void LdapGroupsMemberships::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[3] = true;
}


const ::trantor::Date &LdapGroupsMemberships::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &LdapGroupsMemberships::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void LdapGroupsMemberships::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[4] = true;
}


void LdapGroupsMemberships::updateId(const uint64_t id)
{
}

const std::vector<std::string> &LdapGroupsMemberships::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "user_id",
        "group_id",
        "created_at",
        "updated_at"
    };
    return _inCols;
}

void LdapGroupsMemberships::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
    if(getGroupId())
    {
        binder << getValueOfGroupId();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> LdapGroupsMemberships::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void LdapGroupsMemberships::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getGroupId())
        {
            binder << getValueOfGroupId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value LdapGroupsMemberships::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getGroupId())
    {
        ret["group_id"]=getValueOfGroupId();
    }
    else
    {
        ret["group_id"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}
