/**
 *
 *  UserPasswords.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "UserPasswords.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string UserPasswords::Cols::_id = "id";
const std::string UserPasswords::Cols::_user_id = "user_id";
const std::string UserPasswords::Cols::_hashed_password = "hashed_password";
const std::string UserPasswords::Cols::_salt = "salt";
const std::string UserPasswords::Cols::_created_at = "created_at";
const std::string UserPasswords::Cols::_updated_at = "updated_at";
const std::string UserPasswords::Cols::_type = "type";
const std::string UserPasswords::primaryKeyName = "id";
const bool UserPasswords::hasPrimaryKey = true;
const std::string UserPasswords::tableName = "user_passwords";

const std::vector<typename UserPasswords::MetaData> UserPasswords::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"user_id","int32_t","integer",4,0,0,1},
{"hashed_password","std::string","character varying",128,0,0,1},
{"salt","std::string","character varying",64,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"type","std::string","character varying",0,0,0,1}
};
const std::string &UserPasswords::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
UserPasswords::UserPasswords(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["hashed_password"].isNull())
        {
            _hashedPassword=std::make_shared<std::string>(r["hashed_password"].as<std::string>());
        }
        if(!r["salt"].isNull())
        {
            _salt=std::make_shared<std::string>(r["salt"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
}
const int32_t &UserPasswords::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserPasswords::getId() const noexcept
{
    return _id;
}
const typename UserPasswords::PrimaryKeyType & UserPasswords::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &UserPasswords::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserPasswords::getUserId() const noexcept
{
    return _userId;
}
void UserPasswords::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[1] = true;
}


const std::string &UserPasswords::getValueOfHashedPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_hashedPassword)
        return *_hashedPassword;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserPasswords::getHashedPassword() const noexcept
{
    return _hashedPassword;
}
void UserPasswords::setHashedPassword(const std::string &pHashedPassword) noexcept
{
    _hashedPassword = std::make_shared<std::string>(pHashedPassword);
    _dirtyFlag[2] = true;
}
void UserPasswords::setHashedPassword(std::string &&pHashedPassword) noexcept
{
    _hashedPassword = std::make_shared<std::string>(std::move(pHashedPassword));
    _dirtyFlag[2] = true;
}


const std::string &UserPasswords::getValueOfSalt() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_salt)
        return *_salt;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserPasswords::getSalt() const noexcept
{
    return _salt;
}
void UserPasswords::setSalt(const std::string &pSalt) noexcept
{
    _salt = std::make_shared<std::string>(pSalt);
    _dirtyFlag[3] = true;
}
void UserPasswords::setSalt(std::string &&pSalt) noexcept
{
    _salt = std::make_shared<std::string>(std::move(pSalt));
    _dirtyFlag[3] = true;
}


const ::trantor::Date &UserPasswords::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &UserPasswords::getCreatedAt() const noexcept
{
    return _createdAt;
}
void UserPasswords::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[4] = true;
}


const ::trantor::Date &UserPasswords::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &UserPasswords::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void UserPasswords::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[5] = true;
}


const std::string &UserPasswords::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserPasswords::getType() const noexcept
{
    return _type;
}
void UserPasswords::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[6] = true;
}
void UserPasswords::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[6] = true;
}


void UserPasswords::updateId(const uint64_t id)
{
}

const std::vector<std::string> &UserPasswords::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "user_id",
        "hashed_password",
        "salt",
        "created_at",
        "updated_at",
        "type"
    };
    return _inCols;
}

void UserPasswords::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
    if(getHashedPassword())
    {
        binder << getValueOfHashedPassword();
    }
    else
    {
        binder << nullptr;
    }
    if(getSalt())
    {
        binder << getValueOfSalt();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getType())
    {
        binder << getValueOfType();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> UserPasswords::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void UserPasswords::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getHashedPassword())
        {
            binder << getValueOfHashedPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getSalt())
        {
            binder << getValueOfSalt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value UserPasswords::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getHashedPassword())
    {
        ret["hashed_password"]=getValueOfHashedPassword();
    }
    else
    {
        ret["hashed_password"]=Json::Value();
    }
    if(getSalt())
    {
        ret["salt"]=getValueOfSalt();
    }
    else
    {
        ret["salt"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    return ret;
}
