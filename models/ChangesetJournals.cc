/**
 *
 *  ChangesetJournals.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ChangesetJournals.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject6;

const std::string ChangesetJournals::Cols::_id = "id";
const std::string ChangesetJournals::Cols::_journal_id = "journal_id";
const std::string ChangesetJournals::Cols::_repository_id = "repository_id";
const std::string ChangesetJournals::Cols::_revision = "revision";
const std::string ChangesetJournals::Cols::_committer = "committer";
const std::string ChangesetJournals::Cols::_committed_on = "committed_on";
const std::string ChangesetJournals::Cols::_comments = "comments";
const std::string ChangesetJournals::Cols::_commit_date = "commit_date";
const std::string ChangesetJournals::Cols::_scmid = "scmid";
const std::string ChangesetJournals::Cols::_user_id = "user_id";
const std::string ChangesetJournals::primaryKeyName = "id";
const bool ChangesetJournals::hasPrimaryKey = true;
const std::string ChangesetJournals::tableName = "changeset_journals";

const std::vector<typename ChangesetJournals::MetaData> ChangesetJournals::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"journal_id","int32_t","integer",4,0,0,1},
{"repository_id","int32_t","integer",4,0,0,1},
{"revision","std::string","character varying",0,0,0,1},
{"committer","std::string","character varying",0,0,0,0},
{"committed_on","::trantor::Date","timestamp without time zone",0,0,0,1},
{"comments","std::string","text",0,0,0,0},
{"commit_date","::trantor::Date","date",0,0,0,0},
{"scmid","std::string","character varying",0,0,0,0},
{"user_id","int32_t","integer",4,0,0,0}
};
const std::string &ChangesetJournals::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
ChangesetJournals::ChangesetJournals(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>(r["journal_id"].as<int32_t>());
        }
        if(!r["repository_id"].isNull())
        {
            _repositoryId=std::make_shared<int32_t>(r["repository_id"].as<int32_t>());
        }
        if(!r["revision"].isNull())
        {
            _revision=std::make_shared<std::string>(r["revision"].as<std::string>());
        }
        if(!r["committer"].isNull())
        {
            _committer=std::make_shared<std::string>(r["committer"].as<std::string>());
        }
        if(!r["committed_on"].isNull())
        {
            auto timeStr = r["committed_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _committedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["comments"].isNull())
        {
            _comments=std::make_shared<std::string>(r["comments"].as<std::string>());
        }
        if(!r["commit_date"].isNull())
        {
            auto daysStr = r["commit_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _commitDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["scmid"].isNull())
        {
            _scmid=std::make_shared<std::string>(r["scmid"].as<std::string>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 10 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _journalId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _repositoryId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _revision=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _committer=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _committedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            _comments=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _commitDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            _scmid=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            _userId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

ChangesetJournals::ChangesetJournals(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 10)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _journalId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _repositoryId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _revision=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _committer=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        auto timeStr = pJson[pMasqueradingVector[5]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _committedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _comments=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        auto daysStr = pJson[pMasqueradingVector[7]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
        long t = timelocal(&stm);
        _commitDate=std::make_shared<::trantor::Date>(t*1000000);
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _scmid=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _userId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
    }
}

ChangesetJournals::ChangesetJournals(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("journal_id"))
    {
        _journalId=std::make_shared<int32_t>((int32_t)pJson["journal_id"].asInt64());
    }
    if(pJson.isMember("repository_id"))
    {
        _repositoryId=std::make_shared<int32_t>((int32_t)pJson["repository_id"].asInt64());
    }
    if(pJson.isMember("revision"))
    {
        _revision=std::make_shared<std::string>(pJson["revision"].asString());
    }
    if(pJson.isMember("committer"))
    {
        _committer=std::make_shared<std::string>(pJson["committer"].asString());
    }
    if(pJson.isMember("committed_on"))
    {
        auto timeStr = pJson["committed_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _committedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("comments"))
    {
        _comments=std::make_shared<std::string>(pJson["comments"].asString());
    }
    if(pJson.isMember("commit_date"))
    {
        auto daysStr = pJson["commit_date"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
        long t = timelocal(&stm);
        _commitDate=std::make_shared<::trantor::Date>(t*1000000);
    }
    if(pJson.isMember("scmid"))
    {
        _scmid=std::make_shared<std::string>(pJson["scmid"].asString());
    }
    if(pJson.isMember("user_id"))
    {
        _userId=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
    }
}

void ChangesetJournals::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 10)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        _journalId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        _repositoryId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        _revision=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        _committer=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        auto timeStr = pJson[pMasqueradingVector[5]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _committedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        _comments=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        auto daysStr = pJson[pMasqueradingVector[7]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
        long t = timelocal(&stm);
        _commitDate=std::make_shared<::trantor::Date>(t*1000000);
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        _scmid=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        _dirtyFlag[9] = true;
        _userId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
    }
}
                                                                    
void ChangesetJournals::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("journal_id"))
    {
        _dirtyFlag[1] = true;
        _journalId=std::make_shared<int32_t>((int32_t)pJson["journal_id"].asInt64());
    }
    if(pJson.isMember("repository_id"))
    {
        _dirtyFlag[2] = true;
        _repositoryId=std::make_shared<int32_t>((int32_t)pJson["repository_id"].asInt64());
    }
    if(pJson.isMember("revision"))
    {
        _dirtyFlag[3] = true;
        _revision=std::make_shared<std::string>(pJson["revision"].asString());
    }
    if(pJson.isMember("committer"))
    {
        _dirtyFlag[4] = true;
        _committer=std::make_shared<std::string>(pJson["committer"].asString());
    }
    if(pJson.isMember("committed_on"))
    {
        _dirtyFlag[5] = true;
        auto timeStr = pJson["committed_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _committedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("comments"))
    {
        _dirtyFlag[6] = true;
        _comments=std::make_shared<std::string>(pJson["comments"].asString());
    }
    if(pJson.isMember("commit_date"))
    {
        _dirtyFlag[7] = true;
        auto daysStr = pJson["commit_date"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
        long t = timelocal(&stm);
        _commitDate=std::make_shared<::trantor::Date>(t*1000000);
    }
    if(pJson.isMember("scmid"))
    {
        _dirtyFlag[8] = true;
        _scmid=std::make_shared<std::string>(pJson["scmid"].asString());
    }
    if(pJson.isMember("user_id"))
    {
        _dirtyFlag[9] = true;
        _userId=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
    }
}

const int32_t &ChangesetJournals::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ChangesetJournals::getId() const noexcept
{
    return _id;
}
const typename ChangesetJournals::PrimaryKeyType & ChangesetJournals::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &ChangesetJournals::getValueOfJournalId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journalId)
        return *_journalId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ChangesetJournals::getJournalId() const noexcept
{
    return _journalId;
}
void ChangesetJournals::setJournalId(const int32_t &pJournalId) noexcept
{
    _journalId = std::make_shared<int32_t>(pJournalId);
    _dirtyFlag[1] = true;
}


const int32_t &ChangesetJournals::getValueOfRepositoryId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_repositoryId)
        return *_repositoryId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ChangesetJournals::getRepositoryId() const noexcept
{
    return _repositoryId;
}
void ChangesetJournals::setRepositoryId(const int32_t &pRepositoryId) noexcept
{
    _repositoryId = std::make_shared<int32_t>(pRepositoryId);
    _dirtyFlag[2] = true;
}


const std::string &ChangesetJournals::getValueOfRevision() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_revision)
        return *_revision;
    return defaultValue;
}
const std::shared_ptr<std::string> &ChangesetJournals::getRevision() const noexcept
{
    return _revision;
}
void ChangesetJournals::setRevision(const std::string &pRevision) noexcept
{
    _revision = std::make_shared<std::string>(pRevision);
    _dirtyFlag[3] = true;
}
void ChangesetJournals::setRevision(std::string &&pRevision) noexcept
{
    _revision = std::make_shared<std::string>(std::move(pRevision));
    _dirtyFlag[3] = true;
}


const std::string &ChangesetJournals::getValueOfCommitter() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_committer)
        return *_committer;
    return defaultValue;
}
const std::shared_ptr<std::string> &ChangesetJournals::getCommitter() const noexcept
{
    return _committer;
}
void ChangesetJournals::setCommitter(const std::string &pCommitter) noexcept
{
    _committer = std::make_shared<std::string>(pCommitter);
    _dirtyFlag[4] = true;
}
void ChangesetJournals::setCommitter(std::string &&pCommitter) noexcept
{
    _committer = std::make_shared<std::string>(std::move(pCommitter));
    _dirtyFlag[4] = true;
}


const ::trantor::Date &ChangesetJournals::getValueOfCommittedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_committedOn)
        return *_committedOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ChangesetJournals::getCommittedOn() const noexcept
{
    return _committedOn;
}
void ChangesetJournals::setCommittedOn(const ::trantor::Date &pCommittedOn) noexcept
{
    _committedOn = std::make_shared<::trantor::Date>(pCommittedOn);
    _dirtyFlag[5] = true;
}


const std::string &ChangesetJournals::getValueOfComments() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_comments)
        return *_comments;
    return defaultValue;
}
const std::shared_ptr<std::string> &ChangesetJournals::getComments() const noexcept
{
    return _comments;
}
void ChangesetJournals::setComments(const std::string &pComments) noexcept
{
    _comments = std::make_shared<std::string>(pComments);
    _dirtyFlag[6] = true;
}
void ChangesetJournals::setComments(std::string &&pComments) noexcept
{
    _comments = std::make_shared<std::string>(std::move(pComments));
    _dirtyFlag[6] = true;
}


const ::trantor::Date &ChangesetJournals::getValueOfCommitDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_commitDate)
        return *_commitDate;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ChangesetJournals::getCommitDate() const noexcept
{
    return _commitDate;
}
void ChangesetJournals::setCommitDate(const ::trantor::Date &pCommitDate) noexcept
{
    _commitDate = std::make_shared<::trantor::Date>(pCommitDate.roundDay());
    _dirtyFlag[7] = true;
}


const std::string &ChangesetJournals::getValueOfScmid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_scmid)
        return *_scmid;
    return defaultValue;
}
const std::shared_ptr<std::string> &ChangesetJournals::getScmid() const noexcept
{
    return _scmid;
}
void ChangesetJournals::setScmid(const std::string &pScmid) noexcept
{
    _scmid = std::make_shared<std::string>(pScmid);
    _dirtyFlag[8] = true;
}
void ChangesetJournals::setScmid(std::string &&pScmid) noexcept
{
    _scmid = std::make_shared<std::string>(std::move(pScmid));
    _dirtyFlag[8] = true;
}


const int32_t &ChangesetJournals::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ChangesetJournals::getUserId() const noexcept
{
    return _userId;
}
void ChangesetJournals::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[9] = true;
}


void ChangesetJournals::updateId(const uint64_t id)
{
}

const std::vector<std::string> &ChangesetJournals::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journal_id",
        "repository_id",
        "revision",
        "committer",
        "committed_on",
        "comments",
        "commit_date",
        "scmid",
        "user_id"
    };
    return _inCols;
}

void ChangesetJournals::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getJournalId())
    {
        binder << getValueOfJournalId();
    }
    else
    {
        binder << nullptr;
    }
    if(getRepositoryId())
    {
        binder << getValueOfRepositoryId();
    }
    else
    {
        binder << nullptr;
    }
    if(getRevision())
    {
        binder << getValueOfRevision();
    }
    else
    {
        binder << nullptr;
    }
    if(getCommitter())
    {
        binder << getValueOfCommitter();
    }
    else
    {
        binder << nullptr;
    }
    if(getCommittedOn())
    {
        binder << getValueOfCommittedOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getComments())
    {
        binder << getValueOfComments();
    }
    else
    {
        binder << nullptr;
    }
    if(getCommitDate())
    {
        binder << getValueOfCommitDate();
    }
    else
    {
        binder << nullptr;
    }
    if(getScmid())
    {
        binder << getValueOfScmid();
    }
    else
    {
        binder << nullptr;
    }
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> ChangesetJournals::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void ChangesetJournals::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getRepositoryId())
        {
            binder << getValueOfRepositoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getRevision())
        {
            binder << getValueOfRevision();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getCommitter())
        {
            binder << getValueOfCommitter();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getCommittedOn())
        {
            binder << getValueOfCommittedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getComments())
        {
            binder << getValueOfComments();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCommitDate())
        {
            binder << getValueOfCommitDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getScmid())
        {
            binder << getValueOfScmid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ChangesetJournals::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getRepositoryId())
    {
        ret["repository_id"]=getValueOfRepositoryId();
    }
    else
    {
        ret["repository_id"]=Json::Value();
    }
    if(getRevision())
    {
        ret["revision"]=getValueOfRevision();
    }
    else
    {
        ret["revision"]=Json::Value();
    }
    if(getCommitter())
    {
        ret["committer"]=getValueOfCommitter();
    }
    else
    {
        ret["committer"]=Json::Value();
    }
    if(getCommittedOn())
    {
        ret["committed_on"]=getCommittedOn()->toDbStringLocal();
    }
    else
    {
        ret["committed_on"]=Json::Value();
    }
    if(getComments())
    {
        ret["comments"]=getValueOfComments();
    }
    else
    {
        ret["comments"]=Json::Value();
    }
    if(getCommitDate())
    {
        ret["commit_date"]=getCommitDate()->toDbStringLocal();
    }
    else
    {
        ret["commit_date"]=Json::Value();
    }
    if(getScmid())
    {
        ret["scmid"]=getValueOfScmid();
    }
    else
    {
        ret["scmid"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    return ret;
}

Json::Value ChangesetJournals::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 10)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getJournalId())
            {
                ret[pMasqueradingVector[1]]=getValueOfJournalId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getRepositoryId())
            {
                ret[pMasqueradingVector[2]]=getValueOfRepositoryId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRevision())
            {
                ret[pMasqueradingVector[3]]=getValueOfRevision();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCommitter())
            {
                ret[pMasqueradingVector[4]]=getValueOfCommitter();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCommittedOn())
            {
                ret[pMasqueradingVector[5]]=getCommittedOn()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getComments())
            {
                ret[pMasqueradingVector[6]]=getValueOfComments();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCommitDate())
            {
                ret[pMasqueradingVector[7]]=getCommitDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getScmid())
            {
                ret[pMasqueradingVector[8]]=getValueOfScmid();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[9]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getRepositoryId())
    {
        ret["repository_id"]=getValueOfRepositoryId();
    }
    else
    {
        ret["repository_id"]=Json::Value();
    }
    if(getRevision())
    {
        ret["revision"]=getValueOfRevision();
    }
    else
    {
        ret["revision"]=Json::Value();
    }
    if(getCommitter())
    {
        ret["committer"]=getValueOfCommitter();
    }
    else
    {
        ret["committer"]=Json::Value();
    }
    if(getCommittedOn())
    {
        ret["committed_on"]=getCommittedOn()->toDbStringLocal();
    }
    else
    {
        ret["committed_on"]=Json::Value();
    }
    if(getComments())
    {
        ret["comments"]=getValueOfComments();
    }
    else
    {
        ret["comments"]=Json::Value();
    }
    if(getCommitDate())
    {
        ret["commit_date"]=getCommitDate()->toDbStringLocal();
    }
    else
    {
        ret["commit_date"]=Json::Value();
    }
    if(getScmid())
    {
        ret["scmid"]=getValueOfScmid();
    }
    else
    {
        ret["scmid"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    return ret;
}

bool ChangesetJournals::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("journal_id"))
    {
        if(!validJsonOfField(1, "journal_id", pJson["journal_id"], err, true))
            return false;
    }
    else
    {
        err="The journal_id column cannot be null";
        return false;
    }
    if(pJson.isMember("repository_id"))
    {
        if(!validJsonOfField(2, "repository_id", pJson["repository_id"], err, true))
            return false;
    }
    else
    {
        err="The repository_id column cannot be null";
        return false;
    }
    if(pJson.isMember("revision"))
    {
        if(!validJsonOfField(3, "revision", pJson["revision"], err, true))
            return false;
    }
    else
    {
        err="The revision column cannot be null";
        return false;
    }
    if(pJson.isMember("committer"))
    {
        if(!validJsonOfField(4, "committer", pJson["committer"], err, true))
            return false;
    }
    if(pJson.isMember("committed_on"))
    {
        if(!validJsonOfField(5, "committed_on", pJson["committed_on"], err, true))
            return false;
    }
    else
    {
        err="The committed_on column cannot be null";
        return false;
    }
    if(pJson.isMember("comments"))
    {
        if(!validJsonOfField(6, "comments", pJson["comments"], err, true))
            return false;
    }
    if(pJson.isMember("commit_date"))
    {
        if(!validJsonOfField(7, "commit_date", pJson["commit_date"], err, true))
            return false;
    }
    if(pJson.isMember("scmid"))
    {
        if(!validJsonOfField(8, "scmid", pJson["scmid"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(9, "user_id", pJson["user_id"], err, true))
            return false;
    }
    return true;
}
bool ChangesetJournals::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 10)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    return true;
}
bool ChangesetJournals::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("journal_id"))
    {
        if(!validJsonOfField(1, "journal_id", pJson["journal_id"], err, false))
            return false;
    }
    if(pJson.isMember("repository_id"))
    {
        if(!validJsonOfField(2, "repository_id", pJson["repository_id"], err, false))
            return false;
    }
    if(pJson.isMember("revision"))
    {
        if(!validJsonOfField(3, "revision", pJson["revision"], err, false))
            return false;
    }
    if(pJson.isMember("committer"))
    {
        if(!validJsonOfField(4, "committer", pJson["committer"], err, false))
            return false;
    }
    if(pJson.isMember("committed_on"))
    {
        if(!validJsonOfField(5, "committed_on", pJson["committed_on"], err, false))
            return false;
    }
    if(pJson.isMember("comments"))
    {
        if(!validJsonOfField(6, "comments", pJson["comments"], err, false))
            return false;
    }
    if(pJson.isMember("commit_date"))
    {
        if(!validJsonOfField(7, "commit_date", pJson["commit_date"], err, false))
            return false;
    }
    if(pJson.isMember("scmid"))
    {
        if(!validJsonOfField(8, "scmid", pJson["scmid"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(9, "user_id", pJson["user_id"], err, false))
            return false;
    }
    return true;
}
bool ChangesetJournals::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 10)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    return true;
}
bool ChangesetJournals::validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson, 
                                         std::string &err, 
                                         bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 4:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 6:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 7:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 8:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 9:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
