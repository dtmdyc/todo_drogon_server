/**
 *
 *  Settings.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Settings.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Settings::Cols::_id = "id";
const std::string Settings::Cols::_name = "name";
const std::string Settings::Cols::_value = "value";
const std::string Settings::Cols::_updated_on = "updated_on";
const std::string Settings::primaryKeyName = "id";
const bool Settings::hasPrimaryKey = true;
const std::string Settings::tableName = "settings";

const std::vector<typename Settings::MetaData> Settings::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"name","std::string","character varying",0,0,0,1},
{"value","std::string","text",0,0,0,0},
{"updated_on","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &Settings::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Settings::Settings(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["value"].isNull())
        {
            _value=std::make_shared<std::string>(r["value"].as<std::string>());
        }
        if(!r["updated_on"].isNull())
        {
            auto timeStr = r["updated_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int32_t &Settings::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Settings::getId() const noexcept
{
    return _id;
}
const typename Settings::PrimaryKeyType & Settings::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &Settings::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getName() const noexcept
{
    return _name;
}
void Settings::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[1] = true;
}
void Settings::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[1] = true;
}


const std::string &Settings::getValueOfValue() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_value)
        return *_value;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getValue() const noexcept
{
    return _value;
}
void Settings::setValue(const std::string &pValue) noexcept
{
    _value = std::make_shared<std::string>(pValue);
    _dirtyFlag[2] = true;
}
void Settings::setValue(std::string &&pValue) noexcept
{
    _value = std::make_shared<std::string>(std::move(pValue));
    _dirtyFlag[2] = true;
}


const ::trantor::Date &Settings::getValueOfUpdatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedOn)
        return *_updatedOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Settings::getUpdatedOn() const noexcept
{
    return _updatedOn;
}
void Settings::setUpdatedOn(const ::trantor::Date &pUpdatedOn) noexcept
{
    _updatedOn = std::make_shared<::trantor::Date>(pUpdatedOn);
    _dirtyFlag[3] = true;
}


void Settings::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Settings::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "name",
        "value",
        "updated_on"
    };
    return _inCols;
}

void Settings::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getName())
    {
        binder << getValueOfName();
    }
    else
    {
        binder << nullptr;
    }
    if(getValue())
    {
        binder << getValueOfValue();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedOn())
    {
        binder << getValueOfUpdatedOn();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Settings::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Settings::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getValue())
        {
            binder << getValueOfValue();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getUpdatedOn())
        {
            binder << getValueOfUpdatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Settings::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getValue())
    {
        ret["value"]=getValueOfValue();
    }
    else
    {
        ret["value"]=Json::Value();
    }
    if(getUpdatedOn())
    {
        ret["updated_on"]=getUpdatedOn()->toDbStringLocal();
    }
    else
    {
        ret["updated_on"]=Json::Value();
    }
    return ret;
}
