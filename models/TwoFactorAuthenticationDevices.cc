/**
 *
 *  TwoFactorAuthenticationDevices.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TwoFactorAuthenticationDevices.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string TwoFactorAuthenticationDevices::Cols::_id = "id";
const std::string TwoFactorAuthenticationDevices::Cols::_type = "type";
const std::string TwoFactorAuthenticationDevices::Cols::_default = "default";
const std::string TwoFactorAuthenticationDevices::Cols::_active = "active";
const std::string TwoFactorAuthenticationDevices::Cols::_channel = "channel";
const std::string TwoFactorAuthenticationDevices::Cols::_phone_number = "phone_number";
const std::string TwoFactorAuthenticationDevices::Cols::_identifier = "identifier";
const std::string TwoFactorAuthenticationDevices::Cols::_created_at = "created_at";
const std::string TwoFactorAuthenticationDevices::Cols::_updated_at = "updated_at";
const std::string TwoFactorAuthenticationDevices::Cols::_last_used_at = "last_used_at";
const std::string TwoFactorAuthenticationDevices::Cols::_otp_secret = "otp_secret";
const std::string TwoFactorAuthenticationDevices::Cols::_user_id = "user_id";
const std::string TwoFactorAuthenticationDevices::primaryKeyName = "id";
const bool TwoFactorAuthenticationDevices::hasPrimaryKey = true;
const std::string TwoFactorAuthenticationDevices::tableName = "two_factor_authentication_devices";

const std::vector<typename TwoFactorAuthenticationDevices::MetaData> TwoFactorAuthenticationDevices::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"type","std::string","character varying",0,0,0,0},
{"default","bool","boolean",1,0,0,1},
{"active","bool","boolean",1,0,0,1},
{"channel","std::string","character varying",0,0,0,1},
{"phone_number","std::string","character varying",0,0,0,0},
{"identifier","std::string","character varying",0,0,0,1},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"last_used_at","int32_t","integer",4,0,0,0},
{"otp_secret","std::string","text",0,0,0,0},
{"user_id","int32_t","integer",4,0,0,0}
};
const std::string &TwoFactorAuthenticationDevices::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
TwoFactorAuthenticationDevices::TwoFactorAuthenticationDevices(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["default"].isNull())
        {
            _default=std::make_shared<bool>(r["default"].as<bool>());
        }
        if(!r["active"].isNull())
        {
            _active=std::make_shared<bool>(r["active"].as<bool>());
        }
        if(!r["channel"].isNull())
        {
            _channel=std::make_shared<std::string>(r["channel"].as<std::string>());
        }
        if(!r["phone_number"].isNull())
        {
            _phoneNumber=std::make_shared<std::string>(r["phone_number"].as<std::string>());
        }
        if(!r["identifier"].isNull())
        {
            _identifier=std::make_shared<std::string>(r["identifier"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["last_used_at"].isNull())
        {
            _lastUsedAt=std::make_shared<int32_t>(r["last_used_at"].as<int32_t>());
        }
        if(!r["otp_secret"].isNull())
        {
            _otpSecret=std::make_shared<std::string>(r["otp_secret"].as<std::string>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
}
const int32_t &TwoFactorAuthenticationDevices::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TwoFactorAuthenticationDevices::getId() const noexcept
{
    return _id;
}
const typename TwoFactorAuthenticationDevices::PrimaryKeyType & TwoFactorAuthenticationDevices::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const std::string &TwoFactorAuthenticationDevices::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &TwoFactorAuthenticationDevices::getType() const noexcept
{
    return _type;
}
void TwoFactorAuthenticationDevices::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[1] = true;
}
void TwoFactorAuthenticationDevices::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[1] = true;
}


const bool &TwoFactorAuthenticationDevices::getValueOfDefault() const noexcept
{
    const static bool defaultValue = bool();
    if(_default)
        return *_default;
    return defaultValue;
}
const std::shared_ptr<bool> &TwoFactorAuthenticationDevices::getDefault() const noexcept
{
    return _default;
}
void TwoFactorAuthenticationDevices::setDefault(const bool &pDefault) noexcept
{
    _default = std::make_shared<bool>(pDefault);
    _dirtyFlag[2] = true;
}


const bool &TwoFactorAuthenticationDevices::getValueOfActive() const noexcept
{
    const static bool defaultValue = bool();
    if(_active)
        return *_active;
    return defaultValue;
}
const std::shared_ptr<bool> &TwoFactorAuthenticationDevices::getActive() const noexcept
{
    return _active;
}
void TwoFactorAuthenticationDevices::setActive(const bool &pActive) noexcept
{
    _active = std::make_shared<bool>(pActive);
    _dirtyFlag[3] = true;
}


const std::string &TwoFactorAuthenticationDevices::getValueOfChannel() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_channel)
        return *_channel;
    return defaultValue;
}
const std::shared_ptr<std::string> &TwoFactorAuthenticationDevices::getChannel() const noexcept
{
    return _channel;
}
void TwoFactorAuthenticationDevices::setChannel(const std::string &pChannel) noexcept
{
    _channel = std::make_shared<std::string>(pChannel);
    _dirtyFlag[4] = true;
}
void TwoFactorAuthenticationDevices::setChannel(std::string &&pChannel) noexcept
{
    _channel = std::make_shared<std::string>(std::move(pChannel));
    _dirtyFlag[4] = true;
}


const std::string &TwoFactorAuthenticationDevices::getValueOfPhoneNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_phoneNumber)
        return *_phoneNumber;
    return defaultValue;
}
const std::shared_ptr<std::string> &TwoFactorAuthenticationDevices::getPhoneNumber() const noexcept
{
    return _phoneNumber;
}
void TwoFactorAuthenticationDevices::setPhoneNumber(const std::string &pPhoneNumber) noexcept
{
    _phoneNumber = std::make_shared<std::string>(pPhoneNumber);
    _dirtyFlag[5] = true;
}
void TwoFactorAuthenticationDevices::setPhoneNumber(std::string &&pPhoneNumber) noexcept
{
    _phoneNumber = std::make_shared<std::string>(std::move(pPhoneNumber));
    _dirtyFlag[5] = true;
}


const std::string &TwoFactorAuthenticationDevices::getValueOfIdentifier() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_identifier)
        return *_identifier;
    return defaultValue;
}
const std::shared_ptr<std::string> &TwoFactorAuthenticationDevices::getIdentifier() const noexcept
{
    return _identifier;
}
void TwoFactorAuthenticationDevices::setIdentifier(const std::string &pIdentifier) noexcept
{
    _identifier = std::make_shared<std::string>(pIdentifier);
    _dirtyFlag[6] = true;
}
void TwoFactorAuthenticationDevices::setIdentifier(std::string &&pIdentifier) noexcept
{
    _identifier = std::make_shared<std::string>(std::move(pIdentifier));
    _dirtyFlag[6] = true;
}


const ::trantor::Date &TwoFactorAuthenticationDevices::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TwoFactorAuthenticationDevices::getCreatedAt() const noexcept
{
    return _createdAt;
}
void TwoFactorAuthenticationDevices::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[7] = true;
}


const ::trantor::Date &TwoFactorAuthenticationDevices::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TwoFactorAuthenticationDevices::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void TwoFactorAuthenticationDevices::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[8] = true;
}


const int32_t &TwoFactorAuthenticationDevices::getValueOfLastUsedAt() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_lastUsedAt)
        return *_lastUsedAt;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TwoFactorAuthenticationDevices::getLastUsedAt() const noexcept
{
    return _lastUsedAt;
}
void TwoFactorAuthenticationDevices::setLastUsedAt(const int32_t &pLastUsedAt) noexcept
{
    _lastUsedAt = std::make_shared<int32_t>(pLastUsedAt);
    _dirtyFlag[9] = true;
}


const std::string &TwoFactorAuthenticationDevices::getValueOfOtpSecret() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_otpSecret)
        return *_otpSecret;
    return defaultValue;
}
const std::shared_ptr<std::string> &TwoFactorAuthenticationDevices::getOtpSecret() const noexcept
{
    return _otpSecret;
}
void TwoFactorAuthenticationDevices::setOtpSecret(const std::string &pOtpSecret) noexcept
{
    _otpSecret = std::make_shared<std::string>(pOtpSecret);
    _dirtyFlag[10] = true;
}
void TwoFactorAuthenticationDevices::setOtpSecret(std::string &&pOtpSecret) noexcept
{
    _otpSecret = std::make_shared<std::string>(std::move(pOtpSecret));
    _dirtyFlag[10] = true;
}


const int32_t &TwoFactorAuthenticationDevices::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TwoFactorAuthenticationDevices::getUserId() const noexcept
{
    return _userId;
}
void TwoFactorAuthenticationDevices::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[11] = true;
}


void TwoFactorAuthenticationDevices::updateId(const uint64_t id)
{
}

const std::vector<std::string> &TwoFactorAuthenticationDevices::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "type",
        "default",
        "active",
        "channel",
        "phone_number",
        "identifier",
        "created_at",
        "updated_at",
        "last_used_at",
        "otp_secret",
        "user_id"
    };
    return _inCols;
}

void TwoFactorAuthenticationDevices::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getType())
    {
        binder << getValueOfType();
    }
    else
    {
        binder << nullptr;
    }
    if(getDefault())
    {
        binder << getValueOfDefault();
    }
    else
    {
        binder << nullptr;
    }
    if(getActive())
    {
        binder << getValueOfActive();
    }
    else
    {
        binder << nullptr;
    }
    if(getChannel())
    {
        binder << getValueOfChannel();
    }
    else
    {
        binder << nullptr;
    }
    if(getPhoneNumber())
    {
        binder << getValueOfPhoneNumber();
    }
    else
    {
        binder << nullptr;
    }
    if(getIdentifier())
    {
        binder << getValueOfIdentifier();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getLastUsedAt())
    {
        binder << getValueOfLastUsedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getOtpSecret())
    {
        binder << getValueOfOtpSecret();
    }
    else
    {
        binder << nullptr;
    }
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> TwoFactorAuthenticationDevices::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void TwoFactorAuthenticationDevices::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getDefault())
        {
            binder << getValueOfDefault();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getActive())
        {
            binder << getValueOfActive();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getChannel())
        {
            binder << getValueOfChannel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getPhoneNumber())
        {
            binder << getValueOfPhoneNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getIdentifier())
        {
            binder << getValueOfIdentifier();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getLastUsedAt())
        {
            binder << getValueOfLastUsedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getOtpSecret())
        {
            binder << getValueOfOtpSecret();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TwoFactorAuthenticationDevices::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getDefault())
    {
        ret["default"]=getValueOfDefault();
    }
    else
    {
        ret["default"]=Json::Value();
    }
    if(getActive())
    {
        ret["active"]=getValueOfActive();
    }
    else
    {
        ret["active"]=Json::Value();
    }
    if(getChannel())
    {
        ret["channel"]=getValueOfChannel();
    }
    else
    {
        ret["channel"]=Json::Value();
    }
    if(getPhoneNumber())
    {
        ret["phone_number"]=getValueOfPhoneNumber();
    }
    else
    {
        ret["phone_number"]=Json::Value();
    }
    if(getIdentifier())
    {
        ret["identifier"]=getValueOfIdentifier();
    }
    else
    {
        ret["identifier"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getLastUsedAt())
    {
        ret["last_used_at"]=getValueOfLastUsedAt();
    }
    else
    {
        ret["last_used_at"]=Json::Value();
    }
    if(getOtpSecret())
    {
        ret["otp_secret"]=getValueOfOtpSecret();
    }
    else
    {
        ret["otp_secret"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    return ret;
}
