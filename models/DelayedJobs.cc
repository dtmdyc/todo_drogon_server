/**
 *
 *  DelayedJobs.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "DelayedJobs.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string DelayedJobs::Cols::_id = "id";
const std::string DelayedJobs::Cols::_priority = "priority";
const std::string DelayedJobs::Cols::_attempts = "attempts";
const std::string DelayedJobs::Cols::_handler = "handler";
const std::string DelayedJobs::Cols::_last_error = "last_error";
const std::string DelayedJobs::Cols::_run_at = "run_at";
const std::string DelayedJobs::Cols::_locked_at = "locked_at";
const std::string DelayedJobs::Cols::_failed_at = "failed_at";
const std::string DelayedJobs::Cols::_locked_by = "locked_by";
const std::string DelayedJobs::Cols::_created_at = "created_at";
const std::string DelayedJobs::Cols::_updated_at = "updated_at";
const std::string DelayedJobs::Cols::_queue = "queue";
const std::string DelayedJobs::primaryKeyName = "id";
const bool DelayedJobs::hasPrimaryKey = true;
const std::string DelayedJobs::tableName = "delayed_jobs";

const std::vector<typename DelayedJobs::MetaData> DelayedJobs::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"priority","int32_t","integer",4,0,0,0},
{"attempts","int32_t","integer",4,0,0,0},
{"handler","std::string","text",0,0,0,0},
{"last_error","std::string","text",0,0,0,0},
{"run_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"locked_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"failed_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"locked_by","std::string","character varying",0,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"queue","std::string","character varying",0,0,0,0}
};
const std::string &DelayedJobs::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
DelayedJobs::DelayedJobs(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["priority"].isNull())
        {
            _priority=std::make_shared<int32_t>(r["priority"].as<int32_t>());
        }
        if(!r["attempts"].isNull())
        {
            _attempts=std::make_shared<int32_t>(r["attempts"].as<int32_t>());
        }
        if(!r["handler"].isNull())
        {
            _handler=std::make_shared<std::string>(r["handler"].as<std::string>());
        }
        if(!r["last_error"].isNull())
        {
            _lastError=std::make_shared<std::string>(r["last_error"].as<std::string>());
        }
        if(!r["run_at"].isNull())
        {
            auto timeStr = r["run_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _runAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["locked_at"].isNull())
        {
            auto timeStr = r["locked_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _lockedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["failed_at"].isNull())
        {
            auto timeStr = r["failed_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _failedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["locked_by"].isNull())
        {
            _lockedBy=std::make_shared<std::string>(r["locked_by"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["queue"].isNull())
        {
            _queue=std::make_shared<std::string>(r["queue"].as<std::string>());
        }
}
const int32_t &DelayedJobs::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DelayedJobs::getId() const noexcept
{
    return _id;
}
const typename DelayedJobs::PrimaryKeyType & DelayedJobs::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &DelayedJobs::getValueOfPriority() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_priority)
        return *_priority;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DelayedJobs::getPriority() const noexcept
{
    return _priority;
}
void DelayedJobs::setPriority(const int32_t &pPriority) noexcept
{
    _priority = std::make_shared<int32_t>(pPriority);
    _dirtyFlag[1] = true;
}


const int32_t &DelayedJobs::getValueOfAttempts() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_attempts)
        return *_attempts;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DelayedJobs::getAttempts() const noexcept
{
    return _attempts;
}
void DelayedJobs::setAttempts(const int32_t &pAttempts) noexcept
{
    _attempts = std::make_shared<int32_t>(pAttempts);
    _dirtyFlag[2] = true;
}


const std::string &DelayedJobs::getValueOfHandler() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_handler)
        return *_handler;
    return defaultValue;
}
const std::shared_ptr<std::string> &DelayedJobs::getHandler() const noexcept
{
    return _handler;
}
void DelayedJobs::setHandler(const std::string &pHandler) noexcept
{
    _handler = std::make_shared<std::string>(pHandler);
    _dirtyFlag[3] = true;
}
void DelayedJobs::setHandler(std::string &&pHandler) noexcept
{
    _handler = std::make_shared<std::string>(std::move(pHandler));
    _dirtyFlag[3] = true;
}


const std::string &DelayedJobs::getValueOfLastError() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_lastError)
        return *_lastError;
    return defaultValue;
}
const std::shared_ptr<std::string> &DelayedJobs::getLastError() const noexcept
{
    return _lastError;
}
void DelayedJobs::setLastError(const std::string &pLastError) noexcept
{
    _lastError = std::make_shared<std::string>(pLastError);
    _dirtyFlag[4] = true;
}
void DelayedJobs::setLastError(std::string &&pLastError) noexcept
{
    _lastError = std::make_shared<std::string>(std::move(pLastError));
    _dirtyFlag[4] = true;
}


const ::trantor::Date &DelayedJobs::getValueOfRunAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_runAt)
        return *_runAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DelayedJobs::getRunAt() const noexcept
{
    return _runAt;
}
void DelayedJobs::setRunAt(const ::trantor::Date &pRunAt) noexcept
{
    _runAt = std::make_shared<::trantor::Date>(pRunAt);
    _dirtyFlag[5] = true;
}


const ::trantor::Date &DelayedJobs::getValueOfLockedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_lockedAt)
        return *_lockedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DelayedJobs::getLockedAt() const noexcept
{
    return _lockedAt;
}
void DelayedJobs::setLockedAt(const ::trantor::Date &pLockedAt) noexcept
{
    _lockedAt = std::make_shared<::trantor::Date>(pLockedAt);
    _dirtyFlag[6] = true;
}


const ::trantor::Date &DelayedJobs::getValueOfFailedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_failedAt)
        return *_failedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DelayedJobs::getFailedAt() const noexcept
{
    return _failedAt;
}
void DelayedJobs::setFailedAt(const ::trantor::Date &pFailedAt) noexcept
{
    _failedAt = std::make_shared<::trantor::Date>(pFailedAt);
    _dirtyFlag[7] = true;
}


const std::string &DelayedJobs::getValueOfLockedBy() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_lockedBy)
        return *_lockedBy;
    return defaultValue;
}
const std::shared_ptr<std::string> &DelayedJobs::getLockedBy() const noexcept
{
    return _lockedBy;
}
void DelayedJobs::setLockedBy(const std::string &pLockedBy) noexcept
{
    _lockedBy = std::make_shared<std::string>(pLockedBy);
    _dirtyFlag[8] = true;
}
void DelayedJobs::setLockedBy(std::string &&pLockedBy) noexcept
{
    _lockedBy = std::make_shared<std::string>(std::move(pLockedBy));
    _dirtyFlag[8] = true;
}


const ::trantor::Date &DelayedJobs::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DelayedJobs::getCreatedAt() const noexcept
{
    return _createdAt;
}
void DelayedJobs::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[9] = true;
}


const ::trantor::Date &DelayedJobs::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DelayedJobs::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void DelayedJobs::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[10] = true;
}


const std::string &DelayedJobs::getValueOfQueue() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_queue)
        return *_queue;
    return defaultValue;
}
const std::shared_ptr<std::string> &DelayedJobs::getQueue() const noexcept
{
    return _queue;
}
void DelayedJobs::setQueue(const std::string &pQueue) noexcept
{
    _queue = std::make_shared<std::string>(pQueue);
    _dirtyFlag[11] = true;
}
void DelayedJobs::setQueue(std::string &&pQueue) noexcept
{
    _queue = std::make_shared<std::string>(std::move(pQueue));
    _dirtyFlag[11] = true;
}


void DelayedJobs::updateId(const uint64_t id)
{
}

const std::vector<std::string> &DelayedJobs::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "priority",
        "attempts",
        "handler",
        "last_error",
        "run_at",
        "locked_at",
        "failed_at",
        "locked_by",
        "created_at",
        "updated_at",
        "queue"
    };
    return _inCols;
}

void DelayedJobs::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getPriority())
    {
        binder << getValueOfPriority();
    }
    else
    {
        binder << nullptr;
    }
    if(getAttempts())
    {
        binder << getValueOfAttempts();
    }
    else
    {
        binder << nullptr;
    }
    if(getHandler())
    {
        binder << getValueOfHandler();
    }
    else
    {
        binder << nullptr;
    }
    if(getLastError())
    {
        binder << getValueOfLastError();
    }
    else
    {
        binder << nullptr;
    }
    if(getRunAt())
    {
        binder << getValueOfRunAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getLockedAt())
    {
        binder << getValueOfLockedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getFailedAt())
    {
        binder << getValueOfFailedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getLockedBy())
    {
        binder << getValueOfLockedBy();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getQueue())
    {
        binder << getValueOfQueue();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> DelayedJobs::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void DelayedJobs::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getPriority())
        {
            binder << getValueOfPriority();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getAttempts())
        {
            binder << getValueOfAttempts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getHandler())
        {
            binder << getValueOfHandler();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getLastError())
        {
            binder << getValueOfLastError();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getRunAt())
        {
            binder << getValueOfRunAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getLockedAt())
        {
            binder << getValueOfLockedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getFailedAt())
        {
            binder << getValueOfFailedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getLockedBy())
        {
            binder << getValueOfLockedBy();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getQueue())
        {
            binder << getValueOfQueue();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value DelayedJobs::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPriority())
    {
        ret["priority"]=getValueOfPriority();
    }
    else
    {
        ret["priority"]=Json::Value();
    }
    if(getAttempts())
    {
        ret["attempts"]=getValueOfAttempts();
    }
    else
    {
        ret["attempts"]=Json::Value();
    }
    if(getHandler())
    {
        ret["handler"]=getValueOfHandler();
    }
    else
    {
        ret["handler"]=Json::Value();
    }
    if(getLastError())
    {
        ret["last_error"]=getValueOfLastError();
    }
    else
    {
        ret["last_error"]=Json::Value();
    }
    if(getRunAt())
    {
        ret["run_at"]=getRunAt()->toDbStringLocal();
    }
    else
    {
        ret["run_at"]=Json::Value();
    }
    if(getLockedAt())
    {
        ret["locked_at"]=getLockedAt()->toDbStringLocal();
    }
    else
    {
        ret["locked_at"]=Json::Value();
    }
    if(getFailedAt())
    {
        ret["failed_at"]=getFailedAt()->toDbStringLocal();
    }
    else
    {
        ret["failed_at"]=Json::Value();
    }
    if(getLockedBy())
    {
        ret["locked_by"]=getValueOfLockedBy();
    }
    else
    {
        ret["locked_by"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    if(getQueue())
    {
        ret["queue"]=getValueOfQueue();
    }
    else
    {
        ret["queue"]=Json::Value();
    }
    return ret;
}
