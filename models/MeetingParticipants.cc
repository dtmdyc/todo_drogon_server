/**
 *
 *  MeetingParticipants.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MeetingParticipants.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string MeetingParticipants::Cols::_id = "id";
const std::string MeetingParticipants::Cols::_user_id = "user_id";
const std::string MeetingParticipants::Cols::_meeting_id = "meeting_id";
const std::string MeetingParticipants::Cols::_email = "email";
const std::string MeetingParticipants::Cols::_name = "name";
const std::string MeetingParticipants::Cols::_invited = "invited";
const std::string MeetingParticipants::Cols::_attended = "attended";
const std::string MeetingParticipants::Cols::_created_at = "created_at";
const std::string MeetingParticipants::Cols::_updated_at = "updated_at";
const std::string MeetingParticipants::primaryKeyName = "id";
const bool MeetingParticipants::hasPrimaryKey = true;
const std::string MeetingParticipants::tableName = "meeting_participants";

const std::vector<typename MeetingParticipants::MetaData> MeetingParticipants::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"user_id","int32_t","integer",4,0,0,0},
{"meeting_id","int32_t","integer",4,0,0,0},
{"email","std::string","character varying",0,0,0,0},
{"name","std::string","character varying",0,0,0,0},
{"invited","bool","boolean",1,0,0,0},
{"attended","bool","boolean",1,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &MeetingParticipants::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
MeetingParticipants::MeetingParticipants(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["meeting_id"].isNull())
        {
            _meetingId=std::make_shared<int32_t>(r["meeting_id"].as<int32_t>());
        }
        if(!r["email"].isNull())
        {
            _email=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["name"].isNull())
        {
            _name=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["invited"].isNull())
        {
            _invited=std::make_shared<bool>(r["invited"].as<bool>());
        }
        if(!r["attended"].isNull())
        {
            _attended=std::make_shared<bool>(r["attended"].as<bool>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const int32_t &MeetingParticipants::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingParticipants::getId() const noexcept
{
    return _id;
}
const typename MeetingParticipants::PrimaryKeyType & MeetingParticipants::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &MeetingParticipants::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingParticipants::getUserId() const noexcept
{
    return _userId;
}
void MeetingParticipants::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[1] = true;
}


const int32_t &MeetingParticipants::getValueOfMeetingId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_meetingId)
        return *_meetingId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingParticipants::getMeetingId() const noexcept
{
    return _meetingId;
}
void MeetingParticipants::setMeetingId(const int32_t &pMeetingId) noexcept
{
    _meetingId = std::make_shared<int32_t>(pMeetingId);
    _dirtyFlag[2] = true;
}


const std::string &MeetingParticipants::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_email)
        return *_email;
    return defaultValue;
}
const std::shared_ptr<std::string> &MeetingParticipants::getEmail() const noexcept
{
    return _email;
}
void MeetingParticipants::setEmail(const std::string &pEmail) noexcept
{
    _email = std::make_shared<std::string>(pEmail);
    _dirtyFlag[3] = true;
}
void MeetingParticipants::setEmail(std::string &&pEmail) noexcept
{
    _email = std::make_shared<std::string>(std::move(pEmail));
    _dirtyFlag[3] = true;
}


const std::string &MeetingParticipants::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_name)
        return *_name;
    return defaultValue;
}
const std::shared_ptr<std::string> &MeetingParticipants::getName() const noexcept
{
    return _name;
}
void MeetingParticipants::setName(const std::string &pName) noexcept
{
    _name = std::make_shared<std::string>(pName);
    _dirtyFlag[4] = true;
}
void MeetingParticipants::setName(std::string &&pName) noexcept
{
    _name = std::make_shared<std::string>(std::move(pName));
    _dirtyFlag[4] = true;
}


const bool &MeetingParticipants::getValueOfInvited() const noexcept
{
    const static bool defaultValue = bool();
    if(_invited)
        return *_invited;
    return defaultValue;
}
const std::shared_ptr<bool> &MeetingParticipants::getInvited() const noexcept
{
    return _invited;
}
void MeetingParticipants::setInvited(const bool &pInvited) noexcept
{
    _invited = std::make_shared<bool>(pInvited);
    _dirtyFlag[5] = true;
}


const bool &MeetingParticipants::getValueOfAttended() const noexcept
{
    const static bool defaultValue = bool();
    if(_attended)
        return *_attended;
    return defaultValue;
}
const std::shared_ptr<bool> &MeetingParticipants::getAttended() const noexcept
{
    return _attended;
}
void MeetingParticipants::setAttended(const bool &pAttended) noexcept
{
    _attended = std::make_shared<bool>(pAttended);
    _dirtyFlag[6] = true;
}


const ::trantor::Date &MeetingParticipants::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MeetingParticipants::getCreatedAt() const noexcept
{
    return _createdAt;
}
void MeetingParticipants::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[7] = true;
}


const ::trantor::Date &MeetingParticipants::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MeetingParticipants::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void MeetingParticipants::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[8] = true;
}


void MeetingParticipants::updateId(const uint64_t id)
{
}

const std::vector<std::string> &MeetingParticipants::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "user_id",
        "meeting_id",
        "email",
        "name",
        "invited",
        "attended",
        "created_at",
        "updated_at"
    };
    return _inCols;
}

void MeetingParticipants::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
    if(getMeetingId())
    {
        binder << getValueOfMeetingId();
    }
    else
    {
        binder << nullptr;
    }
    if(getEmail())
    {
        binder << getValueOfEmail();
    }
    else
    {
        binder << nullptr;
    }
    if(getName())
    {
        binder << getValueOfName();
    }
    else
    {
        binder << nullptr;
    }
    if(getInvited())
    {
        binder << getValueOfInvited();
    }
    else
    {
        binder << nullptr;
    }
    if(getAttended())
    {
        binder << getValueOfAttended();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> MeetingParticipants::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void MeetingParticipants::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getMeetingId())
        {
            binder << getValueOfMeetingId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getInvited())
        {
            binder << getValueOfInvited();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getAttended())
        {
            binder << getValueOfAttended();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MeetingParticipants::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getMeetingId())
    {
        ret["meeting_id"]=getValueOfMeetingId();
    }
    else
    {
        ret["meeting_id"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getInvited())
    {
        ret["invited"]=getValueOfInvited();
    }
    else
    {
        ret["invited"]=Json::Value();
    }
    if(getAttended())
    {
        ret["attended"]=getValueOfAttended();
    }
    else
    {
        ret["attended"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}
