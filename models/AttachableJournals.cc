/**
 *
 *  AttachableJournals.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "AttachableJournals.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string AttachableJournals::Cols::_id = "id";
const std::string AttachableJournals::Cols::_journal_id = "journal_id";
const std::string AttachableJournals::Cols::_attachment_id = "attachment_id";
const std::string AttachableJournals::Cols::_filename = "filename";
const std::string AttachableJournals::primaryKeyName = "id";
const bool AttachableJournals::hasPrimaryKey = true;
const std::string AttachableJournals::tableName = "attachable_journals";

const std::vector<typename AttachableJournals::MetaData> AttachableJournals::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"journal_id","int32_t","integer",4,0,0,1},
{"attachment_id","int32_t","integer",4,0,0,1},
{"filename","std::string","character varying",0,0,0,1}
};
const std::string &AttachableJournals::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
AttachableJournals::AttachableJournals(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>(r["journal_id"].as<int32_t>());
        }
        if(!r["attachment_id"].isNull())
        {
            _attachmentId=std::make_shared<int32_t>(r["attachment_id"].as<int32_t>());
        }
        if(!r["filename"].isNull())
        {
            _filename=std::make_shared<std::string>(r["filename"].as<std::string>());
        }
}
const int32_t &AttachableJournals::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AttachableJournals::getId() const noexcept
{
    return _id;
}
const typename AttachableJournals::PrimaryKeyType & AttachableJournals::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &AttachableJournals::getValueOfJournalId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journalId)
        return *_journalId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AttachableJournals::getJournalId() const noexcept
{
    return _journalId;
}
void AttachableJournals::setJournalId(const int32_t &pJournalId) noexcept
{
    _journalId = std::make_shared<int32_t>(pJournalId);
    _dirtyFlag[1] = true;
}


const int32_t &AttachableJournals::getValueOfAttachmentId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_attachmentId)
        return *_attachmentId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &AttachableJournals::getAttachmentId() const noexcept
{
    return _attachmentId;
}
void AttachableJournals::setAttachmentId(const int32_t &pAttachmentId) noexcept
{
    _attachmentId = std::make_shared<int32_t>(pAttachmentId);
    _dirtyFlag[2] = true;
}


const std::string &AttachableJournals::getValueOfFilename() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_filename)
        return *_filename;
    return defaultValue;
}
const std::shared_ptr<std::string> &AttachableJournals::getFilename() const noexcept
{
    return _filename;
}
void AttachableJournals::setFilename(const std::string &pFilename) noexcept
{
    _filename = std::make_shared<std::string>(pFilename);
    _dirtyFlag[3] = true;
}
void AttachableJournals::setFilename(std::string &&pFilename) noexcept
{
    _filename = std::make_shared<std::string>(std::move(pFilename));
    _dirtyFlag[3] = true;
}


void AttachableJournals::updateId(const uint64_t id)
{
}

const std::vector<std::string> &AttachableJournals::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journal_id",
        "attachment_id",
        "filename"
    };
    return _inCols;
}

void AttachableJournals::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getJournalId())
    {
        binder << getValueOfJournalId();
    }
    else
    {
        binder << nullptr;
    }
    if(getAttachmentId())
    {
        binder << getValueOfAttachmentId();
    }
    else
    {
        binder << nullptr;
    }
    if(getFilename())
    {
        binder << getValueOfFilename();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> AttachableJournals::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void AttachableJournals::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getAttachmentId())
        {
            binder << getValueOfAttachmentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getFilename())
        {
            binder << getValueOfFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value AttachableJournals::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getAttachmentId())
    {
        ret["attachment_id"]=getValueOfAttachmentId();
    }
    else
    {
        ret["attachment_id"]=Json::Value();
    }
    if(getFilename())
    {
        ret["filename"]=getValueOfFilename();
    }
    else
    {
        ret["filename"]=Json::Value();
    }
    return ret;
}
