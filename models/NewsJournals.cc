/**
 *
 *  NewsJournals.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "NewsJournals.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject6;

const std::string NewsJournals::Cols::_id = "id";
const std::string NewsJournals::Cols::_journal_id = "journal_id";
const std::string NewsJournals::Cols::_project_id = "project_id";
const std::string NewsJournals::Cols::_title = "title";
const std::string NewsJournals::Cols::_summary = "summary";
const std::string NewsJournals::Cols::_description = "description";
const std::string NewsJournals::Cols::_author_id = "author_id";
const std::string NewsJournals::Cols::_comments_count = "comments_count";
const std::string NewsJournals::primaryKeyName = "id";
const bool NewsJournals::hasPrimaryKey = true;
const std::string NewsJournals::tableName = "news_journals";

const std::vector<typename NewsJournals::MetaData> NewsJournals::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"journal_id","int32_t","integer",4,0,0,1},
{"project_id","int32_t","integer",4,0,0,0},
{"title","std::string","character varying",60,0,0,1},
{"summary","std::string","character varying",0,0,0,0},
{"description","std::string","text",0,0,0,0},
{"author_id","int32_t","integer",4,0,0,1},
{"comments_count","int32_t","integer",4,0,0,1}
};
const std::string &NewsJournals::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
NewsJournals::NewsJournals(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>(r["journal_id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["title"].isNull())
        {
            _title=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["summary"].isNull())
        {
            _summary=std::make_shared<std::string>(r["summary"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            _description=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["comments_count"].isNull())
        {
            _commentsCount=std::make_shared<int32_t>(r["comments_count"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _journalId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _projectId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _title=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _summary=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _description=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            _authorId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            _commentsCount=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

NewsJournals::NewsJournals(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _dirtyFlag[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _title=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _summary=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _description=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _commentsCount=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}

NewsJournals::NewsJournals(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _dirtyFlag[0]=true;
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("journal_id"))
    {
        _dirtyFlag[1]=true;
        if(!pJson["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson["journal_id"].asInt64());
        }
    }
    if(pJson.isMember("project_id"))
    {
        _dirtyFlag[2]=true;
        if(!pJson["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson["project_id"].asInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        _dirtyFlag[3]=true;
        if(!pJson["title"].isNull())
        {
            _title=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("summary"))
    {
        _dirtyFlag[4]=true;
        if(!pJson["summary"].isNull())
        {
            _summary=std::make_shared<std::string>(pJson["summary"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        _dirtyFlag[5]=true;
        if(!pJson["description"].isNull())
        {
            _description=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[6]=true;
        if(!pJson["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
        }
    }
    if(pJson.isMember("comments_count"))
    {
        _dirtyFlag[7]=true;
        if(!pJson["comments_count"].isNull())
        {
            _commentsCount=std::make_shared<int32_t>((int32_t)pJson["comments_count"].asInt64());
        }
    }
}

void NewsJournals::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            _title=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            _summary=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            _description=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            _commentsCount=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
}
                                                                    
void NewsJournals::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("journal_id"))
    {
        _dirtyFlag[1] = true;
        if(!pJson["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>((int32_t)pJson["journal_id"].asInt64());
        }
    }
    if(pJson.isMember("project_id"))
    {
        _dirtyFlag[2] = true;
        if(!pJson["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>((int32_t)pJson["project_id"].asInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        _dirtyFlag[3] = true;
        if(!pJson["title"].isNull())
        {
            _title=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("summary"))
    {
        _dirtyFlag[4] = true;
        if(!pJson["summary"].isNull())
        {
            _summary=std::make_shared<std::string>(pJson["summary"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        _dirtyFlag[5] = true;
        if(!pJson["description"].isNull())
        {
            _description=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[6] = true;
        if(!pJson["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
        }
    }
    if(pJson.isMember("comments_count"))
    {
        _dirtyFlag[7] = true;
        if(!pJson["comments_count"].isNull())
        {
            _commentsCount=std::make_shared<int32_t>((int32_t)pJson["comments_count"].asInt64());
        }
    }
}

const int32_t &NewsJournals::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &NewsJournals::getId() const noexcept
{
    return _id;
}
const typename NewsJournals::PrimaryKeyType & NewsJournals::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &NewsJournals::getValueOfJournalId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journalId)
        return *_journalId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &NewsJournals::getJournalId() const noexcept
{
    return _journalId;
}
void NewsJournals::setJournalId(const int32_t &pJournalId) noexcept
{
    _journalId = std::make_shared<int32_t>(pJournalId);
    _dirtyFlag[1] = true;
}


const int32_t &NewsJournals::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &NewsJournals::getProjectId() const noexcept
{
    return _projectId;
}
void NewsJournals::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[2] = true;
}


const std::string &NewsJournals::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_title)
        return *_title;
    return defaultValue;
}
const std::shared_ptr<std::string> &NewsJournals::getTitle() const noexcept
{
    return _title;
}
void NewsJournals::setTitle(const std::string &pTitle) noexcept
{
    _title = std::make_shared<std::string>(pTitle);
    _dirtyFlag[3] = true;
}
void NewsJournals::setTitle(std::string &&pTitle) noexcept
{
    _title = std::make_shared<std::string>(std::move(pTitle));
    _dirtyFlag[3] = true;
}


const std::string &NewsJournals::getValueOfSummary() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_summary)
        return *_summary;
    return defaultValue;
}
const std::shared_ptr<std::string> &NewsJournals::getSummary() const noexcept
{
    return _summary;
}
void NewsJournals::setSummary(const std::string &pSummary) noexcept
{
    _summary = std::make_shared<std::string>(pSummary);
    _dirtyFlag[4] = true;
}
void NewsJournals::setSummary(std::string &&pSummary) noexcept
{
    _summary = std::make_shared<std::string>(std::move(pSummary));
    _dirtyFlag[4] = true;
}


const std::string &NewsJournals::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_description)
        return *_description;
    return defaultValue;
}
const std::shared_ptr<std::string> &NewsJournals::getDescription() const noexcept
{
    return _description;
}
void NewsJournals::setDescription(const std::string &pDescription) noexcept
{
    _description = std::make_shared<std::string>(pDescription);
    _dirtyFlag[5] = true;
}
void NewsJournals::setDescription(std::string &&pDescription) noexcept
{
    _description = std::make_shared<std::string>(std::move(pDescription));
    _dirtyFlag[5] = true;
}


const int32_t &NewsJournals::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &NewsJournals::getAuthorId() const noexcept
{
    return _authorId;
}
void NewsJournals::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[6] = true;
}


const int32_t &NewsJournals::getValueOfCommentsCount() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_commentsCount)
        return *_commentsCount;
    return defaultValue;
}
const std::shared_ptr<int32_t> &NewsJournals::getCommentsCount() const noexcept
{
    return _commentsCount;
}
void NewsJournals::setCommentsCount(const int32_t &pCommentsCount) noexcept
{
    _commentsCount = std::make_shared<int32_t>(pCommentsCount);
    _dirtyFlag[7] = true;
}


void NewsJournals::updateId(const uint64_t id)
{
}

const std::vector<std::string> &NewsJournals::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journal_id",
        "project_id",
        "title",
        "summary",
        "description",
        "author_id",
        "comments_count"
    };
    return _inCols;
}

void NewsJournals::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getSummary())
        {
            binder << getValueOfSummary();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCommentsCount())
        {
            binder << getValueOfCommentsCount();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> NewsJournals::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void NewsJournals::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getSummary())
        {
            binder << getValueOfSummary();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCommentsCount())
        {
            binder << getValueOfCommentsCount();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value NewsJournals::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getSummary())
    {
        ret["summary"]=getValueOfSummary();
    }
    else
    {
        ret["summary"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getCommentsCount())
    {
        ret["comments_count"]=getValueOfCommentsCount();
    }
    else
    {
        ret["comments_count"]=Json::Value();
    }
    return ret;
}

Json::Value NewsJournals::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getJournalId())
            {
                ret[pMasqueradingVector[1]]=getValueOfJournalId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getProjectId())
            {
                ret[pMasqueradingVector[2]]=getValueOfProjectId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[3]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getSummary())
            {
                ret[pMasqueradingVector[4]]=getValueOfSummary();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[5]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAuthorId())
            {
                ret[pMasqueradingVector[6]]=getValueOfAuthorId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCommentsCount())
            {
                ret[pMasqueradingVector[7]]=getValueOfCommentsCount();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getSummary())
    {
        ret["summary"]=getValueOfSummary();
    }
    else
    {
        ret["summary"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getCommentsCount())
    {
        ret["comments_count"]=getValueOfCommentsCount();
    }
    else
    {
        ret["comments_count"]=Json::Value();
    }
    return ret;
}

bool NewsJournals::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("journal_id"))
    {
        if(!validJsonOfField(1, "journal_id", pJson["journal_id"], err, true))
            return false;
    }
    else
    {
        err="The journal_id column cannot be null";
        return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(2, "project_id", pJson["project_id"], err, true))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(3, "title", pJson["title"], err, true))
            return false;
    }
    if(pJson.isMember("summary"))
    {
        if(!validJsonOfField(4, "summary", pJson["summary"], err, true))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(5, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("author_id"))
    {
        if(!validJsonOfField(6, "author_id", pJson["author_id"], err, true))
            return false;
    }
    if(pJson.isMember("comments_count"))
    {
        if(!validJsonOfField(7, "comments_count", pJson["comments_count"], err, true))
            return false;
    }
    return true;
}
bool NewsJournals::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    return true;
}
bool NewsJournals::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("journal_id"))
    {
        if(!validJsonOfField(1, "journal_id", pJson["journal_id"], err, false))
            return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(2, "project_id", pJson["project_id"], err, false))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(3, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("summary"))
    {
        if(!validJsonOfField(4, "summary", pJson["summary"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(5, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("author_id"))
    {
        if(!validJsonOfField(6, "author_id", pJson["author_id"], err, false))
            return false;
    }
    if(pJson.isMember("comments_count"))
    {
        if(!validJsonOfField(7, "comments_count", pJson["comments_count"], err, false))
            return false;
    }
    return true;
}
bool NewsJournals::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    return true;
}
bool NewsJournals::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson, 
                                    std::string &err, 
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 2:
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    "field (the maximum value is 60 )";
                return false;               
            }

            break;
        case 4:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 5:
            if(!pJson.isString() && !pJson.isNull())
            {
                err="Type error in the "+fieldName+"field";
                return false;                
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+"field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
