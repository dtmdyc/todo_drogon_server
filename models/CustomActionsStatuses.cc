/**
 *
 *  CustomActionsStatuses.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "CustomActionsStatuses.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string CustomActionsStatuses::Cols::_id = "id";
const std::string CustomActionsStatuses::Cols::_status_id = "status_id";
const std::string CustomActionsStatuses::Cols::_custom_action_id = "custom_action_id";
const std::string CustomActionsStatuses::primaryKeyName = "id";
const bool CustomActionsStatuses::hasPrimaryKey = true;
const std::string CustomActionsStatuses::tableName = "custom_actions_statuses";

const std::vector<typename CustomActionsStatuses::MetaData> CustomActionsStatuses::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"status_id","int64_t","bigint",8,0,0,0},
{"custom_action_id","int64_t","bigint",8,0,0,0}
};
const std::string &CustomActionsStatuses::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
CustomActionsStatuses::CustomActionsStatuses(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["status_id"].isNull())
        {
            _statusId=std::make_shared<int64_t>(r["status_id"].as<int64_t>());
        }
        if(!r["custom_action_id"].isNull())
        {
            _customActionId=std::make_shared<int64_t>(r["custom_action_id"].as<int64_t>());
        }
}
const int32_t &CustomActionsStatuses::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CustomActionsStatuses::getId() const noexcept
{
    return _id;
}
const typename CustomActionsStatuses::PrimaryKeyType & CustomActionsStatuses::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int64_t &CustomActionsStatuses::getValueOfStatusId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_statusId)
        return *_statusId;
    return defaultValue;
}
const std::shared_ptr<int64_t> &CustomActionsStatuses::getStatusId() const noexcept
{
    return _statusId;
}
void CustomActionsStatuses::setStatusId(const int64_t &pStatusId) noexcept
{
    _statusId = std::make_shared<int64_t>(pStatusId);
    _dirtyFlag[1] = true;
}


const int64_t &CustomActionsStatuses::getValueOfCustomActionId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_customActionId)
        return *_customActionId;
    return defaultValue;
}
const std::shared_ptr<int64_t> &CustomActionsStatuses::getCustomActionId() const noexcept
{
    return _customActionId;
}
void CustomActionsStatuses::setCustomActionId(const int64_t &pCustomActionId) noexcept
{
    _customActionId = std::make_shared<int64_t>(pCustomActionId);
    _dirtyFlag[2] = true;
}


void CustomActionsStatuses::updateId(const uint64_t id)
{
}

const std::vector<std::string> &CustomActionsStatuses::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "status_id",
        "custom_action_id"
    };
    return _inCols;
}

void CustomActionsStatuses::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getStatusId())
    {
        binder << getValueOfStatusId();
    }
    else
    {
        binder << nullptr;
    }
    if(getCustomActionId())
    {
        binder << getValueOfCustomActionId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> CustomActionsStatuses::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void CustomActionsStatuses::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getStatusId())
        {
            binder << getValueOfStatusId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getCustomActionId())
        {
            binder << getValueOfCustomActionId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value CustomActionsStatuses::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getStatusId())
    {
        ret["status_id"]=(Json::Int64)getValueOfStatusId();
    }
    else
    {
        ret["status_id"]=Json::Value();
    }
    if(getCustomActionId())
    {
        ret["custom_action_id"]=(Json::Int64)getValueOfCustomActionId();
    }
    else
    {
        ret["custom_action_id"]=Json::Value();
    }
    return ret;
}
