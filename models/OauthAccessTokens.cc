/**
 *
 *  OauthAccessTokens.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "OauthAccessTokens.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string OauthAccessTokens::Cols::_id = "id";
const std::string OauthAccessTokens::Cols::_resource_owner_id = "resource_owner_id";
const std::string OauthAccessTokens::Cols::_application_id = "application_id";
const std::string OauthAccessTokens::Cols::_token = "token";
const std::string OauthAccessTokens::Cols::_refresh_token = "refresh_token";
const std::string OauthAccessTokens::Cols::_expires_in = "expires_in";
const std::string OauthAccessTokens::Cols::_revoked_at = "revoked_at";
const std::string OauthAccessTokens::Cols::_created_at = "created_at";
const std::string OauthAccessTokens::Cols::_scopes = "scopes";
const std::string OauthAccessTokens::Cols::_previous_refresh_token = "previous_refresh_token";
const std::string OauthAccessTokens::primaryKeyName = "id";
const bool OauthAccessTokens::hasPrimaryKey = true;
const std::string OauthAccessTokens::tableName = "oauth_access_tokens";

const std::vector<typename OauthAccessTokens::MetaData> OauthAccessTokens::_metaData={
{"id","int64_t","bigint",8,1,1,1},
{"resource_owner_id","int64_t","bigint",8,0,0,0},
{"application_id","int64_t","bigint",8,0,0,0},
{"token","std::string","character varying",0,0,0,1},
{"refresh_token","std::string","character varying",0,0,0,0},
{"expires_in","int32_t","integer",4,0,0,0},
{"revoked_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"scopes","std::string","character varying",0,0,0,0},
{"previous_refresh_token","std::string","character varying",0,0,0,1}
};
const std::string &OauthAccessTokens::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
OauthAccessTokens::OauthAccessTokens(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["resource_owner_id"].isNull())
        {
            _resourceOwnerId=std::make_shared<int64_t>(r["resource_owner_id"].as<int64_t>());
        }
        if(!r["application_id"].isNull())
        {
            _applicationId=std::make_shared<int64_t>(r["application_id"].as<int64_t>());
        }
        if(!r["token"].isNull())
        {
            _token=std::make_shared<std::string>(r["token"].as<std::string>());
        }
        if(!r["refresh_token"].isNull())
        {
            _refreshToken=std::make_shared<std::string>(r["refresh_token"].as<std::string>());
        }
        if(!r["expires_in"].isNull())
        {
            _expiresIn=std::make_shared<int32_t>(r["expires_in"].as<int32_t>());
        }
        if(!r["revoked_at"].isNull())
        {
            auto timeStr = r["revoked_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _revokedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["scopes"].isNull())
        {
            _scopes=std::make_shared<std::string>(r["scopes"].as<std::string>());
        }
        if(!r["previous_refresh_token"].isNull())
        {
            _previousRefreshToken=std::make_shared<std::string>(r["previous_refresh_token"].as<std::string>());
        }
}
const int64_t &OauthAccessTokens::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int64_t> &OauthAccessTokens::getId() const noexcept
{
    return _id;
}
const typename OauthAccessTokens::PrimaryKeyType & OauthAccessTokens::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int64_t &OauthAccessTokens::getValueOfResourceOwnerId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_resourceOwnerId)
        return *_resourceOwnerId;
    return defaultValue;
}
const std::shared_ptr<int64_t> &OauthAccessTokens::getResourceOwnerId() const noexcept
{
    return _resourceOwnerId;
}
void OauthAccessTokens::setResourceOwnerId(const int64_t &pResourceOwnerId) noexcept
{
    _resourceOwnerId = std::make_shared<int64_t>(pResourceOwnerId);
    _dirtyFlag[1] = true;
}


const int64_t &OauthAccessTokens::getValueOfApplicationId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_applicationId)
        return *_applicationId;
    return defaultValue;
}
const std::shared_ptr<int64_t> &OauthAccessTokens::getApplicationId() const noexcept
{
    return _applicationId;
}
void OauthAccessTokens::setApplicationId(const int64_t &pApplicationId) noexcept
{
    _applicationId = std::make_shared<int64_t>(pApplicationId);
    _dirtyFlag[2] = true;
}


const std::string &OauthAccessTokens::getValueOfToken() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_token)
        return *_token;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthAccessTokens::getToken() const noexcept
{
    return _token;
}
void OauthAccessTokens::setToken(const std::string &pToken) noexcept
{
    _token = std::make_shared<std::string>(pToken);
    _dirtyFlag[3] = true;
}
void OauthAccessTokens::setToken(std::string &&pToken) noexcept
{
    _token = std::make_shared<std::string>(std::move(pToken));
    _dirtyFlag[3] = true;
}


const std::string &OauthAccessTokens::getValueOfRefreshToken() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_refreshToken)
        return *_refreshToken;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthAccessTokens::getRefreshToken() const noexcept
{
    return _refreshToken;
}
void OauthAccessTokens::setRefreshToken(const std::string &pRefreshToken) noexcept
{
    _refreshToken = std::make_shared<std::string>(pRefreshToken);
    _dirtyFlag[4] = true;
}
void OauthAccessTokens::setRefreshToken(std::string &&pRefreshToken) noexcept
{
    _refreshToken = std::make_shared<std::string>(std::move(pRefreshToken));
    _dirtyFlag[4] = true;
}


const int32_t &OauthAccessTokens::getValueOfExpiresIn() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_expiresIn)
        return *_expiresIn;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OauthAccessTokens::getExpiresIn() const noexcept
{
    return _expiresIn;
}
void OauthAccessTokens::setExpiresIn(const int32_t &pExpiresIn) noexcept
{
    _expiresIn = std::make_shared<int32_t>(pExpiresIn);
    _dirtyFlag[5] = true;
}


const ::trantor::Date &OauthAccessTokens::getValueOfRevokedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_revokedAt)
        return *_revokedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OauthAccessTokens::getRevokedAt() const noexcept
{
    return _revokedAt;
}
void OauthAccessTokens::setRevokedAt(const ::trantor::Date &pRevokedAt) noexcept
{
    _revokedAt = std::make_shared<::trantor::Date>(pRevokedAt);
    _dirtyFlag[6] = true;
}


const ::trantor::Date &OauthAccessTokens::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OauthAccessTokens::getCreatedAt() const noexcept
{
    return _createdAt;
}
void OauthAccessTokens::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[7] = true;
}


const std::string &OauthAccessTokens::getValueOfScopes() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_scopes)
        return *_scopes;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthAccessTokens::getScopes() const noexcept
{
    return _scopes;
}
void OauthAccessTokens::setScopes(const std::string &pScopes) noexcept
{
    _scopes = std::make_shared<std::string>(pScopes);
    _dirtyFlag[8] = true;
}
void OauthAccessTokens::setScopes(std::string &&pScopes) noexcept
{
    _scopes = std::make_shared<std::string>(std::move(pScopes));
    _dirtyFlag[8] = true;
}


const std::string &OauthAccessTokens::getValueOfPreviousRefreshToken() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_previousRefreshToken)
        return *_previousRefreshToken;
    return defaultValue;
}
const std::shared_ptr<std::string> &OauthAccessTokens::getPreviousRefreshToken() const noexcept
{
    return _previousRefreshToken;
}
void OauthAccessTokens::setPreviousRefreshToken(const std::string &pPreviousRefreshToken) noexcept
{
    _previousRefreshToken = std::make_shared<std::string>(pPreviousRefreshToken);
    _dirtyFlag[9] = true;
}
void OauthAccessTokens::setPreviousRefreshToken(std::string &&pPreviousRefreshToken) noexcept
{
    _previousRefreshToken = std::make_shared<std::string>(std::move(pPreviousRefreshToken));
    _dirtyFlag[9] = true;
}


void OauthAccessTokens::updateId(const uint64_t id)
{
}

const std::vector<std::string> &OauthAccessTokens::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "resource_owner_id",
        "application_id",
        "token",
        "refresh_token",
        "expires_in",
        "revoked_at",
        "created_at",
        "scopes",
        "previous_refresh_token"
    };
    return _inCols;
}

void OauthAccessTokens::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getResourceOwnerId())
    {
        binder << getValueOfResourceOwnerId();
    }
    else
    {
        binder << nullptr;
    }
    if(getApplicationId())
    {
        binder << getValueOfApplicationId();
    }
    else
    {
        binder << nullptr;
    }
    if(getToken())
    {
        binder << getValueOfToken();
    }
    else
    {
        binder << nullptr;
    }
    if(getRefreshToken())
    {
        binder << getValueOfRefreshToken();
    }
    else
    {
        binder << nullptr;
    }
    if(getExpiresIn())
    {
        binder << getValueOfExpiresIn();
    }
    else
    {
        binder << nullptr;
    }
    if(getRevokedAt())
    {
        binder << getValueOfRevokedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getScopes())
    {
        binder << getValueOfScopes();
    }
    else
    {
        binder << nullptr;
    }
    if(getPreviousRefreshToken())
    {
        binder << getValueOfPreviousRefreshToken();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> OauthAccessTokens::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void OauthAccessTokens::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getResourceOwnerId())
        {
            binder << getValueOfResourceOwnerId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getApplicationId())
        {
            binder << getValueOfApplicationId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getToken())
        {
            binder << getValueOfToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getRefreshToken())
        {
            binder << getValueOfRefreshToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getExpiresIn())
        {
            binder << getValueOfExpiresIn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getRevokedAt())
        {
            binder << getValueOfRevokedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getScopes())
        {
            binder << getValueOfScopes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getPreviousRefreshToken())
        {
            binder << getValueOfPreviousRefreshToken();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value OauthAccessTokens::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getResourceOwnerId())
    {
        ret["resource_owner_id"]=(Json::Int64)getValueOfResourceOwnerId();
    }
    else
    {
        ret["resource_owner_id"]=Json::Value();
    }
    if(getApplicationId())
    {
        ret["application_id"]=(Json::Int64)getValueOfApplicationId();
    }
    else
    {
        ret["application_id"]=Json::Value();
    }
    if(getToken())
    {
        ret["token"]=getValueOfToken();
    }
    else
    {
        ret["token"]=Json::Value();
    }
    if(getRefreshToken())
    {
        ret["refresh_token"]=getValueOfRefreshToken();
    }
    else
    {
        ret["refresh_token"]=Json::Value();
    }
    if(getExpiresIn())
    {
        ret["expires_in"]=getValueOfExpiresIn();
    }
    else
    {
        ret["expires_in"]=Json::Value();
    }
    if(getRevokedAt())
    {
        ret["revoked_at"]=getRevokedAt()->toDbStringLocal();
    }
    else
    {
        ret["revoked_at"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getScopes())
    {
        ret["scopes"]=getValueOfScopes();
    }
    else
    {
        ret["scopes"]=Json::Value();
    }
    if(getPreviousRefreshToken())
    {
        ret["previous_refresh_token"]=getValueOfPreviousRefreshToken();
    }
    else
    {
        ret["previous_refresh_token"]=Json::Value();
    }
    return ret;
}
