/**
 *
 *  MeetingContentJournals.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MeetingContentJournals.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string MeetingContentJournals::Cols::_id = "id";
const std::string MeetingContentJournals::Cols::_journal_id = "journal_id";
const std::string MeetingContentJournals::Cols::_meeting_id = "meeting_id";
const std::string MeetingContentJournals::Cols::_author_id = "author_id";
const std::string MeetingContentJournals::Cols::_text = "text";
const std::string MeetingContentJournals::Cols::_locked = "locked";
const std::string MeetingContentJournals::primaryKeyName = "id";
const bool MeetingContentJournals::hasPrimaryKey = true;
const std::string MeetingContentJournals::tableName = "meeting_content_journals";

const std::vector<typename MeetingContentJournals::MetaData> MeetingContentJournals::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"journal_id","int32_t","integer",4,0,0,1},
{"meeting_id","int32_t","integer",4,0,0,0},
{"author_id","int32_t","integer",4,0,0,0},
{"text","std::string","text",0,0,0,0},
{"locked","bool","boolean",1,0,0,0}
};
const std::string &MeetingContentJournals::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
MeetingContentJournals::MeetingContentJournals(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["journal_id"].isNull())
        {
            _journalId=std::make_shared<int32_t>(r["journal_id"].as<int32_t>());
        }
        if(!r["meeting_id"].isNull())
        {
            _meetingId=std::make_shared<int32_t>(r["meeting_id"].as<int32_t>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["text"].isNull())
        {
            _text=std::make_shared<std::string>(r["text"].as<std::string>());
        }
        if(!r["locked"].isNull())
        {
            _locked=std::make_shared<bool>(r["locked"].as<bool>());
        }
}
const int32_t &MeetingContentJournals::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingContentJournals::getId() const noexcept
{
    return _id;
}
const typename MeetingContentJournals::PrimaryKeyType & MeetingContentJournals::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &MeetingContentJournals::getValueOfJournalId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_journalId)
        return *_journalId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingContentJournals::getJournalId() const noexcept
{
    return _journalId;
}
void MeetingContentJournals::setJournalId(const int32_t &pJournalId) noexcept
{
    _journalId = std::make_shared<int32_t>(pJournalId);
    _dirtyFlag[1] = true;
}


const int32_t &MeetingContentJournals::getValueOfMeetingId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_meetingId)
        return *_meetingId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingContentJournals::getMeetingId() const noexcept
{
    return _meetingId;
}
void MeetingContentJournals::setMeetingId(const int32_t &pMeetingId) noexcept
{
    _meetingId = std::make_shared<int32_t>(pMeetingId);
    _dirtyFlag[2] = true;
}


const int32_t &MeetingContentJournals::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MeetingContentJournals::getAuthorId() const noexcept
{
    return _authorId;
}
void MeetingContentJournals::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[3] = true;
}


const std::string &MeetingContentJournals::getValueOfText() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_text)
        return *_text;
    return defaultValue;
}
const std::shared_ptr<std::string> &MeetingContentJournals::getText() const noexcept
{
    return _text;
}
void MeetingContentJournals::setText(const std::string &pText) noexcept
{
    _text = std::make_shared<std::string>(pText);
    _dirtyFlag[4] = true;
}
void MeetingContentJournals::setText(std::string &&pText) noexcept
{
    _text = std::make_shared<std::string>(std::move(pText));
    _dirtyFlag[4] = true;
}


const bool &MeetingContentJournals::getValueOfLocked() const noexcept
{
    const static bool defaultValue = bool();
    if(_locked)
        return *_locked;
    return defaultValue;
}
const std::shared_ptr<bool> &MeetingContentJournals::getLocked() const noexcept
{
    return _locked;
}
void MeetingContentJournals::setLocked(const bool &pLocked) noexcept
{
    _locked = std::make_shared<bool>(pLocked);
    _dirtyFlag[5] = true;
}


void MeetingContentJournals::updateId(const uint64_t id)
{
}

const std::vector<std::string> &MeetingContentJournals::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "journal_id",
        "meeting_id",
        "author_id",
        "text",
        "locked"
    };
    return _inCols;
}

void MeetingContentJournals::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getJournalId())
    {
        binder << getValueOfJournalId();
    }
    else
    {
        binder << nullptr;
    }
    if(getMeetingId())
    {
        binder << getValueOfMeetingId();
    }
    else
    {
        binder << nullptr;
    }
    if(getAuthorId())
    {
        binder << getValueOfAuthorId();
    }
    else
    {
        binder << nullptr;
    }
    if(getText())
    {
        binder << getValueOfText();
    }
    else
    {
        binder << nullptr;
    }
    if(getLocked())
    {
        binder << getValueOfLocked();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> MeetingContentJournals::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void MeetingContentJournals::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getJournalId())
        {
            binder << getValueOfJournalId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getMeetingId())
        {
            binder << getValueOfMeetingId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getText())
        {
            binder << getValueOfText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getLocked())
        {
            binder << getValueOfLocked();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MeetingContentJournals::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getJournalId())
    {
        ret["journal_id"]=getValueOfJournalId();
    }
    else
    {
        ret["journal_id"]=Json::Value();
    }
    if(getMeetingId())
    {
        ret["meeting_id"]=getValueOfMeetingId();
    }
    else
    {
        ret["meeting_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getText())
    {
        ret["text"]=getValueOfText();
    }
    else
    {
        ret["text"]=Json::Value();
    }
    if(getLocked())
    {
        ret["locked"]=getValueOfLocked();
    }
    else
    {
        ret["locked"]=Json::Value();
    }
    return ret;
}
