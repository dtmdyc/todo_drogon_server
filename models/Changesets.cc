/**
 *
 *  Changesets.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Changesets.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string Changesets::Cols::_id = "id";
const std::string Changesets::Cols::_repository_id = "repository_id";
const std::string Changesets::Cols::_revision = "revision";
const std::string Changesets::Cols::_committer = "committer";
const std::string Changesets::Cols::_committed_on = "committed_on";
const std::string Changesets::Cols::_comments = "comments";
const std::string Changesets::Cols::_commit_date = "commit_date";
const std::string Changesets::Cols::_scmid = "scmid";
const std::string Changesets::Cols::_user_id = "user_id";
const std::string Changesets::primaryKeyName = "id";
const bool Changesets::hasPrimaryKey = true;
const std::string Changesets::tableName = "changesets";

const std::vector<typename Changesets::MetaData> Changesets::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"repository_id","int32_t","integer",4,0,0,1},
{"revision","std::string","character varying",0,0,0,1},
{"committer","std::string","character varying",0,0,0,0},
{"committed_on","::trantor::Date","timestamp without time zone",0,0,0,1},
{"comments","std::string","text",0,0,0,0},
{"commit_date","::trantor::Date","date",0,0,0,0},
{"scmid","std::string","character varying",0,0,0,0},
{"user_id","int32_t","integer",4,0,0,0}
};
const std::string &Changesets::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
Changesets::Changesets(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["repository_id"].isNull())
        {
            _repositoryId=std::make_shared<int32_t>(r["repository_id"].as<int32_t>());
        }
        if(!r["revision"].isNull())
        {
            _revision=std::make_shared<std::string>(r["revision"].as<std::string>());
        }
        if(!r["committer"].isNull())
        {
            _committer=std::make_shared<std::string>(r["committer"].as<std::string>());
        }
        if(!r["committed_on"].isNull())
        {
            auto timeStr = r["committed_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _committedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["comments"].isNull())
        {
            _comments=std::make_shared<std::string>(r["comments"].as<std::string>());
        }
        if(!r["commit_date"].isNull())
        {
            auto daysStr = r["commit_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _commitDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["scmid"].isNull())
        {
            _scmid=std::make_shared<std::string>(r["scmid"].as<std::string>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
}
const int32_t &Changesets::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Changesets::getId() const noexcept
{
    return _id;
}
const typename Changesets::PrimaryKeyType & Changesets::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &Changesets::getValueOfRepositoryId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_repositoryId)
        return *_repositoryId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Changesets::getRepositoryId() const noexcept
{
    return _repositoryId;
}
void Changesets::setRepositoryId(const int32_t &pRepositoryId) noexcept
{
    _repositoryId = std::make_shared<int32_t>(pRepositoryId);
    _dirtyFlag[1] = true;
}


const std::string &Changesets::getValueOfRevision() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_revision)
        return *_revision;
    return defaultValue;
}
const std::shared_ptr<std::string> &Changesets::getRevision() const noexcept
{
    return _revision;
}
void Changesets::setRevision(const std::string &pRevision) noexcept
{
    _revision = std::make_shared<std::string>(pRevision);
    _dirtyFlag[2] = true;
}
void Changesets::setRevision(std::string &&pRevision) noexcept
{
    _revision = std::make_shared<std::string>(std::move(pRevision));
    _dirtyFlag[2] = true;
}


const std::string &Changesets::getValueOfCommitter() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_committer)
        return *_committer;
    return defaultValue;
}
const std::shared_ptr<std::string> &Changesets::getCommitter() const noexcept
{
    return _committer;
}
void Changesets::setCommitter(const std::string &pCommitter) noexcept
{
    _committer = std::make_shared<std::string>(pCommitter);
    _dirtyFlag[3] = true;
}
void Changesets::setCommitter(std::string &&pCommitter) noexcept
{
    _committer = std::make_shared<std::string>(std::move(pCommitter));
    _dirtyFlag[3] = true;
}


const ::trantor::Date &Changesets::getValueOfCommittedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_committedOn)
        return *_committedOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Changesets::getCommittedOn() const noexcept
{
    return _committedOn;
}
void Changesets::setCommittedOn(const ::trantor::Date &pCommittedOn) noexcept
{
    _committedOn = std::make_shared<::trantor::Date>(pCommittedOn);
    _dirtyFlag[4] = true;
}


const std::string &Changesets::getValueOfComments() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_comments)
        return *_comments;
    return defaultValue;
}
const std::shared_ptr<std::string> &Changesets::getComments() const noexcept
{
    return _comments;
}
void Changesets::setComments(const std::string &pComments) noexcept
{
    _comments = std::make_shared<std::string>(pComments);
    _dirtyFlag[5] = true;
}
void Changesets::setComments(std::string &&pComments) noexcept
{
    _comments = std::make_shared<std::string>(std::move(pComments));
    _dirtyFlag[5] = true;
}


const ::trantor::Date &Changesets::getValueOfCommitDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_commitDate)
        return *_commitDate;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Changesets::getCommitDate() const noexcept
{
    return _commitDate;
}
void Changesets::setCommitDate(const ::trantor::Date &pCommitDate) noexcept
{
    _commitDate = std::make_shared<::trantor::Date>(pCommitDate.roundDay());
    _dirtyFlag[6] = true;
}


const std::string &Changesets::getValueOfScmid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_scmid)
        return *_scmid;
    return defaultValue;
}
const std::shared_ptr<std::string> &Changesets::getScmid() const noexcept
{
    return _scmid;
}
void Changesets::setScmid(const std::string &pScmid) noexcept
{
    _scmid = std::make_shared<std::string>(pScmid);
    _dirtyFlag[7] = true;
}
void Changesets::setScmid(std::string &&pScmid) noexcept
{
    _scmid = std::make_shared<std::string>(std::move(pScmid));
    _dirtyFlag[7] = true;
}


const int32_t &Changesets::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Changesets::getUserId() const noexcept
{
    return _userId;
}
void Changesets::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[8] = true;
}


void Changesets::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Changesets::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "repository_id",
        "revision",
        "committer",
        "committed_on",
        "comments",
        "commit_date",
        "scmid",
        "user_id"
    };
    return _inCols;
}

void Changesets::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getRepositoryId())
    {
        binder << getValueOfRepositoryId();
    }
    else
    {
        binder << nullptr;
    }
    if(getRevision())
    {
        binder << getValueOfRevision();
    }
    else
    {
        binder << nullptr;
    }
    if(getCommitter())
    {
        binder << getValueOfCommitter();
    }
    else
    {
        binder << nullptr;
    }
    if(getCommittedOn())
    {
        binder << getValueOfCommittedOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getComments())
    {
        binder << getValueOfComments();
    }
    else
    {
        binder << nullptr;
    }
    if(getCommitDate())
    {
        binder << getValueOfCommitDate();
    }
    else
    {
        binder << nullptr;
    }
    if(getScmid())
    {
        binder << getValueOfScmid();
    }
    else
    {
        binder << nullptr;
    }
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> Changesets::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void Changesets::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getRepositoryId())
        {
            binder << getValueOfRepositoryId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getRevision())
        {
            binder << getValueOfRevision();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getCommitter())
        {
            binder << getValueOfCommitter();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getCommittedOn())
        {
            binder << getValueOfCommittedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getComments())
        {
            binder << getValueOfComments();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getCommitDate())
        {
            binder << getValueOfCommitDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getScmid())
        {
            binder << getValueOfScmid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Changesets::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getRepositoryId())
    {
        ret["repository_id"]=getValueOfRepositoryId();
    }
    else
    {
        ret["repository_id"]=Json::Value();
    }
    if(getRevision())
    {
        ret["revision"]=getValueOfRevision();
    }
    else
    {
        ret["revision"]=Json::Value();
    }
    if(getCommitter())
    {
        ret["committer"]=getValueOfCommitter();
    }
    else
    {
        ret["committer"]=Json::Value();
    }
    if(getCommittedOn())
    {
        ret["committed_on"]=getCommittedOn()->toDbStringLocal();
    }
    else
    {
        ret["committed_on"]=Json::Value();
    }
    if(getComments())
    {
        ret["comments"]=getValueOfComments();
    }
    else
    {
        ret["comments"]=Json::Value();
    }
    if(getCommitDate())
    {
        ret["commit_date"]=getCommitDate()->toDbStringLocal();
    }
    else
    {
        ret["commit_date"]=Json::Value();
    }
    if(getScmid())
    {
        ret["scmid"]=getValueOfScmid();
    }
    else
    {
        ret["scmid"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    return ret;
}
