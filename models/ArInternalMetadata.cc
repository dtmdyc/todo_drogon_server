/**
 *
 *  ArInternalMetadata.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ArInternalMetadata.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string ArInternalMetadata::Cols::_key = "key";
const std::string ArInternalMetadata::Cols::_value = "value";
const std::string ArInternalMetadata::Cols::_created_at = "created_at";
const std::string ArInternalMetadata::Cols::_updated_at = "updated_at";
const std::string ArInternalMetadata::primaryKeyName = "key";
const bool ArInternalMetadata::hasPrimaryKey = true;
const std::string ArInternalMetadata::tableName = "ar_internal_metadata";

const std::vector<typename ArInternalMetadata::MetaData> ArInternalMetadata::_metaData={
{"key","std::string","character varying",0,0,1,1},
{"value","std::string","character varying",0,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &ArInternalMetadata::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
ArInternalMetadata::ArInternalMetadata(const Row &r) noexcept
{
        if(!r["key"].isNull())
        {
            _key=std::make_shared<std::string>(r["key"].as<std::string>());
        }
        if(!r["value"].isNull())
        {
            _value=std::make_shared<std::string>(r["value"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedAt=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
}
const std::string &ArInternalMetadata::getValueOfKey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_key)
        return *_key;
    return defaultValue;
}
const std::shared_ptr<std::string> &ArInternalMetadata::getKey() const noexcept
{
    return _key;
}
void ArInternalMetadata::setKey(const std::string &pKey) noexcept
{
    _key = std::make_shared<std::string>(pKey);
    _dirtyFlag[0] = true;
}
void ArInternalMetadata::setKey(std::string &&pKey) noexcept
{
    _key = std::make_shared<std::string>(std::move(pKey));
    _dirtyFlag[0] = true;
}

const typename ArInternalMetadata::PrimaryKeyType & ArInternalMetadata::getPrimaryKey() const
{
    assert(_key);
    return *_key;
}

const std::string &ArInternalMetadata::getValueOfValue() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_value)
        return *_value;
    return defaultValue;
}
const std::shared_ptr<std::string> &ArInternalMetadata::getValue() const noexcept
{
    return _value;
}
void ArInternalMetadata::setValue(const std::string &pValue) noexcept
{
    _value = std::make_shared<std::string>(pValue);
    _dirtyFlag[1] = true;
}
void ArInternalMetadata::setValue(std::string &&pValue) noexcept
{
    _value = std::make_shared<std::string>(std::move(pValue));
    _dirtyFlag[1] = true;
}


const ::trantor::Date &ArInternalMetadata::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdAt)
        return *_createdAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ArInternalMetadata::getCreatedAt() const noexcept
{
    return _createdAt;
}
void ArInternalMetadata::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    _createdAt = std::make_shared<::trantor::Date>(pCreatedAt);
    _dirtyFlag[2] = true;
}


const ::trantor::Date &ArInternalMetadata::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedAt)
        return *_updatedAt;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ArInternalMetadata::getUpdatedAt() const noexcept
{
    return _updatedAt;
}
void ArInternalMetadata::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    _updatedAt = std::make_shared<::trantor::Date>(pUpdatedAt);
    _dirtyFlag[3] = true;
}


void ArInternalMetadata::updateId(const uint64_t id)
{
}

const std::vector<std::string> &ArInternalMetadata::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "key",
        "value",
        "created_at",
        "updated_at"
    };
    return _inCols;
}

void ArInternalMetadata::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getKey())
    {
        binder << getValueOfKey();
    }
    else
    {
        binder << nullptr;
    }
    if(getValue())
    {
        binder << getValueOfValue();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedAt())
    {
        binder << getValueOfCreatedAt();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedAt())
    {
        binder << getValueOfUpdatedAt();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> ArInternalMetadata::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void ArInternalMetadata::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[0])
    {
        if(getKey())
        {
            binder << getValueOfKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[1])
    {
        if(getValue())
        {
            binder << getValueOfValue();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ArInternalMetadata::toJson() const
{
    Json::Value ret;
    if(getKey())
    {
        ret["key"]=getValueOfKey();
    }
    else
    {
        ret["key"]=Json::Value();
    }
    if(getValue())
    {
        ret["value"]=getValueOfValue();
    }
    else
    {
        ret["value"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}
