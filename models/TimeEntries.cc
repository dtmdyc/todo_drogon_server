/**
 *
 *  TimeEntries.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TimeEntries.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string TimeEntries::Cols::_id = "id";
const std::string TimeEntries::Cols::_project_id = "project_id";
const std::string TimeEntries::Cols::_user_id = "user_id";
const std::string TimeEntries::Cols::_work_package_id = "work_package_id";
const std::string TimeEntries::Cols::_hours = "hours";
const std::string TimeEntries::Cols::_comments = "comments";
const std::string TimeEntries::Cols::_activity_id = "activity_id";
const std::string TimeEntries::Cols::_spent_on = "spent_on";
const std::string TimeEntries::Cols::_tyear = "tyear";
const std::string TimeEntries::Cols::_tmonth = "tmonth";
const std::string TimeEntries::Cols::_tweek = "tweek";
const std::string TimeEntries::Cols::_created_on = "created_on";
const std::string TimeEntries::Cols::_updated_on = "updated_on";
const std::string TimeEntries::Cols::_overridden_costs = "overridden_costs";
const std::string TimeEntries::Cols::_costs = "costs";
const std::string TimeEntries::Cols::_rate_id = "rate_id";
const std::string TimeEntries::primaryKeyName = "id";
const bool TimeEntries::hasPrimaryKey = true;
const std::string TimeEntries::tableName = "time_entries";

const std::vector<typename TimeEntries::MetaData> TimeEntries::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"project_id","int32_t","integer",4,0,0,1},
{"user_id","int32_t","integer",4,0,0,1},
{"work_package_id","int32_t","integer",4,0,0,0},
{"hours","double","double precision",8,0,0,1},
{"comments","std::string","character varying",0,0,0,0},
{"activity_id","int32_t","integer",4,0,0,1},
{"spent_on","::trantor::Date","date",0,0,0,1},
{"tyear","int32_t","integer",4,0,0,1},
{"tmonth","int32_t","integer",4,0,0,1},
{"tweek","int32_t","integer",4,0,0,1},
{"created_on","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_on","::trantor::Date","timestamp without time zone",0,0,0,1},
{"overridden_costs","int64_t","numeric",8,0,0,0},
{"costs","int64_t","numeric",8,0,0,0},
{"rate_id","int32_t","integer",4,0,0,0}
};
const std::string &TimeEntries::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
TimeEntries::TimeEntries(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            _userId=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["work_package_id"].isNull())
        {
            _workPackageId=std::make_shared<int32_t>(r["work_package_id"].as<int32_t>());
        }
        if(!r["hours"].isNull())
        {
            _hours=std::make_shared<double>(r["hours"].as<double>());
        }
        if(!r["comments"].isNull())
        {
            _comments=std::make_shared<std::string>(r["comments"].as<std::string>());
        }
        if(!r["activity_id"].isNull())
        {
            _activityId=std::make_shared<int32_t>(r["activity_id"].as<int32_t>());
        }
        if(!r["spent_on"].isNull())
        {
            auto daysStr = r["spent_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _spentOn=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["tyear"].isNull())
        {
            _tyear=std::make_shared<int32_t>(r["tyear"].as<int32_t>());
        }
        if(!r["tmonth"].isNull())
        {
            _tmonth=std::make_shared<int32_t>(r["tmonth"].as<int32_t>());
        }
        if(!r["tweek"].isNull())
        {
            _tweek=std::make_shared<int32_t>(r["tweek"].as<int32_t>());
        }
        if(!r["created_on"].isNull())
        {
            auto timeStr = r["created_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_on"].isNull())
        {
            auto timeStr = r["updated_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["overridden_costs"].isNull())
        {
            _overriddenCosts=std::make_shared<int64_t>(r["overridden_costs"].as<int64_t>());
        }
        if(!r["costs"].isNull())
        {
            _costs=std::make_shared<int64_t>(r["costs"].as<int64_t>());
        }
        if(!r["rate_id"].isNull())
        {
            _rateId=std::make_shared<int32_t>(r["rate_id"].as<int32_t>());
        }
}
const int32_t &TimeEntries::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TimeEntries::getId() const noexcept
{
    return _id;
}
const typename TimeEntries::PrimaryKeyType & TimeEntries::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &TimeEntries::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TimeEntries::getProjectId() const noexcept
{
    return _projectId;
}
void TimeEntries::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[1] = true;
}


const int32_t &TimeEntries::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_userId)
        return *_userId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TimeEntries::getUserId() const noexcept
{
    return _userId;
}
void TimeEntries::setUserId(const int32_t &pUserId) noexcept
{
    _userId = std::make_shared<int32_t>(pUserId);
    _dirtyFlag[2] = true;
}


const int32_t &TimeEntries::getValueOfWorkPackageId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_workPackageId)
        return *_workPackageId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TimeEntries::getWorkPackageId() const noexcept
{
    return _workPackageId;
}
void TimeEntries::setWorkPackageId(const int32_t &pWorkPackageId) noexcept
{
    _workPackageId = std::make_shared<int32_t>(pWorkPackageId);
    _dirtyFlag[3] = true;
}


const double &TimeEntries::getValueOfHours() const noexcept
{
    const static double defaultValue = double();
    if(_hours)
        return *_hours;
    return defaultValue;
}
const std::shared_ptr<double> &TimeEntries::getHours() const noexcept
{
    return _hours;
}
void TimeEntries::setHours(const double &pHours) noexcept
{
    _hours = std::make_shared<double>(pHours);
    _dirtyFlag[4] = true;
}


const std::string &TimeEntries::getValueOfComments() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_comments)
        return *_comments;
    return defaultValue;
}
const std::shared_ptr<std::string> &TimeEntries::getComments() const noexcept
{
    return _comments;
}
void TimeEntries::setComments(const std::string &pComments) noexcept
{
    _comments = std::make_shared<std::string>(pComments);
    _dirtyFlag[5] = true;
}
void TimeEntries::setComments(std::string &&pComments) noexcept
{
    _comments = std::make_shared<std::string>(std::move(pComments));
    _dirtyFlag[5] = true;
}


const int32_t &TimeEntries::getValueOfActivityId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_activityId)
        return *_activityId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TimeEntries::getActivityId() const noexcept
{
    return _activityId;
}
void TimeEntries::setActivityId(const int32_t &pActivityId) noexcept
{
    _activityId = std::make_shared<int32_t>(pActivityId);
    _dirtyFlag[6] = true;
}


const ::trantor::Date &TimeEntries::getValueOfSpentOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_spentOn)
        return *_spentOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TimeEntries::getSpentOn() const noexcept
{
    return _spentOn;
}
void TimeEntries::setSpentOn(const ::trantor::Date &pSpentOn) noexcept
{
    _spentOn = std::make_shared<::trantor::Date>(pSpentOn.roundDay());
    _dirtyFlag[7] = true;
}


const int32_t &TimeEntries::getValueOfTyear() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_tyear)
        return *_tyear;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TimeEntries::getTyear() const noexcept
{
    return _tyear;
}
void TimeEntries::setTyear(const int32_t &pTyear) noexcept
{
    _tyear = std::make_shared<int32_t>(pTyear);
    _dirtyFlag[8] = true;
}


const int32_t &TimeEntries::getValueOfTmonth() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_tmonth)
        return *_tmonth;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TimeEntries::getTmonth() const noexcept
{
    return _tmonth;
}
void TimeEntries::setTmonth(const int32_t &pTmonth) noexcept
{
    _tmonth = std::make_shared<int32_t>(pTmonth);
    _dirtyFlag[9] = true;
}


const int32_t &TimeEntries::getValueOfTweek() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_tweek)
        return *_tweek;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TimeEntries::getTweek() const noexcept
{
    return _tweek;
}
void TimeEntries::setTweek(const int32_t &pTweek) noexcept
{
    _tweek = std::make_shared<int32_t>(pTweek);
    _dirtyFlag[10] = true;
}


const ::trantor::Date &TimeEntries::getValueOfCreatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdOn)
        return *_createdOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TimeEntries::getCreatedOn() const noexcept
{
    return _createdOn;
}
void TimeEntries::setCreatedOn(const ::trantor::Date &pCreatedOn) noexcept
{
    _createdOn = std::make_shared<::trantor::Date>(pCreatedOn);
    _dirtyFlag[11] = true;
}


const ::trantor::Date &TimeEntries::getValueOfUpdatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedOn)
        return *_updatedOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TimeEntries::getUpdatedOn() const noexcept
{
    return _updatedOn;
}
void TimeEntries::setUpdatedOn(const ::trantor::Date &pUpdatedOn) noexcept
{
    _updatedOn = std::make_shared<::trantor::Date>(pUpdatedOn);
    _dirtyFlag[12] = true;
}


const int64_t &TimeEntries::getValueOfOverriddenCosts() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_overriddenCosts)
        return *_overriddenCosts;
    return defaultValue;
}
const std::shared_ptr<int64_t> &TimeEntries::getOverriddenCosts() const noexcept
{
    return _overriddenCosts;
}
void TimeEntries::setOverriddenCosts(const int64_t &pOverriddenCosts) noexcept
{
    _overriddenCosts = std::make_shared<int64_t>(pOverriddenCosts);
    _dirtyFlag[13] = true;
}


const int64_t &TimeEntries::getValueOfCosts() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(_costs)
        return *_costs;
    return defaultValue;
}
const std::shared_ptr<int64_t> &TimeEntries::getCosts() const noexcept
{
    return _costs;
}
void TimeEntries::setCosts(const int64_t &pCosts) noexcept
{
    _costs = std::make_shared<int64_t>(pCosts);
    _dirtyFlag[14] = true;
}


const int32_t &TimeEntries::getValueOfRateId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_rateId)
        return *_rateId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TimeEntries::getRateId() const noexcept
{
    return _rateId;
}
void TimeEntries::setRateId(const int32_t &pRateId) noexcept
{
    _rateId = std::make_shared<int32_t>(pRateId);
    _dirtyFlag[15] = true;
}


void TimeEntries::updateId(const uint64_t id)
{
}

const std::vector<std::string> &TimeEntries::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "project_id",
        "user_id",
        "work_package_id",
        "hours",
        "comments",
        "activity_id",
        "spent_on",
        "tyear",
        "tmonth",
        "tweek",
        "created_on",
        "updated_on",
        "overridden_costs",
        "costs",
        "rate_id"
    };
    return _inCols;
}

void TimeEntries::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getUserId())
    {
        binder << getValueOfUserId();
    }
    else
    {
        binder << nullptr;
    }
    if(getWorkPackageId())
    {
        binder << getValueOfWorkPackageId();
    }
    else
    {
        binder << nullptr;
    }
    if(getHours())
    {
        binder << getValueOfHours();
    }
    else
    {
        binder << nullptr;
    }
    if(getComments())
    {
        binder << getValueOfComments();
    }
    else
    {
        binder << nullptr;
    }
    if(getActivityId())
    {
        binder << getValueOfActivityId();
    }
    else
    {
        binder << nullptr;
    }
    if(getSpentOn())
    {
        binder << getValueOfSpentOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getTyear())
    {
        binder << getValueOfTyear();
    }
    else
    {
        binder << nullptr;
    }
    if(getTmonth())
    {
        binder << getValueOfTmonth();
    }
    else
    {
        binder << nullptr;
    }
    if(getTweek())
    {
        binder << getValueOfTweek();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedOn())
    {
        binder << getValueOfCreatedOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedOn())
    {
        binder << getValueOfUpdatedOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getOverriddenCosts())
    {
        binder << getValueOfOverriddenCosts();
    }
    else
    {
        binder << nullptr;
    }
    if(getCosts())
    {
        binder << getValueOfCosts();
    }
    else
    {
        binder << nullptr;
    }
    if(getRateId())
    {
        binder << getValueOfRateId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> TimeEntries::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void TimeEntries::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getWorkPackageId())
        {
            binder << getValueOfWorkPackageId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getHours())
        {
            binder << getValueOfHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getComments())
        {
            binder << getValueOfComments();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getActivityId())
        {
            binder << getValueOfActivityId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getSpentOn())
        {
            binder << getValueOfSpentOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getTyear())
        {
            binder << getValueOfTyear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[9])
    {
        if(getTmonth())
        {
            binder << getValueOfTmonth();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[10])
    {
        if(getTweek())
        {
            binder << getValueOfTweek();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[11])
    {
        if(getCreatedOn())
        {
            binder << getValueOfCreatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[12])
    {
        if(getUpdatedOn())
        {
            binder << getValueOfUpdatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[13])
    {
        if(getOverriddenCosts())
        {
            binder << getValueOfOverriddenCosts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[14])
    {
        if(getCosts())
        {
            binder << getValueOfCosts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[15])
    {
        if(getRateId())
        {
            binder << getValueOfRateId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TimeEntries::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getWorkPackageId())
    {
        ret["work_package_id"]=getValueOfWorkPackageId();
    }
    else
    {
        ret["work_package_id"]=Json::Value();
    }
    if(getHours())
    {
        ret["hours"]=getValueOfHours();
    }
    else
    {
        ret["hours"]=Json::Value();
    }
    if(getComments())
    {
        ret["comments"]=getValueOfComments();
    }
    else
    {
        ret["comments"]=Json::Value();
    }
    if(getActivityId())
    {
        ret["activity_id"]=getValueOfActivityId();
    }
    else
    {
        ret["activity_id"]=Json::Value();
    }
    if(getSpentOn())
    {
        ret["spent_on"]=getSpentOn()->toDbStringLocal();
    }
    else
    {
        ret["spent_on"]=Json::Value();
    }
    if(getTyear())
    {
        ret["tyear"]=getValueOfTyear();
    }
    else
    {
        ret["tyear"]=Json::Value();
    }
    if(getTmonth())
    {
        ret["tmonth"]=getValueOfTmonth();
    }
    else
    {
        ret["tmonth"]=Json::Value();
    }
    if(getTweek())
    {
        ret["tweek"]=getValueOfTweek();
    }
    else
    {
        ret["tweek"]=Json::Value();
    }
    if(getCreatedOn())
    {
        ret["created_on"]=getCreatedOn()->toDbStringLocal();
    }
    else
    {
        ret["created_on"]=Json::Value();
    }
    if(getUpdatedOn())
    {
        ret["updated_on"]=getUpdatedOn()->toDbStringLocal();
    }
    else
    {
        ret["updated_on"]=Json::Value();
    }
    if(getOverriddenCosts())
    {
        ret["overridden_costs"]=(Json::Int64)getValueOfOverriddenCosts();
    }
    else
    {
        ret["overridden_costs"]=Json::Value();
    }
    if(getCosts())
    {
        ret["costs"]=(Json::Int64)getValueOfCosts();
    }
    else
    {
        ret["costs"]=Json::Value();
    }
    if(getRateId())
    {
        ret["rate_id"]=getValueOfRateId();
    }
    else
    {
        ret["rate_id"]=Json::Value();
    }
    return ret;
}
