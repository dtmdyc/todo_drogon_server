/**
 *
 *  CostObjects.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "CostObjects.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string CostObjects::Cols::_id = "id";
const std::string CostObjects::Cols::_project_id = "project_id";
const std::string CostObjects::Cols::_author_id = "author_id";
const std::string CostObjects::Cols::_subject = "subject";
const std::string CostObjects::Cols::_description = "description";
const std::string CostObjects::Cols::_type = "type";
const std::string CostObjects::Cols::_fixed_date = "fixed_date";
const std::string CostObjects::Cols::_created_on = "created_on";
const std::string CostObjects::Cols::_updated_on = "updated_on";
const std::string CostObjects::primaryKeyName = "id";
const bool CostObjects::hasPrimaryKey = true;
const std::string CostObjects::tableName = "cost_objects";

const std::vector<typename CostObjects::MetaData> CostObjects::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"project_id","int32_t","integer",4,0,0,1},
{"author_id","int32_t","integer",4,0,0,1},
{"subject","std::string","character varying",0,0,0,1},
{"description","std::string","text",0,0,0,1},
{"type","std::string","character varying",0,0,0,1},
{"fixed_date","::trantor::Date","date",0,0,0,1},
{"created_on","::trantor::Date","timestamp without time zone",0,0,0,0},
{"updated_on","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &CostObjects::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
CostObjects::CostObjects(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["author_id"].isNull())
        {
            _authorId=std::make_shared<int32_t>(r["author_id"].as<int32_t>());
        }
        if(!r["subject"].isNull())
        {
            _subject=std::make_shared<std::string>(r["subject"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            _description=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["type"].isNull())
        {
            _type=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["fixed_date"].isNull())
        {
            auto daysStr = r["fixed_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _fixedDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["created_on"].isNull())
        {
            auto timeStr = r["created_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["updated_on"].isNull())
        {
            auto timeStr = r["updated_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _projectId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _authorId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _subject=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            _description=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            _type=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            long t = timelocal(&stm);
            _fixedDate=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }

}

CostObjects::CostObjects(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _projectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _subject=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _description=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _type=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        auto daysStr = pJson[pMasqueradingVector[6]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
        long t = timelocal(&stm);
        _fixedDate=std::make_shared<::trantor::Date>(t*1000000);
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        auto timeStr = pJson[pMasqueradingVector[7]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        auto timeStr = pJson[pMasqueradingVector[8]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}

CostObjects::CostObjects(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("project_id"))
    {
        _projectId=std::make_shared<int32_t>((int32_t)pJson["project_id"].asInt64());
    }
    if(pJson.isMember("author_id"))
    {
        _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
    }
    if(pJson.isMember("subject"))
    {
        _subject=std::make_shared<std::string>(pJson["subject"].asString());
    }
    if(pJson.isMember("description"))
    {
        _description=std::make_shared<std::string>(pJson["description"].asString());
    }
    if(pJson.isMember("type"))
    {
        _type=std::make_shared<std::string>(pJson["type"].asString());
    }
    if(pJson.isMember("fixed_date"))
    {
        auto daysStr = pJson["fixed_date"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
        long t = timelocal(&stm);
        _fixedDate=std::make_shared<::trantor::Date>(t*1000000);
    }
    if(pJson.isMember("created_on"))
    {
        auto timeStr = pJson["created_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("updated_on"))
    {
        auto timeStr = pJson["updated_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}

void CostObjects::updateByMasqueradedJson(const Json::Value &pJson, 
                                                                                                     const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        _projectId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        _authorId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        _subject=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        _description=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        _dirtyFlag[5] = true;
        _type=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        _dirtyFlag[6] = true;
        auto daysStr = pJson[pMasqueradingVector[6]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
        long t = timelocal(&stm);
        _fixedDate=std::make_shared<::trantor::Date>(t*1000000);
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        _dirtyFlag[7] = true;
        auto timeStr = pJson[pMasqueradingVector[7]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        _dirtyFlag[8] = true;
        auto timeStr = pJson[pMasqueradingVector[8]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}
                                                                    
void CostObjects::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("project_id"))
    {
        _dirtyFlag[1] = true;
        _projectId=std::make_shared<int32_t>((int32_t)pJson["project_id"].asInt64());
    }
    if(pJson.isMember("author_id"))
    {
        _dirtyFlag[2] = true;
        _authorId=std::make_shared<int32_t>((int32_t)pJson["author_id"].asInt64());
    }
    if(pJson.isMember("subject"))
    {
        _dirtyFlag[3] = true;
        _subject=std::make_shared<std::string>(pJson["subject"].asString());
    }
    if(pJson.isMember("description"))
    {
        _dirtyFlag[4] = true;
        _description=std::make_shared<std::string>(pJson["description"].asString());
    }
    if(pJson.isMember("type"))
    {
        _dirtyFlag[5] = true;
        _type=std::make_shared<std::string>(pJson["type"].asString());
    }
    if(pJson.isMember("fixed_date"))
    {
        _dirtyFlag[6] = true;
        auto daysStr = pJson["fixed_date"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
        long t = timelocal(&stm);
        _fixedDate=std::make_shared<::trantor::Date>(t*1000000);
    }
    if(pJson.isMember("created_on"))
    {
        _dirtyFlag[7] = true;
        auto timeStr = pJson["created_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
    if(pJson.isMember("updated_on"))
    {
        _dirtyFlag[8] = true;
        auto timeStr = pJson["updated_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _updatedOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}

const int32_t &CostObjects::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CostObjects::getId() const noexcept
{
    return _id;
}
const typename CostObjects::PrimaryKeyType & CostObjects::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &CostObjects::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CostObjects::getProjectId() const noexcept
{
    return _projectId;
}
void CostObjects::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[1] = true;
}


const int32_t &CostObjects::getValueOfAuthorId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_authorId)
        return *_authorId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &CostObjects::getAuthorId() const noexcept
{
    return _authorId;
}
void CostObjects::setAuthorId(const int32_t &pAuthorId) noexcept
{
    _authorId = std::make_shared<int32_t>(pAuthorId);
    _dirtyFlag[2] = true;
}


const std::string &CostObjects::getValueOfSubject() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_subject)
        return *_subject;
    return defaultValue;
}
const std::shared_ptr<std::string> &CostObjects::getSubject() const noexcept
{
    return _subject;
}
void CostObjects::setSubject(const std::string &pSubject) noexcept
{
    _subject = std::make_shared<std::string>(pSubject);
    _dirtyFlag[3] = true;
}
void CostObjects::setSubject(std::string &&pSubject) noexcept
{
    _subject = std::make_shared<std::string>(std::move(pSubject));
    _dirtyFlag[3] = true;
}


const std::string &CostObjects::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_description)
        return *_description;
    return defaultValue;
}
const std::shared_ptr<std::string> &CostObjects::getDescription() const noexcept
{
    return _description;
}
void CostObjects::setDescription(const std::string &pDescription) noexcept
{
    _description = std::make_shared<std::string>(pDescription);
    _dirtyFlag[4] = true;
}
void CostObjects::setDescription(std::string &&pDescription) noexcept
{
    _description = std::make_shared<std::string>(std::move(pDescription));
    _dirtyFlag[4] = true;
}


const std::string &CostObjects::getValueOfType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_type)
        return *_type;
    return defaultValue;
}
const std::shared_ptr<std::string> &CostObjects::getType() const noexcept
{
    return _type;
}
void CostObjects::setType(const std::string &pType) noexcept
{
    _type = std::make_shared<std::string>(pType);
    _dirtyFlag[5] = true;
}
void CostObjects::setType(std::string &&pType) noexcept
{
    _type = std::make_shared<std::string>(std::move(pType));
    _dirtyFlag[5] = true;
}


const ::trantor::Date &CostObjects::getValueOfFixedDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_fixedDate)
        return *_fixedDate;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &CostObjects::getFixedDate() const noexcept
{
    return _fixedDate;
}
void CostObjects::setFixedDate(const ::trantor::Date &pFixedDate) noexcept
{
    _fixedDate = std::make_shared<::trantor::Date>(pFixedDate.roundDay());
    _dirtyFlag[6] = true;
}


const ::trantor::Date &CostObjects::getValueOfCreatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdOn)
        return *_createdOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &CostObjects::getCreatedOn() const noexcept
{
    return _createdOn;
}
void CostObjects::setCreatedOn(const ::trantor::Date &pCreatedOn) noexcept
{
    _createdOn = std::make_shared<::trantor::Date>(pCreatedOn);
    _dirtyFlag[7] = true;
}


const ::trantor::Date &CostObjects::getValueOfUpdatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_updatedOn)
        return *_updatedOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &CostObjects::getUpdatedOn() const noexcept
{
    return _updatedOn;
}
void CostObjects::setUpdatedOn(const ::trantor::Date &pUpdatedOn) noexcept
{
    _updatedOn = std::make_shared<::trantor::Date>(pUpdatedOn);
    _dirtyFlag[8] = true;
}


void CostObjects::updateId(const uint64_t id)
{
}

const std::vector<std::string> &CostObjects::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "project_id",
        "author_id",
        "subject",
        "description",
        "type",
        "fixed_date",
        "created_on",
        "updated_on"
    };
    return _inCols;
}

void CostObjects::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getAuthorId())
    {
        binder << getValueOfAuthorId();
    }
    else
    {
        binder << nullptr;
    }
    if(getSubject())
    {
        binder << getValueOfSubject();
    }
    else
    {
        binder << nullptr;
    }
    if(getDescription())
    {
        binder << getValueOfDescription();
    }
    else
    {
        binder << nullptr;
    }
    if(getType())
    {
        binder << getValueOfType();
    }
    else
    {
        binder << nullptr;
    }
    if(getFixedDate())
    {
        binder << getValueOfFixedDate();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedOn())
    {
        binder << getValueOfCreatedOn();
    }
    else
    {
        binder << nullptr;
    }
    if(getUpdatedOn())
    {
        binder << getValueOfUpdatedOn();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> CostObjects::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void CostObjects::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getAuthorId())
        {
            binder << getValueOfAuthorId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getSubject())
        {
            binder << getValueOfSubject();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[5])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[6])
    {
        if(getFixedDate())
        {
            binder << getValueOfFixedDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[7])
    {
        if(getCreatedOn())
        {
            binder << getValueOfCreatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[8])
    {
        if(getUpdatedOn())
        {
            binder << getValueOfUpdatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value CostObjects::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getFixedDate())
    {
        ret["fixed_date"]=getFixedDate()->toDbStringLocal();
    }
    else
    {
        ret["fixed_date"]=Json::Value();
    }
    if(getCreatedOn())
    {
        ret["created_on"]=getCreatedOn()->toDbStringLocal();
    }
    else
    {
        ret["created_on"]=Json::Value();
    }
    if(getUpdatedOn())
    {
        ret["updated_on"]=getUpdatedOn()->toDbStringLocal();
    }
    else
    {
        ret["updated_on"]=Json::Value();
    }
    return ret;
}

Json::Value CostObjects::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getProjectId())
            {
                ret[pMasqueradingVector[1]]=getValueOfProjectId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAuthorId())
            {
                ret[pMasqueradingVector[2]]=getValueOfAuthorId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSubject())
            {
                ret[pMasqueradingVector[3]]=getValueOfSubject();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[4]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[5]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getFixedDate())
            {
                ret[pMasqueradingVector[6]]=getFixedDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCreatedOn())
            {
                ret[pMasqueradingVector[7]]=getCreatedOn()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUpdatedOn())
            {
                ret[pMasqueradingVector[8]]=getUpdatedOn()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getAuthorId())
    {
        ret["author_id"]=getValueOfAuthorId();
    }
    else
    {
        ret["author_id"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getFixedDate())
    {
        ret["fixed_date"]=getFixedDate()->toDbStringLocal();
    }
    else
    {
        ret["fixed_date"]=Json::Value();
    }
    if(getCreatedOn())
    {
        ret["created_on"]=getCreatedOn()->toDbStringLocal();
    }
    else
    {
        ret["created_on"]=Json::Value();
    }
    if(getUpdatedOn())
    {
        ret["updated_on"]=getUpdatedOn()->toDbStringLocal();
    }
    else
    {
        ret["updated_on"]=Json::Value();
    }
    return ret;
}
