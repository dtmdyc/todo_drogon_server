/**
 *
 *  WebhooksProjects.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "WebhooksProjects.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string WebhooksProjects::Cols::_id = "id";
const std::string WebhooksProjects::Cols::_project_id = "project_id";
const std::string WebhooksProjects::Cols::_webhooks_webhook_id = "webhooks_webhook_id";
const std::string WebhooksProjects::primaryKeyName = "id";
const bool WebhooksProjects::hasPrimaryKey = true;
const std::string WebhooksProjects::tableName = "webhooks_projects";

const std::vector<typename WebhooksProjects::MetaData> WebhooksProjects::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"project_id","int32_t","integer",4,0,0,0},
{"webhooks_webhook_id","int32_t","integer",4,0,0,0}
};
const std::string &WebhooksProjects::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
WebhooksProjects::WebhooksProjects(const Row &r) noexcept
{
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["project_id"].isNull())
        {
            _projectId=std::make_shared<int32_t>(r["project_id"].as<int32_t>());
        }
        if(!r["webhooks_webhook_id"].isNull())
        {
            _webhooksWebhookId=std::make_shared<int32_t>(r["webhooks_webhook_id"].as<int32_t>());
        }
}
const int32_t &WebhooksProjects::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WebhooksProjects::getId() const noexcept
{
    return _id;
}
const typename WebhooksProjects::PrimaryKeyType & WebhooksProjects::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &WebhooksProjects::getValueOfProjectId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_projectId)
        return *_projectId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WebhooksProjects::getProjectId() const noexcept
{
    return _projectId;
}
void WebhooksProjects::setProjectId(const int32_t &pProjectId) noexcept
{
    _projectId = std::make_shared<int32_t>(pProjectId);
    _dirtyFlag[1] = true;
}


const int32_t &WebhooksProjects::getValueOfWebhooksWebhookId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_webhooksWebhookId)
        return *_webhooksWebhookId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WebhooksProjects::getWebhooksWebhookId() const noexcept
{
    return _webhooksWebhookId;
}
void WebhooksProjects::setWebhooksWebhookId(const int32_t &pWebhooksWebhookId) noexcept
{
    _webhooksWebhookId = std::make_shared<int32_t>(pWebhooksWebhookId);
    _dirtyFlag[2] = true;
}


void WebhooksProjects::updateId(const uint64_t id)
{
}

const std::vector<std::string> &WebhooksProjects::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "project_id",
        "webhooks_webhook_id"
    };
    return _inCols;
}

void WebhooksProjects::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getProjectId())
    {
        binder << getValueOfProjectId();
    }
    else
    {
        binder << nullptr;
    }
    if(getWebhooksWebhookId())
    {
        binder << getValueOfWebhooksWebhookId();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> WebhooksProjects::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void WebhooksProjects::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getWebhooksWebhookId())
        {
            binder << getValueOfWebhooksWebhookId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value WebhooksProjects::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getWebhooksWebhookId())
    {
        ret["webhooks_webhook_id"]=getValueOfWebhooksWebhookId();
    }
    else
    {
        ret["webhooks_webhook_id"]=Json::Value();
    }
    return ret;
}
