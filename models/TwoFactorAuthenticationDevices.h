/**
 *
 *  TwoFactorAuthenticationDevices.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace openproject6 
{
class TwoFactorAuthenticationDevices
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _type;
        static const std::string _default;
        static const std::string _active;
        static const std::string _channel;
        static const std::string _phone_number;
        static const std::string _identifier;
        static const std::string _created_at;
        static const std::string _updated_at;
        static const std::string _last_used_at;
        static const std::string _otp_secret;
        static const std::string _user_id;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    typedef int32_t PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit TwoFactorAuthenticationDevices(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit TwoFactorAuthenticationDevices(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    TwoFactorAuthenticationDevices(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    TwoFactorAuthenticationDevices() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    bool validateMasqueradedJsonForCreation(const Json::Value &,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err);
    bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;

    /**  For column type  */
    ///Get the value of the column type, returns the default value if the column is null
    const std::string &getValueOfType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getType() const noexcept;
    ///Set the value of the column type
    void setType(const std::string &pType) noexcept;
    void setType(std::string &&pType) noexcept;

    /**  For column default  */
    ///Get the value of the column default, returns the default value if the column is null
    const bool &getValueOfDefault() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getDefault() const noexcept;
    ///Set the value of the column default
    void setDefault(const bool &pDefault) noexcept;

    /**  For column active  */
    ///Get the value of the column active, returns the default value if the column is null
    const bool &getValueOfActive() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getActive() const noexcept;
    ///Set the value of the column active
    void setActive(const bool &pActive) noexcept;

    /**  For column channel  */
    ///Get the value of the column channel, returns the default value if the column is null
    const std::string &getValueOfChannel() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getChannel() const noexcept;
    ///Set the value of the column channel
    void setChannel(const std::string &pChannel) noexcept;
    void setChannel(std::string &&pChannel) noexcept;

    /**  For column phone_number  */
    ///Get the value of the column phone_number, returns the default value if the column is null
    const std::string &getValueOfPhoneNumber() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPhoneNumber() const noexcept;
    ///Set the value of the column phone_number
    void setPhoneNumber(const std::string &pPhoneNumber) noexcept;
    void setPhoneNumber(std::string &&pPhoneNumber) noexcept;

    /**  For column identifier  */
    ///Get the value of the column identifier, returns the default value if the column is null
    const std::string &getValueOfIdentifier() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIdentifier() const noexcept;
    ///Set the value of the column identifier
    void setIdentifier(const std::string &pIdentifier) noexcept;
    void setIdentifier(std::string &&pIdentifier) noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;

    /**  For column last_used_at  */
    ///Get the value of the column last_used_at, returns the default value if the column is null
    const int32_t &getValueOfLastUsedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getLastUsedAt() const noexcept;
    ///Set the value of the column last_used_at
    void setLastUsedAt(const int32_t &pLastUsedAt) noexcept;

    /**  For column otp_secret  */
    ///Get the value of the column otp_secret, returns the default value if the column is null
    const std::string &getValueOfOtpSecret() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getOtpSecret() const noexcept;
    ///Set the value of the column otp_secret
    void setOtpSecret(const std::string &pOtpSecret) noexcept;
    void setOtpSecret(std::string &&pOtpSecret) noexcept;

    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const int32_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getUserId() const noexcept;
    ///Set the value of the column user_id
    void setUserId(const int32_t &pUserId) noexcept;


    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;

  private:
    friend Mapper<TwoFactorAuthenticationDevices>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> _id;
    std::shared_ptr<std::string> _type;
    std::shared_ptr<bool> _default;
    std::shared_ptr<bool> _active;
    std::shared_ptr<std::string> _channel;
    std::shared_ptr<std::string> _phoneNumber;
    std::shared_ptr<std::string> _identifier;
    std::shared_ptr<::trantor::Date> _createdAt;
    std::shared_ptr<::trantor::Date> _updatedAt;
    std::shared_ptr<int32_t> _lastUsedAt;
    std::shared_ptr<std::string> _otpSecret;
    std::shared_ptr<int32_t> _userId;
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[12]={ false };

  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = $1";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = $1";
        return sql;                   
    }

    static const std::string &sqlForInserting()
    {
        static const std::string sql="insert into " + tableName + " (type,default,active,channel,phone_number,identifier,created_at,updated_at,last_used_at,otp_secret,user_id) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) returning *";
        return sql;   
    }
};
} // namespace openproject6
} // namespace drogon_model
