/**
 *
 *  WikiRedirects.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "WikiRedirects.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::openproject4;

const std::string WikiRedirects::Cols::_id = "id";
const std::string WikiRedirects::Cols::_wiki_id = "wiki_id";
const std::string WikiRedirects::Cols::_title = "title";
const std::string WikiRedirects::Cols::_redirects_to = "redirects_to";
const std::string WikiRedirects::Cols::_created_on = "created_on";
const std::string WikiRedirects::primaryKeyName = "id";
const bool WikiRedirects::hasPrimaryKey = true;
const std::string WikiRedirects::tableName = "wiki_redirects";

const std::vector<typename WikiRedirects::MetaData> WikiRedirects::_metaData={
{"id","int32_t","integer",4,1,1,1},
{"wiki_id","int32_t","integer",4,0,0,1},
{"title","std::string","character varying",0,0,0,0},
{"redirects_to","std::string","character varying",0,0,0,0},
{"created_on","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &WikiRedirects::getColumnName(size_t index) noexcept(false)
{
    assert(index < _metaData.size());
    return _metaData[index]._colName;
}
WikiRedirects::WikiRedirects(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            _id=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["wiki_id"].isNull())
        {
            _wikiId=std::make_shared<int32_t>(r["wiki_id"].as<int32_t>());
        }
        if(!r["title"].isNull())
        {
            _title=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["redirects_to"].isNull())
        {
            _redirectsTo=std::make_shared<std::string>(r["redirects_to"].as<std::string>());
        }
        if(!r["created_on"].isNull())
        {
            auto timeStr = r["created_on"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            _id=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            _wikiId=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            _title=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            _redirectsTo=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = timelocal(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }

}

WikiRedirects::WikiRedirects(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _wikiId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _title=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _redirectsTo=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        auto timeStr = pJson[pMasqueradingVector[4]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}

WikiRedirects::WikiRedirects(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("wiki_id"))
    {
        _wikiId=std::make_shared<int32_t>((int32_t)pJson["wiki_id"].asInt64());
    }
    if(pJson.isMember("title"))
    {
        _title=std::make_shared<std::string>(pJson["title"].asString());
    }
    if(pJson.isMember("redirects_to"))
    {
        _redirectsTo=std::make_shared<std::string>(pJson["redirects_to"].asString());
    }
    if(pJson.isMember("created_on"))
    {
        auto timeStr = pJson["created_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}

void WikiRedirects::updateByMasqueradedJson(const Json::Value &pJson, 
                                                                                                     const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        _dirtyFlag[1] = true;
        _wikiId=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        _dirtyFlag[2] = true;
        _title=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        _dirtyFlag[3] = true;
        _redirectsTo=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        _dirtyFlag[4] = true;
        auto timeStr = pJson[pMasqueradingVector[4]].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}
                                                                    
void WikiRedirects::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        _id=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
    }
    if(pJson.isMember("wiki_id"))
    {
        _dirtyFlag[1] = true;
        _wikiId=std::make_shared<int32_t>((int32_t)pJson["wiki_id"].asInt64());
    }
    if(pJson.isMember("title"))
    {
        _dirtyFlag[2] = true;
        _title=std::make_shared<std::string>(pJson["title"].asString());
    }
    if(pJson.isMember("redirects_to"))
    {
        _dirtyFlag[3] = true;
        _redirectsTo=std::make_shared<std::string>(pJson["redirects_to"].asString());
    }
    if(pJson.isMember("created_on"))
    {
        _dirtyFlag[4] = true;
        auto timeStr = pJson["created_on"].asString();
        struct tm stm;
        memset(&stm,0,sizeof(stm));
        auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
        size_t t = timelocal(&stm);
        size_t decimalNum = 0;
        if(*p=='.')
        {
            std::string decimals(p+1,&timeStr[timeStr.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }
        _createdOn=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
    }
}

const int32_t &WikiRedirects::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_id)
        return *_id;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WikiRedirects::getId() const noexcept
{
    return _id;
}
const typename WikiRedirects::PrimaryKeyType & WikiRedirects::getPrimaryKey() const
{
    assert(_id);
    return *_id;
}

const int32_t &WikiRedirects::getValueOfWikiId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(_wikiId)
        return *_wikiId;
    return defaultValue;
}
const std::shared_ptr<int32_t> &WikiRedirects::getWikiId() const noexcept
{
    return _wikiId;
}
void WikiRedirects::setWikiId(const int32_t &pWikiId) noexcept
{
    _wikiId = std::make_shared<int32_t>(pWikiId);
    _dirtyFlag[1] = true;
}


const std::string &WikiRedirects::getValueOfTitle() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_title)
        return *_title;
    return defaultValue;
}
const std::shared_ptr<std::string> &WikiRedirects::getTitle() const noexcept
{
    return _title;
}
void WikiRedirects::setTitle(const std::string &pTitle) noexcept
{
    _title = std::make_shared<std::string>(pTitle);
    _dirtyFlag[2] = true;
}
void WikiRedirects::setTitle(std::string &&pTitle) noexcept
{
    _title = std::make_shared<std::string>(std::move(pTitle));
    _dirtyFlag[2] = true;
}


const std::string &WikiRedirects::getValueOfRedirectsTo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(_redirectsTo)
        return *_redirectsTo;
    return defaultValue;
}
const std::shared_ptr<std::string> &WikiRedirects::getRedirectsTo() const noexcept
{
    return _redirectsTo;
}
void WikiRedirects::setRedirectsTo(const std::string &pRedirectsTo) noexcept
{
    _redirectsTo = std::make_shared<std::string>(pRedirectsTo);
    _dirtyFlag[3] = true;
}
void WikiRedirects::setRedirectsTo(std::string &&pRedirectsTo) noexcept
{
    _redirectsTo = std::make_shared<std::string>(std::move(pRedirectsTo));
    _dirtyFlag[3] = true;
}


const ::trantor::Date &WikiRedirects::getValueOfCreatedOn() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(_createdOn)
        return *_createdOn;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &WikiRedirects::getCreatedOn() const noexcept
{
    return _createdOn;
}
void WikiRedirects::setCreatedOn(const ::trantor::Date &pCreatedOn) noexcept
{
    _createdOn = std::make_shared<::trantor::Date>(pCreatedOn);
    _dirtyFlag[4] = true;
}


void WikiRedirects::updateId(const uint64_t id)
{
}

const std::vector<std::string> &WikiRedirects::insertColumns() noexcept
{
    static const std::vector<std::string> _inCols={
        "wiki_id",
        "title",
        "redirects_to",
        "created_on"
    };
    return _inCols;
}

void WikiRedirects::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(getWikiId())
    {
        binder << getValueOfWikiId();
    }
    else
    {
        binder << nullptr;
    }
    if(getTitle())
    {
        binder << getValueOfTitle();
    }
    else
    {
        binder << nullptr;
    }
    if(getRedirectsTo())
    {
        binder << getValueOfRedirectsTo();
    }
    else
    {
        binder << nullptr;
    }
    if(getCreatedOn())
    {
        binder << getValueOfCreatedOn();
    }
    else
    {
        binder << nullptr;
    }
}

const std::vector<std::string> WikiRedirects::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(_dirtyFlag);i++)
    {
        if(_dirtyFlag[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void WikiRedirects::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(_dirtyFlag[1])
    {
        if(getWikiId())
        {
            binder << getValueOfWikiId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[2])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[3])
    {
        if(getRedirectsTo())
        {
            binder << getValueOfRedirectsTo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(_dirtyFlag[4])
    {
        if(getCreatedOn())
        {
            binder << getValueOfCreatedOn();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value WikiRedirects::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getWikiId())
    {
        ret["wiki_id"]=getValueOfWikiId();
    }
    else
    {
        ret["wiki_id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getRedirectsTo())
    {
        ret["redirects_to"]=getValueOfRedirectsTo();
    }
    else
    {
        ret["redirects_to"]=Json::Value();
    }
    if(getCreatedOn())
    {
        ret["created_on"]=getCreatedOn()->toDbStringLocal();
    }
    else
    {
        ret["created_on"]=Json::Value();
    }
    return ret;
}

Json::Value WikiRedirects::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getWikiId())
            {
                ret[pMasqueradingVector[1]]=getValueOfWikiId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[2]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRedirectsTo())
            {
                ret[pMasqueradingVector[3]]=getValueOfRedirectsTo();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCreatedOn())
            {
                ret[pMasqueradingVector[4]]=getCreatedOn()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getWikiId())
    {
        ret["wiki_id"]=getValueOfWikiId();
    }
    else
    {
        ret["wiki_id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getRedirectsTo())
    {
        ret["redirects_to"]=getValueOfRedirectsTo();
    }
    else
    {
        ret["redirects_to"]=Json::Value();
    }
    if(getCreatedOn())
    {
        ret["created_on"]=getCreatedOn()->toDbStringLocal();
    }
    else
    {
        ret["created_on"]=Json::Value();
    }
    return ret;
}
